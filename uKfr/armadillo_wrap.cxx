/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ColT_double_t swig_types[0]
#define SWIGTYPE_p_MatT_double_t swig_types[1]
#define SWIGTYPE_p_MatrixViewT_double_t swig_types[2]
#define SWIGTYPE_p_MatrixViewT_float_t swig_types[3]
#define SWIGTYPE_p_MatrixViewT_int_t swig_types[4]
#define SWIGTYPE_p_MatrixViewT_long_long_t swig_types[5]
#define SWIGTYPE_p_MatrixViewT_long_t swig_types[6]
#define SWIGTYPE_p_MatrixViewT_std__complexT_double_t_t swig_types[7]
#define SWIGTYPE_p_MatrixViewT_std__complexT_float_t_t swig_types[8]
#define SWIGTYPE_p_MatrixViewT_unsigned_int_t swig_types[9]
#define SWIGTYPE_p_MatrixViewT_unsigned_long_long_t swig_types[10]
#define SWIGTYPE_p_MatrixViewT_unsigned_long_t swig_types[11]
#define SWIGTYPE_p_arma__ColT_double_t swig_types[12]
#define SWIGTYPE_p_arma__ColT_float_t swig_types[13]
#define SWIGTYPE_p_arma__ColT_int_t swig_types[14]
#define SWIGTYPE_p_arma__ColT_long_long_t swig_types[15]
#define SWIGTYPE_p_arma__ColT_long_t swig_types[16]
#define SWIGTYPE_p_arma__ColT_std__complexT_double_t_t swig_types[17]
#define SWIGTYPE_p_arma__ColT_std__complexT_float_t_t swig_types[18]
#define SWIGTYPE_p_arma__ColT_unsigned_int_t swig_types[19]
#define SWIGTYPE_p_arma__ColT_unsigned_long_long_t swig_types[20]
#define SWIGTYPE_p_arma__ColT_unsigned_long_t swig_types[21]
#define SWIGTYPE_p_arma__MatT_double_t swig_types[22]
#define SWIGTYPE_p_arma__MatT_float_t swig_types[23]
#define SWIGTYPE_p_arma__MatT_int_t swig_types[24]
#define SWIGTYPE_p_arma__MatT_long_long_t swig_types[25]
#define SWIGTYPE_p_arma__MatT_long_t swig_types[26]
#define SWIGTYPE_p_arma__MatT_std__complexT_double_t_t swig_types[27]
#define SWIGTYPE_p_arma__MatT_std__complexT_float_t_t swig_types[28]
#define SWIGTYPE_p_arma__MatT_unsigned_int_t swig_types[29]
#define SWIGTYPE_p_arma__MatT_unsigned_long_long_t swig_types[30]
#define SWIGTYPE_p_arma__MatT_unsigned_long_t swig_types[31]
#define SWIGTYPE_p_arma__RowT_double_t swig_types[32]
#define SWIGTYPE_p_arma__RowT_float_t swig_types[33]
#define SWIGTYPE_p_arma__RowT_int_t swig_types[34]
#define SWIGTYPE_p_arma__RowT_long_long_t swig_types[35]
#define SWIGTYPE_p_arma__RowT_long_t swig_types[36]
#define SWIGTYPE_p_arma__RowT_std__complexT_double_t_t swig_types[37]
#define SWIGTYPE_p_arma__RowT_std__complexT_float_t_t swig_types[38]
#define SWIGTYPE_p_arma__RowT_unsigned_int_t swig_types[39]
#define SWIGTYPE_p_arma__RowT_unsigned_long_long_t swig_types[40]
#define SWIGTYPE_p_arma__RowT_unsigned_long_t swig_types[41]
#define SWIGTYPE_p_arma__arma_rng swig_types[42]
#define SWIGTYPE_p_arma_rng_cxx11__seed_type swig_types[43]
#define SWIGTYPE_p_double swig_types[44]
#define SWIGTYPE_p_float swig_types[45]
#define SWIGTYPE_p_int swig_types[46]
#define SWIGTYPE_p_int32_t swig_types[47]
#define SWIGTYPE_p_int64_t swig_types[48]
#define SWIGTYPE_p_long swig_types[49]
#define SWIGTYPE_p_long_long swig_types[50]
#define SWIGTYPE_p_seed_type swig_types[51]
#define SWIGTYPE_p_std__complexT_double_t swig_types[52]
#define SWIGTYPE_p_std__complexT_float_t swig_types[53]
#define SWIGTYPE_p_std__string swig_types[54]
#define SWIGTYPE_p_unsigned_int swig_types[55]
#define SWIGTYPE_p_unsigned_long swig_types[56]
#define SWIGTYPE_p_unsigned_long_long swig_types[57]
static swig_type_info *swig_types[59];
static swig_module_info swig_module = {swig_types, 58, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "arma"
#define SWIG_init      luaopen_arma
#define SWIG_init_user luaopen_arma_user

#define SWIG_LUACODE   luaopen_arma_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include<armadillo>
#include<vector>
#include<complex>
#include<string>

using namespace arma;


#include <complex>


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <string>
#include <algorithm>
#include <iostream>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN char std_string___getitem____SWIG(std::string *self,size_t i){ return (*self)[i]; }
SWIGINTERN void std_string___setitem____SWIG(std::string *self,size_t i,char c){ (*self)[i] = c; }
SWIGINTERN char const *std_string___str____SWIG(std::string *self){ return self->c_str(); }
SWIGINTERN int32_t std_string_to_int32__SWIG_0(std::string *self,int base=10){ return std::stoi(self->c_str(),nullptr,base); }
SWIGINTERN int64_t std_string_to_int64__SWIG_0(std::string *self,int base=10){ return std::stoll(self->c_str(),nullptr,base); }
SWIGINTERN float std_string_to_float__SWIG(std::string *self){ return std::stof(*self); }
SWIGINTERN double std_string_to_double__SWIG(std::string *self){ return std::stod(*self); }
SWIGINTERN void std_string_reverse__SWIG(std::string *self){ std::reverse(self->begin(),self->end()); }
SWIGINTERN void std_string_sort__SWIG(std::string *self){ std::sort(self->begin(),self->end()); }
SWIGINTERN void std_string_shuffle__SWIG(std::string *self){ std::random_shuffle(self->begin(),self->end()); }
SWIGINTERN void std_string_getline__SWIG(std::string *self){
                std::getline(std::cin, *self);
            }
SWIGINTERN void std_string_fill__SWIG(std::string *self,size_t i,char c){
                self->resize(i);
                for(size_t n = 0; n < i; n++) (*self)[i] = c;
            }

#include<armadillo>
#include<vector>
#include<complex>
#include<string>


template<typename T>
struct MatrixView {
    arma::Mat<T> * m;
    size_t row;

    MatrixView(arma::Mat<T> * x, size_t r) : row(r),m(x) {}

    T& operator [](size_t i) { return (*m)(row,i); }

    T    __getitem__(size_t i) { return (*m)(row,i); }
    void __setitem__(size_t i, const T val) { (*m)(row,i) = val; }
};

// will return to the armadillo way soon
enum ApproxType
{
    APPROX_ABSDIFF=0,
    APPROX_RELDIFF,
    APPROX_BOTH
};



    namespace ops {
    template<typename T>    
    Col<T> operator + (const T a, const Col<T> & b) {
        Col<T> r(b.size());
        r = a + b;
        return r;
    }
    template<typename T>    
    Col<T> operator - (const T a, const Col<T> & b) {
        Col<T> r(b.size());
        r = a - b;
        return r;
    }
    template<typename T>    
    Col<T> operator * (const T a, const Col<T> & b) {
        Col<T> r(b.size());
        r = a * b;
        return r;
    }
    template<typename T>    
    Col<T> operator / (const T a, const Col<T> & b) {
        Col<T> r(b.size());
        r = a * b;
        return r;
    }

    template<typename T>    
    Mat<T> operator + (const T a, const Mat<T> & b) {
        Mat<T> r(b.size());
        r = a + b;
        return r;
    }
    template<typename T>    
    Mat<T> operator - (const T a, const Mat<T> & b) {
        Mat<T> r(b.size());
        r = a - b;
        return r;
    }
    template<typename T>    
    Mat<T> operator * (const T a, const Mat<T> & b) {
        Mat<T> r(b.size());
        r = a * b;
        return r;
    }

    template<typename T>    
    Col<T> linspace(T start, T end, size_t N=100) { return arma::linspace(start,end,N); }

    template<typename T>    
    Col<T> logspace(T start, T end, size_t N=100) { return arma::logspace(start,end,N); }

    template<typename T>    
    Col<T> regspace(T start, T end, size_t N=100) { return arma::regspace(start,end,N); }


    template<typename T>
    Col<T> randperm(size_t n) { return Col<T>(arma::randperm(n)); }

    template<typename T>
    Mat<T> randperm(size_t r, size_t c) { return Mat<T>(arma::randperm(r,c)); }

    template<typename T>
    Mat<T> eye(size_t r, size_t c) { return Mat<T>(arma::eye(r,c)); }

    template<typename T>
    T zero(const T & x) {
        T r(x);
        r.zeros();
        return r;
    }
    template<typename T>
    T ones(const T & x) {
        T r(x);
        r.ones();
        return r;
    }
    template<typename T>
    T random(const T & x) {
        T r(x);
        r.randu();
        return r;
    }
    template<typename T>
    T randu(const T & x) {
        T r(x);
        r.randu();
        return r;
    }


    template<typename T>
    Col<T> random_vector(size_t n, T min=(T)0, T max = (T)0) {
        Col<T> r(n);
        r.randu();
        r = min + (max-min)*r;
        return r;
    }

    template<typename T>
    Mat<T> toeplitz(const Col<T> & a) { return Mat<T>(arma::toeplitz(a)); }

    template<typename T>
    Mat<T> circ_toeplitz(const Col<T> & a) { return Mat<T>(arma::circ_toeplitz(a)); }

    template<typename T>
    Mat<T> toeplitz(const Col<T> & a, const Col<T> & b) { return Mat<T>(arma::toeplitz(a,b)); }


    template<typename T>
    T accu(const Col<T> & a) { return arma::accu(a); }
    template<typename T>
    T accu(const Row<T> & a) { return arma::accu(a); }
    template<typename T>
    T accu(const Mat<T> & a) { return arma::accu(a); }

    template<typename T>
    T arg(const Col<T> & a) { return arma::arg(a); }
    template<typename T>
    T arg(const Row<T> & a) { return arma::arg(a); }
    template<typename T>
    T arg(const Mat<T> & a) { return arma::arg(a); }

    template<typename T>
    T sum(const Col<T> & a) { return arma::sum(a); }
    template<typename T>
    T sum(const Row<T> & a) { return arma::sum(a); }
    template<typename T>
    T sum(const Mat<T> & a, size_t dim=0) { return arma::sum(a,dim); }

    template<typename T>
    Mat<T> affmul(const Mat<T> & a, const Mat<T> & b) { return Mat<T>(arma::affmul(a,b)); }
    template<typename T>
    Mat<T> affmul(const Mat<T> & a, const Col<T> & b) { return Mat<T>(arma::affmul(a,b)); }

    template<typename T>
    T cdot(const Col<T> & a) { return arma::cdot(a); }
    template<typename T>
    T cdot(const Row<T> & a) { return arma::cdot(a); }

    template<typename T>
    bool approx_equal(const Mat<T> & a, const Mat<T> & b, ApproxType type, T tol) {
        std::string foo;
        if(type == APPROX_ABSDIFF) foo = "absdiff";
        else if(type == APPROX_RELDIFF) foo = "reldiff";
        else foo = "both";
        return arma::approx_equal(a,b, foo, tol);
    }

    template<typename T>
    Mat<T> as_scalar(T expr) { return Mat<T>(arma::as_scalar(expr)); }

    template<typename T>
    Mat<T> clamp(const Mat<T> & a, T min, T max) { return Mat<T>(arma::clamp(a,min,max)); }

    template<typename T>
    T cond(const Mat<T> & a) { return arma::cond(a); }

    template<typename T>
    Col<T> cumsum(const Col<T> & v) { return Col<T>(arma::cumsum(v)); }
    template<typename T>
    Row<T> cumsum(const Row<T> & v) { return Col<T>(arma::cumsum(v)); }
    template<typename T>
    Mat<T> cumsum(const Mat<T> & m) { return Mat<T>(arma::cumsum(m)); }

    template<typename T>
    Col<T> cumprod(const Col<T> & v) { return Col<T>(arma::cumprod(v)); }
    template<typename T>
    Row<T> cumprod(const Row<T> & v) { return Col<T>(arma::cumprod(v)); }
    template<typename T>
    Mat<T> cumprod(const Mat<T> & m) { return Mat<T>(arma::cumprod(m)); }

    template<typename T>
    Mat<T> det(const Mat<T> & m) { return Mat<T>(arma::det(m)); }

    template<typename T>
    Mat<T> diagmat(const Col<T> & v) { return Mat<T>(arma::diagmat(v)); }
    template<typename T>
    Mat<T> diagmat(const Mat<T> & m) { return Mat<T>(arma::diagmat(m)); }

    template<typename T>
    Col<T> diagvec(const Mat<T> & a, size_t k = 0) { return Col<T>(arma::diagvec(a)); }

    template<typename T>
    Col<T> diff(const Col<T> & v, size_t k=1) { return Col<T>(arma::diff(v,k)); }

    template<typename T>
    Mat<T> diff(const Mat<T> & m, size_t k=1, size_t dim = 0) { return Mat<T>(arma::diff(m,k,dim)); }

    template<typename T>
    T dot(const Col<T> & a, const Col<T> & b) { return arma::dot(a,b); }
    template<typename T>
    T dot(const Row<T> & a, const Row<T> & b) { return arma::dot(a,b); }

    template<typename T>
    T norm_dot(const Col<T> & a, const Col<T> & b) { return arma::norm_dot(a,b); }
    template<typename T>
    T norm_dot(const Row<T> & a, const Row<T> & b) { return arma::norm_dot(a,b); }

    template<typename T>
    void inplace_trans(Mat<T> & m) { arma::inplace_trans(m); }

    template<typename T>
    T min(const Col<T> & x) { return arma::min(x); }
    template<typename T>
    T min(const Row<T> & x) { return arma::min(x); }
    template<typename T>
    T min(const Mat<T> & x,size_t dim=0) { return arma::min(x,dim); }

    template<typename T>
    T max(const Col<T> & x) { return arma::max(x); }
    template<typename T>
    T max(const Row<T> & x) { return arma::max(x); }
    template<typename T>
    T max(const Mat<T> & x, size_t dim=0) { return arma::max(x,dim); }

    template<typename T>
    Col<T> normalize(const Col<T> & x) { return Col<T>(arma::normalise(x)); }
    template<typename T>
    Row<T> normalize(const Row<T> & x) { return Col<T>(arma::normalise(x)); }
    template<typename T>
    Mat<T> normalize(const Mat<T> & x) { return Mat<T>(arma::normalise(x)); }

    template<typename T>
    T prod(const Col<T> & x) { return arma::prod(x); }
    template<typename T>
    T prod(const Row<T> & x) { return arma::prod(x); }
    template<typename T>
    T prod(const Mat<T> & x, size_t dim=0) { return arma::prod(x,dim); }

    template<typename T>
    Mat<T> powmat(const Mat<T> & x, T n) { return Mat<T>(arma::powmat(x,n)); }

    template<typename T>
    size_t rank(const Mat<T> & x) { return arma::rank(x); }
    template<typename T>
    size_t rank(const Mat<T> & x, T tol) { return arma::rank(x,tol); }

    template<typename T>
    Mat<T> repelem(const Mat<T> & a, size_t r, size_t c) { return Mat<T>(arma::repelem(a,r,c)); }

    template<typename T>
    Mat<T> repmat(const Mat<T> & a, size_t r, size_t c) { return Mat<T>(arma::repmat(a,r,c)); }

    template<typename T>
    Mat<T> reshape(const Mat<T> & a, size_t r, size_t c) { return Mat<T>(arma::reshape(a,r,c)); }

    template<typename T>
    Col<T> reverse(const Col<T> & a) { return Col<T>(arma::reverse(a)); }
    template<typename T>
    Mat<T> reverse(const Mat<T> & a, size_t dim=0) { return Mat<T>(arma::reverse(a,dim)); }

    template<typename T>
    Col<T> shift(const Col<T> & a, size_t n) { return Col<T>(arma::shift(a,n)); }
    template<typename T>
    Mat<T> shift(const Mat<T> & a, size_t n, size_t dim = 0) { return Mat<T>(arma::shift(a,n,dim)); }

    template<typename T>
    Col<T> shuffle(const Col<T> & a, size_t n) { return Col<T>(arma::shuffle(a,n)); }
    template<typename T>
    Mat<T> shuffle(const Mat<T> & a, size_t n, size_t dim = 0) { return Mat<T>(arma::shuffle(a,n,dim)); }

    template<typename T>
    size_t size(const Col<T> & v) { return arma::size(v); }
    template<typename T>
    size_t size(const Row<T> & v) { return arma::size(v); }
    template<typename T>
    size_t size(const Mat<T> & m) { return arma::size(m); }

    template<typename T>
    void sort(const Col<T> & v, int direction=1) { return arma::sort(v, direction==1? "ascend":"descend"); }
    template<typename T>
    void sort(const Row<T> & v, int direction=1) { return arma::sort(v, direction==1? "ascend":"descend"); }
    template<typename T>
    void sort(const Mat<T> & m, int direction=1, int dim=0) { return arma::sort(m, direction==1? "ascend":"descend",dim); }

    template<typename T>
    Mat<T> symmatu(const Mat<T> & m) { return Mat<T>(arma::symmatu(m)); }

    template<typename T>
    T trace(const Mat<T> & m) { return arma::trace(m); }

    template<typename T>
    Mat<T> trans(const Mat<T> & m) { return Mat<T>(arma::trans(m.mnatrix)); }

    template<typename T>
    Mat<T> trimatu(const Mat<T> & m, size_t k = 0) { return Mat<T>(arma::symmatu(m,k)); }

    template<typename T>
    Col<T> vectorize(const Mat<T> & m) { return Mat<T>(arma::vectorise(m)); }


    template<typename T>
    Col<T> abs(const Col<T> & a) { return Col<T>(arma::abs(a)); }
    template<typename T>
    Row<T> abs(const Row<T> & a) { return Row<T>(arma::abs(a)); }
    template<typename T>
    Mat<T> abs(const Mat<T> & a) { return Mat<T>(arma::abs(a)); }

    template<typename T>
    Col<T> exp(const Col<T> & a) { return Col<T>(arma::exp(a)); }
    template<typename T>
    Row<T> exp(const Row<T> & a) { return Row<T>(arma::exp(a)); }
    template<typename T>
    Mat<T> exp(const Mat<T> & a) { return Mat<T>(arma::expmat(a)); }

    template<typename T>
    Col<T> exp2(const Col<T> & a) { return Col<T>(arma::exp2(a)); }
    template<typename T>
    Row<T> exp2(const Row<T> & a) { return Row<T>(arma::exp2(a)); }
    template<typename T>
    Mat<T> exp2(const Mat<T> & a) { return Mat<T>(arma::exp2(a)); }

    template<typename T>
    Col<T> exp10(const Col<T> & a) { return Col<T>(arma::exp10(a)); }
    template<typename T>
    Row<T> exp10(const Row<T> & a) { return Row<T>(arma::exp10(a)); }
    template<typename T>
    Mat<T> exp10(const Mat<T> & a) { return Mat<T>(arma::exp10(a)); }

    template<typename T>
    Col<T> expm1(const Col<T> & a) { return Col<T>(arma::expm1(a)); }
    template<typename T>
    Row<T> expm1(const Row<T> & a) { return Row<T>(arma::expm1(a)); }
    template<typename T>
    Mat<T> expm1(const Mat<T> & a) { return Mat<T>(arma::expm1(a)); }

    template<typename T>
    Col<T> trunc_exp(const Col<T> & a) { return Col<T>(arma::trunc_exp(a)); }
    template<typename T>
    Row<T> trunc_exp(const Row<T> & a) { return Row<T>(arma::trunc_exp(a)); }
    template<typename T>
    Mat<T> trunc_exp(const Mat<T> & a) { return Mat<T>(arma::trunc_exp(a)); }

    template<typename T>
    Col<T> log(const Col<T> & a) { return Col<T>(arma::log(a)); }
    template<typename T>
    Row<T> log(const Row<T> & a) { return Row<T>(arma::log(a)); }
    template<typename T>
    Mat<T> log(const Mat<T> & a) { return Mat<T>(arma::logmat(a)); }

    template<typename T>
    Col<T> log2(const Col<T> & a) { return Col<T>(arma::log2(a)); }
    template<typename T>
    Row<T> log2(const Row<T> & a) { return Row<T>(arma::log2(a)); }
    template<typename T>
    Mat<T> log2(const Mat<T> & a) { return Mat<T>(arma::log2(a)); }

    template<typename T>
    Col<T> log1p(const Col<T> & a) { return Col<T>(arma::log1p(a)); }
    template<typename T>
    Row<T> log1p(const Row<T> & a) { return Row<T>(arma::log1p(a)); }
    template<typename T>
    Mat<T> log1p(const Mat<T> & a) { return Mat<T>(arma::log1p(a)); }

    template<typename T>
    Col<T> log10(const Col<T> & a) { return Col<T>(arma::log10(a)); }
    template<typename T>
    Row<T> log10(const Row<T> & a) { return Row<T>(arma::log10(a)); }
    template<typename T>
    Mat<T> log10(const Mat<T> & a) { return Mat<T>(arma::log10(a)); }

    template<typename T>
    Col<T> trunc_log(const Col<T> & a) { return Col<T>(arma::trunc_log(a)); }
    template<typename T>
    Row<T> trunc_log(const Row<T> & a) { return Row<T>(arma::trunc_log(a)); }
    template<typename T>
    Mat<T> trunc_log(const Mat<T> & a) { return Mat<T>(arma::trunc_log(a)); }

    template<typename T>
    Col<T> pow(const Col<T> & a, T x) { return Col<T>(arma::pow(a,x)); }
    template<typename T>
    Row<T> pow(const Row<T> & a, T x) { return Row<T>(arma::pow(a,x)); }
    template<typename T>
    Mat<T> pow(const Mat<T> & a, T x) { return Mat<T>(arma::powmat(a,x)); }

    template<typename T>
    Col<T> square(const Col<T> & a) { return Col<T>(arma::square(a)); }
    template<typename T>
    Row<T> square(const Row<T> & a) { return Row<T>(arma::square(a)); }
    template<typename T>
    Mat<T> square(const Mat<T> & a) { return Mat<T>(arma::square(a)); }

    template<typename T>
    Col<T> sqrt(const Col<T> & a) { return Col<T>(arma::sqrt(a)); }
    template<typename T>
    Row<T> sqrt(const Row<T> & a) { return Row<T>(arma::sqrt(a)); }
    template<typename T>
    Mat<T> sqrt(const Mat<T> & a) { return Mat<T>(arma::sqrtmat(a)); }

    template<typename T>
    Col<T> floor(const Col<T> & a) { return Col<T>(arma::floor(a)); }
    template<typename T>
    Row<T> floor(const Row<T> & a) { return Row<T>(arma::floor(a)); }
    template<typename T>
    Mat<T> floor(const Mat<T> & a) { return Mat<T>(arma::floor(a)); }

    template<typename T>
    Col<T> ceil(const Col<T> & a) { return Col<T>(arma::ceil(a)); }
    template<typename T>
    Row<T> ceil(const Row<T> & a) { return Row<T>(arma::ceil(a)); }
    template<typename T>
    Mat<T> ceil(const Mat<T> & a) { return Mat<T>(arma::ceil(a)); }

    template<typename T>
    Col<T> round(const Col<T> & a) { return Col<T>(arma::round(a)); }
    template<typename T>
    Row<T> round(const Row<T> & a) { return Row<T>(arma::round(a)); }
    template<typename T>
    Mat<T> round(const Mat<T> & a) { return Mat<T>(arma::round(a)); }

    template<typename T>
    Col<T> trunc(const Col<T> & a) { return Col<T>(arma::trunc(a)); }
    template<typename T>
    Row<T> trunc(const Row<T> & a) { return Row<T>(arma::trunc(a)); }
    template<typename T>
    Mat<T> trunc(const Mat<T> & a) { return Mat<T>(arma::trunc(a)); }

    template<typename T>
    Col<T> erf(const Col<T> & a) { return Col<T>(arma::erf(a)); }
    template<typename T>
    Row<T> erf(const Row<T> & a) { return Row<T>(arma::erf(a)); }
    template<typename T>
    Mat<T> erf(const Mat<T> & a) { return Mat<T>(arma::erf(a)); }

    template<typename T>
    Col<T> erfc(const Col<T> & a) { return Col<T>(arma::erfc(a)); }
    template<typename T>
    Row<T> erfc(const Row<T> & a) { return Row<T>(arma::erfc(a)); }
    template<typename T>
    Mat<T> erfc(const Mat<T> & a) { return Mat<T>(arma::erfc(a)); }

    template<typename T>
    Col<T> tgamma(const Col<T> & a) { return Col<T>(arma::tgamma(a)); }
    template<typename T>
    Row<T> tgamma(const Row<T> & a) { return Row<T>(arma::tgamma(a)); }
    template<typename T>
    Mat<T> tgamma(const Mat<T> & a) { return Mat<T>(arma::tgamma(a)); }

    template<typename T>
    Col<T> lgamma(const Col<T> & a) { return Col<T>(arma::lgamma(a)); }
    template<typename T>
    Row<T> lgamma(const Row<T> & a) { return Row<T>(arma::lgamma(a)); }
    template<typename T>
    Mat<T> lgamma(const Mat<T> & a) { return Mat<T>(arma::lgamma(a)); }

    template<typename T>
    Col<T> sign(const Col<T> & a) { return Col<T>(arma::sign(a)); }
    template<typename T>
    Row<T> sign(const Row<T> & a) { return Row<T>(arma::sign(a)); }
    template<typename T>
    Mat<T> sign(const Mat<T> & a) { return Mat<T>(arma::sign(a)); }

    template<typename T>
    Col<T> cos(const Col<T> & a) { return Col<T>(arma::cos(a)); }
    template<typename T>
    Row<T> cos(const Row<T> & a) { return Row<T>(arma::cos(a)); }
    template<typename T>
    Mat<T> cos(const Mat<T> & a) { return Mat<T>(arma::cos(a)); }

    template<typename T>
    Col<T> sin(const Col<T> & a) { return Col<T>(arma::sin(a)); }
    template<typename T>
    Row<T> sin(const Row<T> & a) { return Row<T>(arma::sin(a)); }
    template<typename T>
    Mat<T> sin(const Mat<T> & a) { return Mat<T>(arma::sin(a)); }

    template<typename T>
    Col<T> tan(const Col<T> & a) { return Col<T>(arma::tan(a)); }
    template<typename T>
    Row<T> tan(const Row<T> & a) { return Row<T>(arma::tan(a)); }
    template<typename T>
    Mat<T> tan(const Mat<T> & a) { return Mat<T>(arma::tan(a)); }

    template<typename T>
    Col<T> acos(const Col<T> & a) { return Col<T>(arma::acos(a)); }
    template<typename T>
    Row<T> acos(const Row<T> & a) { return Row<T>(arma::acos(a)); }
    template<typename T>
    Mat<T> acos(const Mat<T> & a) { return Mat<T>(arma::acos(a)); }

    template<typename T>
    Col<T> asin(const Col<T> & a) { return Col<T>(arma::asin(a)); }
    template<typename T>
    Row<T> asin(const Row<T> & a) { return Row<T>(arma::asin(a)); }
    template<typename T>
    Mat<T> asin(const Mat<T> & a) { return Mat<T>(arma::asin(a)); }

    template<typename T>
    Col<T> atan(const Col<T> & a) { return Col<T>(arma::atan(a)); }
    template<typename T>
    Row<T> atan(const Row<T> & a) { return Row<T>(arma::atan(a)); }
    template<typename T>
    Mat<T> atan(const Mat<T> & a) { return Mat<T>(arma::atan(a)); }


    template<typename T>
    Col<T> cosh(const Col<T> & a) { return Col<T>(arma::cosh(a)); }
    template<typename T>
    Row<T> cosh(const Row<T> & a) { return Row<T>(arma::cosh(a)); }
    template<typename T>
    Mat<T> cosh(const Mat<T> & a) { return Mat<T>(arma::cosh(a)); }

    template<typename T>
    Col<T> sinh(const Col<T> & a) { return Col<T>(arma::sinh(a)); }
    template<typename T>
    Row<T> sinh(const Row<T> & a) { return Row<T>(arma::sinh(a)); }
    template<typename T>
    Mat<T> sinh(const Mat<T> & a) { return Mat<T>(arma::sinh(a)); }

    template<typename T>
    Col<T> tanh(const Col<T> & a) { return Col<T>(arma::tanh(a)); }
    template<typename T>
    Row<T> tanh(const Row<T> & a) { return Row<T>(arma::tanh(a)); }
    template<typename T>
    Mat<T> tanh(const Mat<T> & a) { return Mat<T>(arma::tanh(a)); }

    template<typename T>
    Col<T> acosh(const Col<T> & a) { return Col<T>(arma::acosh(a)); }
    template<typename T>
    Row<T> acosh(const Row<T> & a) { return Row<T>(arma::acosh(a)); }
    template<typename T>
    Mat<T> acosh(const Mat<T> & a) { return Mat<T>(arma::acosh(a)); }

    template<typename T>
    Col<T> asinh(const Col<T> & a) { return Col<T>(arma::asinh(a)); }
    template<typename T>
    Row<T> asinh(const Row<T> & a) { return Row<T>(arma::asinh(a)); }
    template<typename T>
    Mat<T> asinh(const Mat<T> & a) { return Mat<T>(arma::asinh(a)); }

    template<typename T>
    Col<T> atanh(const Col<T> & a) { return Col<T>(arma::atanh(a)); }
    template<typename T>
    Row<T> atanh(const Row<T> & a) { return Row<T>(arma::atanh(a)); }
    template<typename T>
    Mat<T> atanh(const Mat<T> & a) { return Mat<T>(arma::atanh(a)); }

    template<typename T>
    Col<T> atan2(const Col<T> & a, const Col<T> & b) { return Col<T>(arma::atan2(a,b)); }
    template<typename T>
    Row<T> atan2(const Row<T> & a, const Row<T> & b) { return Row<T>(arma::atan2(a,b)); }
    template<typename T>
    Mat<T> atan2(const Mat<T> & a, const Mat<T> & b) { return Mat<T>(arma::atan2(a,b)); }

    template<typename T>
    Col<T> hypot(const Col<T> & a, const Col<T> & b) { return Col<T>(arma::hypot(a,b)); }
    template<typename T>
    Row<T> hypot(const Row<T> & a, const Row<T> & b) { return Row<T>(arma::hypot(a,b)); }
    template<typename T>
    Mat<T> hypot(const Mat<T> & a, const Mat<T> & b) { return Mat<T>(arma::hypot(a,b)); }

    template<typename T>
    Col<T> sinc(const Col<T> & a) { return Col<T>(arma::sinc(a)); }
    template<typename T>
    Row<T> sinc(const Row<T> & a) { return Row<T>(arma::sinc(a)); }
    template<typename T>
    Mat<T> sinc(const Mat<T> & a) { return Mat<T>(arma::sinc(a)); }

    /*
    template<typename T>
    Col<T> col(const Mat<T> & a) { return Col<T>(a)); }

    template<typename T>
    Row<T> row(const Mat<T> & a) { return Col<T>(arma::row(a)); }
    */

    template<typename T>
    void addToEachRow(Mat<T> & m, const Row<T> & v) {
        for(size_t i = 0; i < m.rows(); i++)
            m.row(i) += v;
    }


    template<typename T>
    void addToEachCol(Mat<T> & m, const Col<T> & v) {
        for(size_t i = 0; i < m.cols(); i++)
            m.col(i) += v;
    }

    // complex

    template<typename T>
    void set_real(Col<std::complex<T>> & v, const T & value) { v.set_real(value); }
    template<typename T>
    void set_real(Row<std::complex<T>> & v, const T & value) { v.set_real(value); }
    template<typename T>
    void set_real(Mat<std::complex<T>> & m, const T & value) { m.set_real(value); }


    template<typename T>
    void set_imag(Col<std::complex<T>> & v, const T & value) { v.set_imag(value); }
    template<typename T>
    void set_imag(Row<std::complex<T>> & v, const T & value) { v.set_imag(value); }
    template<typename T>
    void set_imag(Mat<std::complex<T>> & m, const T & value) { m.set_imag(value); }

    template<typename T>
    Mat<std::complex<T>> st(Mat<std::complex<T>> & m) { return Mat<T>(m.st()); }

    template<typename T>
    bool is_hermitian(const Mat<std::complex<T>>& m) { return m.is_hermitian(); }

    template<typename T>
    Mat<T> real(Mat<std::complex<T>> & m) { return Mat<T>(arma::real(m)); }

    template<typename T>
    Mat<T> imag(Mat<std::complex<T>> & m) { return Mat<T>(arma::imag(m)); }

    template<typename T>
    std::complex<double> log_det(Mat<T> & m) { return std::complex<double>(arma::log_det(m)); }

    template<typename T>
    bool log_det(Mat<T> & m, double val, double sign) { return arma::log_det(val,sign,m); }

    template<typename T>
    double log_det_sympd(Mat<T> & m) { return arma::log_det_sympd(m); }

    template<typename T>
    bool   log_det_sympd(Mat<T> & m, double result) { return arma::log_det(result,m); }

    template<typename T>
    Mat<std::complex<T>> logmat(Mat<T> & m) { return Mat<T>(arma::logmat(m)); }

    template<typename T>
    Mat<T> logmat_sympd(Mat<T> & m) { return Mat<T>(arma::log_det_sympd(m)); }

    template<typename T>
    Mat<std::complex<T>> sqrtmat(Mat<T> & m) { return Mat<std::complex<T>>(arma::sqrtmat(m)); }

    template<typename T>
    Mat<T> sqrtmat_sympd(Mat<T> & m) { return Mat<T>(arma::sqrtmat_sympd(m)); }


    // solvers
    template<typename T>
    Mat<T> chol(Mat<T> & m, std::string & layout = "upper") { return Mat<T>(arma::chol(m,layout)); }

    template<typename T>
    Col<T> eig_sym(Mat<T> & m) { return Col<T>(arma::chol(m)); }

    template<typename T>
    Col<std::complex<T>> eig_gen(Mat<T> & m) { return Col<std::complex<T>>(arma::eig_gen(m)); }

    template<typename T>
    Col<std::complex<T>> eig_pair(Mat<T> & a, Mat<T> & b) { return Col<std::complex<T>>(arma::eig_pair(a,b)); }

    template<typename T>
    Mat<T> hess(Mat<T> & x) { return Mat<T>(arma::hess(x)); }

    template<typename T>
    Mat<T> inv(Mat<T> & x) { return Mat<T>(arma::inv(x)); }

    template<typename T>
    Mat<T> inv_sympd(Mat<T> & x) { return Mat<T>(arma::inv_sympd(x)); }

    template<typename T>
    void lu(Mat<T> & L, Mat<T> & U, Mat<T>& P, Mat<T> & X) { arma::lu(L,U,P,X); }

    template<typename T>
    void lu(Mat<T> & L, Mat<T> & U, Mat<T> & X) { arma::lu(L,U,X); }

    // I don't really know what this does, I don't really use the solvers much.
    template<typename T>
    Mat<T> null(Mat<T> & A) { return Mat<T>(arma::null(A)); }

    template<typename T>
    Mat<T> orth(Mat<T> & A) { return Mat<T>(arma::orth(A)); }

    template<typename T>
    Mat<T> pinv(Mat<T> & A) { return Mat<T>(arma::pinv(A)); }

    template<typename T>
    Mat<T> qr(Mat<T> & Q, Mat<T> & R, Mat<T> & X) { return Mat<T>(arma::qr(Q, R, X)); }

    template<typename T>
    Mat<T> qr_econ(Mat<T> & Q, Mat<T> & R, Mat<T> & X) { return Mat<T>(arma::qr_econ(Q, R, X)); }

    template<typename T>
    Mat<T> schur(Mat<T> & A) { return Mat<T>(arma::schur(A)); }

    template<typename T>
    Col<T> solve(Mat<T> & A, Col<T> & b) { return Mat<T>(arma::pinv(A,b)); }

    template<typename T>
    Col<T> svd(Mat<T> & X) { return Mat<T>(arma::svd(X)); }

    // DSP
    template<typename T>
    Col<T> conv(Col<T> & A, Col<T> & b) { return Col<T>(arma::conv(A, b)); }

    template<typename T>
    Mat<T> conv2(Mat<T> & A, Mat<T> & b) { return Mat<T>(arma::conv2(A, b)); }

    template<typename T>
    Col<std::complex<T>> fft(Col<T> & A) { return Col<std::complex<T>>(arma::fft(A)); }

    template<typename T>
    Col<std::complex<T>> fft(Col<std::complex<T>> & A) { return Col<std::complex<T>>(arma::fft(A)); }

    template<typename T>
    Col<std::complex<T>> ifft(Col<std::complex<T>> & A) { return Col<std::complex<T>>(arma::ifft(A)); }

    template<typename T>
    Mat<std::complex<T>> fft2(Mat<T> & A) { return Mat<T>(arma::fft(A)); }

    template<typename T>
    Mat<std::complex<T>> fft2(Mat<std::complex<T>> & A) { return Mat<std::complex<T>>(arma::fft(A)); }

    template<typename T>
    Mat<std::complex<T>> ifft2(Mat<std::complex<T>> & A) { return Mat<std::complex<T>>(arma::ifft2(A)); }

    template<typename T>
    void interp1(Col<T> & X, Col<T> & Y, Col<T> & XI, Col<T> & YI, std::string& method = "linear", double extrap = arma::datum::nan ) { (arma::interp1(X, Y, XI, YI)); }

    template<typename T>
    void interp2(Mat<T> & X, Mat<T> & Y, Mat<T> & XI, Mat<T> & YI, std::string& method = "linear", double extrap = arma::datum::nan ) { (arma::interp2(X, Y, XI, YI)); }


    template<typename T>
    Col<T> polyfit(Col<T> & X, Col<T> & Y, Col<T> & N) { return Col<T>(arma::polyfit(X, Y, N)); }

    template<typename T>
    Col<T> polyval(Col<T> & P, Col<T> & X) { return Col<T>(arma::polyval(P, X)); }

    // Statistics

    template<typename T>
    double mean(Col<T> & V) { return Col<T>(arma::mean(V)); }
    template<typename T>
    double median(Col<T> & V) { return Col<T>(arma::median(V)); }
    template<typename T>
    double stddev(Col<T> & V) { return Col<T>(arma::stddev(V)); }
    template<typename T>
    double var(Col<T> & V) { return Col<T>(arma::var(V)); }
    template<typename T>
    double range(Col<T> & V) { return Col<T>(arma::range(V)); }

    template<typename T>
    double mean(Mat<T> & V) { return Mat<T>(arma::mean(V)); }
    template<typename T>
    double median(Mat<T> & V) { return Mat<T>(arma::median(V)); }
    template<typename T>
    double stddev(Mat<T> & V) { return Mat<T>(arma::stddev(V)); }
    template<typename T>
    double var(Mat<T> & V) { return Mat<T>(arma::var(V)); }
    template<typename T>
    double range(Mat<T> & V) { return Mat<T>(arma::range(V)); }

    template<typename T>
    Col<T> cov(Col<T> & X, Col<T>& Y) { return Col<T>(arma::cov(X,Y)); }
    template<typename T>
    Col<T> cov(Col<T> & X) { return Col<T>(arma::cov(X)); }
    template<typename T>
    Mat<T> cov(Mat<T> & X, Mat<T>& Y) { return Mat<T>(arma::cov(X,Y)); }
    template<typename T>
    Mat<T> cov(Mat<T> & X) { return Mat<T>(arma::cov(X.Mat)); }

    template<typename T>
    Col<T> cor(Col<T> & X, Col<T>& Y) { return Col<T>(arma::cor(X,Y)); }
    template<typename T>
    Col<T> cor(Col<T> & X) { return Col<T>(arma::cor(X)); }
    template<typename T>
    Mat<T> cor(Mat<T> & X, Mat<T>& Y) { return Mat<T>(arma::cor(X,Y)); }
    template<typename T>
    Mat<T> cor(Mat<T> & X) { return Mat<T>(arma::cor(X)); }


    template<typename T>
    Col<unsigned> hist(Col<T> & X) { return Col<unsigned>(arma::hist(X)); }    
    template<typename T>
    Col<unsigned> hist(Col<T> & X, size_t n_bins) { return Col<unsigned>(arma::cov(X,n_bins)); }
    template<typename T>
    Mat<unsigned> hist(Mat<T> & X) { return Mat<unsigned>(arma::hist(X.Mat)); }
    template<typename T>
    Mat<unsigned> hist(Mat<T> & X, size_t n_bins) { return Mat<unsigned>(arma::cov(X,n_bins)); }

    template<typename T>
    Col<unsigned> histc(Col<T> & X) { return Col<unsigned>(arma::hist(X)); }
    template<typename T>
    Col<unsigned> histc(Col<T> & X, size_t n_bins) { return Col<unsigned>(arma::cov(X,n_bins)); }
    template<typename T>
    Mat<unsigned> histc(Mat<T> & X) { return Mat<unsigned>(arma::hist(X.Mat)); }
    template<typename T>
    Mat<unsigned> histc(Mat<T> & X, size_t n_bins) { return Mat<unsigned>(arma::cov(X,n_bins)); }

    template<typename T>
    Col<T> quantile(Col<T> & V, Col<T> & P) { return Col<T>(arma::quantile(V,P));}
    template<typename T>
    Col<T> quantile(Mat<T> & V, Col<T> & P) { return Mat<T>(arma::quantile(V,P));}

    template<typename T>
    Mat<T> princomp(Mat<T> & x) { return Mat<T>(arma::princomp(x)); }

    template<typename T>
    void princomp(Mat<T> & MC, Mat<T> & X) { (arma::princomp(MC, X));}

    template<typename T>
    void princomp(Mat<T> & MC, Mat<T> & mat_score, Mat<T> & X) { (arma::princomp(MC,mat_score, X));}

    template<typename T>
    void princomp(Mat<T> & MC, Mat<T> & mat_score, Col<T> & latent, Mat<T> & X) { (arma::princomp(MC,mat_score, latent, X)); }

    template<typename T>
    void princomp(Mat<T> & MC, Mat<T> & mat_score, Col<T> & latent, Col<T> & tsqr, Mat<T> & X) { (arma::princomp(MC,mat_score, latent, tsqr, X)); }

    template<typename T>
    void princomp(Mat<std::complex<T>> & MC, Mat<std::complex<T>> & mat_score, Col<std::complex<T>> & latent, Col<std::complex<T>> & tsqr, Mat<std::complex<T>> & X) { (arma::princomp(MC,mat_score, latent, tsqr, X)); }
    }

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN MatrixView< float > arma_Mat_Sl_float_Sg____getitem____SWIG(arma::Mat< float > *self,size_t row){ return MatrixView<float>(self,row); }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Ss___SWIG(arma::Mat< float > *self){ return -*self; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Sa___SWIG_0(arma::Mat< float > *self,arma::Mat< float > const &b){ return *self + b; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Ss___SWIG_0(arma::Mat< float > *self,arma::Mat< float > const &b){ return *self - b; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Sm___SWIG_0(arma::Mat< float > *self,arma::Mat< float > const &b){ return *self * b; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Sd___SWIG_0(arma::Mat< float > *self,arma::Mat< float > const &b){ return *self / b; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Sa___SWIG_1(arma::Mat< float > *self,float const &b){ return *self + b; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Ss___SWIG_1(arma::Mat< float > *self,float const &b){ return *self - b; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Sm___SWIG_1(arma::Mat< float > *self,float const &b){ return *self * b; }
SWIGINTERN arma::Mat< float > arma_Mat_Sl_float_Sg__operator_Sd___SWIG_1(arma::Mat< float > *self,float const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_float_Sg____setitem____SWIG_0(arma::Mat< float > *self,size_t col,arma::Col< float > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_float_Sg____setitem____SWIG_1(arma::Mat< float > *self,size_t row,arma::Row< float > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_float_Sg__copy__SWIG(arma::Mat< float > *self,arma::Mat< float > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_float_Sg__rows__SWIG(arma::Mat< float > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_float_Sg__cols__SWIG(arma::Mat< float > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_float_Sg__set_row__SWIG(arma::Mat< float > *self,size_t r,arma::Row< float > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_float_Sg__set_col__SWIG(arma::Mat< float > *self,size_t c,arma::Col< float > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< float > arma_Mat_Sl_float_Sg__get_col__SWIG(arma::Mat< float > *self,size_t c){ return Col<float>(self->col(c)); }
SWIGINTERN arma::Row< float > arma_Mat_Sl_float_Sg__get_row__SWIG(arma::Mat< float > *self,size_t r){ return Row<float>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_float_Sg__println__SWIG_0(arma::Mat< float > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_float_Sg__addToEachRow__SWIG(arma::Mat< float > *self,arma::Row< float > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_float_Sg__addToEachCol__SWIG(arma::Mat< float > *self,arma::Col< float > const &v){ self->each_col() += v; }
SWIGINTERN float *arma_Mat_Sl_float_Sg__data__SWIG(arma::Mat< float > *self){ return self->memptr(); }
SWIGINTERN MatrixView< double > arma_Mat_Sl_double_Sg____getitem____SWIG(arma::Mat< double > *self,size_t row){ return MatrixView<double>(self,row); }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Ss___SWIG(arma::Mat< double > *self){ return -*self; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Sa___SWIG_0(arma::Mat< double > *self,arma::Mat< double > const &b){ return *self + b; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Ss___SWIG_0(arma::Mat< double > *self,arma::Mat< double > const &b){ return *self - b; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Sm___SWIG_0(arma::Mat< double > *self,arma::Mat< double > const &b){ return *self * b; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Sd___SWIG_0(arma::Mat< double > *self,arma::Mat< double > const &b){ return *self / b; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Sa___SWIG_1(arma::Mat< double > *self,double const &b){ return *self + b; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Ss___SWIG_1(arma::Mat< double > *self,double const &b){ return *self - b; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Sm___SWIG_1(arma::Mat< double > *self,double const &b){ return *self * b; }
SWIGINTERN arma::Mat< double > arma_Mat_Sl_double_Sg__operator_Sd___SWIG_1(arma::Mat< double > *self,double const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_double_Sg____setitem____SWIG_0(arma::Mat< double > *self,size_t col,arma::Col< double > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_double_Sg____setitem____SWIG_1(arma::Mat< double > *self,size_t row,arma::Row< double > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_double_Sg__copy__SWIG(arma::Mat< double > *self,arma::Mat< double > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_double_Sg__rows__SWIG(arma::Mat< double > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_double_Sg__cols__SWIG(arma::Mat< double > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_double_Sg__set_row__SWIG(arma::Mat< double > *self,size_t r,arma::Row< double > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_double_Sg__set_col__SWIG(arma::Mat< double > *self,size_t c,arma::Col< double > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< double > arma_Mat_Sl_double_Sg__get_col__SWIG(arma::Mat< double > *self,size_t c){ return Col<double>(self->col(c)); }
SWIGINTERN arma::Row< double > arma_Mat_Sl_double_Sg__get_row__SWIG(arma::Mat< double > *self,size_t r){ return Row<double>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_double_Sg__println__SWIG_0(arma::Mat< double > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_double_Sg__addToEachRow__SWIG(arma::Mat< double > *self,arma::Row< double > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_double_Sg__addToEachCol__SWIG(arma::Mat< double > *self,arma::Col< double > const &v){ self->each_col() += v; }
SWIGINTERN double *arma_Mat_Sl_double_Sg__data__SWIG(arma::Mat< double > *self){ return self->memptr(); }
SWIGINTERN MatrixView< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(arma::Mat< std::complex< float > > *self,size_t row){ return MatrixView<std::complex< float >>(self,row); }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG(arma::Mat< std::complex< float > > *self){ return -*self; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_0(arma::Mat< std::complex< float > > *self,arma::Mat< std::complex< float > > const &b){ return *self + b; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_0(arma::Mat< std::complex< float > > *self,arma::Mat< std::complex< float > > const &b){ return *self - b; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_0(arma::Mat< std::complex< float > > *self,arma::Mat< std::complex< float > > const &b){ return *self * b; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_0(arma::Mat< std::complex< float > > *self,arma::Mat< std::complex< float > > const &b){ return *self / b; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_1(arma::Mat< std::complex< float > > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_1(arma::Mat< std::complex< float > > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_1(arma::Mat< std::complex< float > > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN arma::Mat< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_1(arma::Mat< std::complex< float > > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_0(arma::Mat< std::complex< float > > *self,size_t col,arma::Col< std::complex< float > > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_1(arma::Mat< std::complex< float > > *self,size_t row,arma::Row< std::complex< float > > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__copy__SWIG(arma::Mat< std::complex< float > > *self,arma::Mat< std::complex< float > > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__rows__SWIG(arma::Mat< std::complex< float > > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__cols__SWIG(arma::Mat< std::complex< float > > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__set_row__SWIG(arma::Mat< std::complex< float > > *self,size_t r,arma::Row< std::complex< float > > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__set_col__SWIG(arma::Mat< std::complex< float > > *self,size_t c,arma::Col< std::complex< float > > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__get_col__SWIG(arma::Mat< std::complex< float > > *self,size_t c){ return Col<std::complex< float >>(self->col(c)); }
SWIGINTERN arma::Row< std::complex< float > > arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__get_row__SWIG(arma::Mat< std::complex< float > > *self,size_t r){ return Row<std::complex< float >>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arma::Mat< std::complex< float > > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__addToEachRow__SWIG(arma::Mat< std::complex< float > > *self,arma::Row< std::complex< float > > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__addToEachCol__SWIG(arma::Mat< std::complex< float > > *self,arma::Col< std::complex< float > > const &v){ self->each_col() += v; }
SWIGINTERN std::complex< float > *arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__data__SWIG(arma::Mat< std::complex< float > > *self){ return self->memptr(); }
SWIGINTERN MatrixView< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(arma::Mat< std::complex< double > > *self,size_t row){ return MatrixView<std::complex< double >>(self,row); }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG(arma::Mat< std::complex< double > > *self){ return -*self; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_0(arma::Mat< std::complex< double > > *self,arma::Mat< std::complex< double > > const &b){ return *self + b; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_0(arma::Mat< std::complex< double > > *self,arma::Mat< std::complex< double > > const &b){ return *self - b; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_0(arma::Mat< std::complex< double > > *self,arma::Mat< std::complex< double > > const &b){ return *self * b; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_0(arma::Mat< std::complex< double > > *self,arma::Mat< std::complex< double > > const &b){ return *self / b; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_1(arma::Mat< std::complex< double > > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_1(arma::Mat< std::complex< double > > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_1(arma::Mat< std::complex< double > > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN arma::Mat< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_1(arma::Mat< std::complex< double > > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_0(arma::Mat< std::complex< double > > *self,size_t col,arma::Col< std::complex< double > > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_1(arma::Mat< std::complex< double > > *self,size_t row,arma::Row< std::complex< double > > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__copy__SWIG(arma::Mat< std::complex< double > > *self,arma::Mat< std::complex< double > > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__rows__SWIG(arma::Mat< std::complex< double > > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__cols__SWIG(arma::Mat< std::complex< double > > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__set_row__SWIG(arma::Mat< std::complex< double > > *self,size_t r,arma::Row< std::complex< double > > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__set_col__SWIG(arma::Mat< std::complex< double > > *self,size_t c,arma::Col< std::complex< double > > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__get_col__SWIG(arma::Mat< std::complex< double > > *self,size_t c){ return Col<std::complex< double >>(self->col(c)); }
SWIGINTERN arma::Row< std::complex< double > > arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__get_row__SWIG(arma::Mat< std::complex< double > > *self,size_t r){ return Row<std::complex< double >>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arma::Mat< std::complex< double > > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__addToEachRow__SWIG(arma::Mat< std::complex< double > > *self,arma::Row< std::complex< double > > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__addToEachCol__SWIG(arma::Mat< std::complex< double > > *self,arma::Col< std::complex< double > > const &v){ self->each_col() += v; }
SWIGINTERN std::complex< double > *arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__data__SWIG(arma::Mat< std::complex< double > > *self){ return self->memptr(); }
SWIGINTERN MatrixView< int > arma_Mat_Sl_int_Sg____getitem____SWIG(arma::Mat< int > *self,size_t row){ return MatrixView<int>(self,row); }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Ss___SWIG(arma::Mat< int > *self){ return -*self; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Sa___SWIG_0(arma::Mat< int > *self,arma::Mat< int > const &b){ return *self + b; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Ss___SWIG_0(arma::Mat< int > *self,arma::Mat< int > const &b){ return *self - b; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Sm___SWIG_0(arma::Mat< int > *self,arma::Mat< int > const &b){ return *self * b; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Sd___SWIG_0(arma::Mat< int > *self,arma::Mat< int > const &b){ return *self / b; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Sa___SWIG_1(arma::Mat< int > *self,int const &b){ return *self + b; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Ss___SWIG_1(arma::Mat< int > *self,int const &b){ return *self - b; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Sm___SWIG_1(arma::Mat< int > *self,int const &b){ return *self * b; }
SWIGINTERN arma::Mat< int > arma_Mat_Sl_int_Sg__operator_Sd___SWIG_1(arma::Mat< int > *self,int const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_int_Sg____setitem____SWIG_0(arma::Mat< int > *self,size_t col,arma::Col< int > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_int_Sg____setitem____SWIG_1(arma::Mat< int > *self,size_t row,arma::Row< int > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_int_Sg__copy__SWIG(arma::Mat< int > *self,arma::Mat< int > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_int_Sg__rows__SWIG(arma::Mat< int > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_int_Sg__cols__SWIG(arma::Mat< int > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_int_Sg__set_row__SWIG(arma::Mat< int > *self,size_t r,arma::Row< int > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_int_Sg__set_col__SWIG(arma::Mat< int > *self,size_t c,arma::Col< int > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< int > arma_Mat_Sl_int_Sg__get_col__SWIG(arma::Mat< int > *self,size_t c){ return Col<int>(self->col(c)); }
SWIGINTERN arma::Row< int > arma_Mat_Sl_int_Sg__get_row__SWIG(arma::Mat< int > *self,size_t r){ return Row<int>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_int_Sg__println__SWIG_0(arma::Mat< int > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_int_Sg__addToEachRow__SWIG(arma::Mat< int > *self,arma::Row< int > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_int_Sg__addToEachCol__SWIG(arma::Mat< int > *self,arma::Col< int > const &v){ self->each_col() += v; }
SWIGINTERN int *arma_Mat_Sl_int_Sg__data__SWIG(arma::Mat< int > *self){ return self->memptr(); }
SWIGINTERN MatrixView< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg____getitem____SWIG(arma::Mat< unsigned int > *self,size_t row){ return MatrixView<unsigned int>(self,row); }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Ss___SWIG(arma::Mat< unsigned int > *self){ return -*self; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sa___SWIG_0(arma::Mat< unsigned int > *self,arma::Mat< unsigned int > const &b){ return *self + b; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Ss___SWIG_0(arma::Mat< unsigned int > *self,arma::Mat< unsigned int > const &b){ return *self - b; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sm___SWIG_0(arma::Mat< unsigned int > *self,arma::Mat< unsigned int > const &b){ return *self * b; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sd___SWIG_0(arma::Mat< unsigned int > *self,arma::Mat< unsigned int > const &b){ return *self / b; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sa___SWIG_1(arma::Mat< unsigned int > *self,unsigned int const &b){ return *self + b; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Ss___SWIG_1(arma::Mat< unsigned int > *self,unsigned int const &b){ return *self - b; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sm___SWIG_1(arma::Mat< unsigned int > *self,unsigned int const &b){ return *self * b; }
SWIGINTERN arma::Mat< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sd___SWIG_1(arma::Mat< unsigned int > *self,unsigned int const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(arma::Mat< unsigned int > *self,size_t col,arma::Col< unsigned int > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(arma::Mat< unsigned int > *self,size_t row,arma::Row< unsigned int > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg__copy__SWIG(arma::Mat< unsigned int > *self,arma::Mat< unsigned int > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_unsigned_SS_int_Sg__rows__SWIG(arma::Mat< unsigned int > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_unsigned_SS_int_Sg__cols__SWIG(arma::Mat< unsigned int > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg__set_row__SWIG(arma::Mat< unsigned int > *self,size_t r,arma::Row< unsigned int > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg__set_col__SWIG(arma::Mat< unsigned int > *self,size_t c,arma::Col< unsigned int > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__get_col__SWIG(arma::Mat< unsigned int > *self,size_t c){ return Col<unsigned int>(self->col(c)); }
SWIGINTERN arma::Row< unsigned int > arma_Mat_Sl_unsigned_SS_int_Sg__get_row__SWIG(arma::Mat< unsigned int > *self,size_t r){ return Row<unsigned int>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg__println__SWIG_0(arma::Mat< unsigned int > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg__addToEachRow__SWIG(arma::Mat< unsigned int > *self,arma::Row< unsigned int > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_int_Sg__addToEachCol__SWIG(arma::Mat< unsigned int > *self,arma::Col< unsigned int > const &v){ self->each_col() += v; }
SWIGINTERN unsigned int *arma_Mat_Sl_unsigned_SS_int_Sg__data__SWIG(arma::Mat< unsigned int > *self){ return self->memptr(); }
SWIGINTERN MatrixView< long > arma_Mat_Sl_long_Sg____getitem____SWIG(arma::Mat< long > *self,size_t row){ return MatrixView<long>(self,row); }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Ss___SWIG(arma::Mat< long > *self){ return -*self; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Sa___SWIG_0(arma::Mat< long > *self,arma::Mat< long > const &b){ return *self + b; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Ss___SWIG_0(arma::Mat< long > *self,arma::Mat< long > const &b){ return *self - b; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Sm___SWIG_0(arma::Mat< long > *self,arma::Mat< long > const &b){ return *self * b; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Sd___SWIG_0(arma::Mat< long > *self,arma::Mat< long > const &b){ return *self / b; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Sa___SWIG_1(arma::Mat< long > *self,long const &b){ return *self + b; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Ss___SWIG_1(arma::Mat< long > *self,long const &b){ return *self - b; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Sm___SWIG_1(arma::Mat< long > *self,long const &b){ return *self * b; }
SWIGINTERN arma::Mat< long > arma_Mat_Sl_long_Sg__operator_Sd___SWIG_1(arma::Mat< long > *self,long const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_long_Sg____setitem____SWIG_0(arma::Mat< long > *self,size_t col,arma::Col< long > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_long_Sg____setitem____SWIG_1(arma::Mat< long > *self,size_t row,arma::Row< long > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_long_Sg__copy__SWIG(arma::Mat< long > *self,arma::Mat< long > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_long_Sg__rows__SWIG(arma::Mat< long > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_long_Sg__cols__SWIG(arma::Mat< long > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_long_Sg__set_row__SWIG(arma::Mat< long > *self,size_t r,arma::Row< long > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_long_Sg__set_col__SWIG(arma::Mat< long > *self,size_t c,arma::Col< long > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< long > arma_Mat_Sl_long_Sg__get_col__SWIG(arma::Mat< long > *self,size_t c){ return Col<long>(self->col(c)); }
SWIGINTERN arma::Row< long > arma_Mat_Sl_long_Sg__get_row__SWIG(arma::Mat< long > *self,size_t r){ return Row<long>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_long_Sg__println__SWIG_0(arma::Mat< long > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_long_Sg__addToEachRow__SWIG(arma::Mat< long > *self,arma::Row< long > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_long_Sg__addToEachCol__SWIG(arma::Mat< long > *self,arma::Col< long > const &v){ self->each_col() += v; }
SWIGINTERN long *arma_Mat_Sl_long_Sg__data__SWIG(arma::Mat< long > *self){ return self->memptr(); }
SWIGINTERN MatrixView< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg____getitem____SWIG(arma::Mat< unsigned long > *self,size_t row){ return MatrixView<unsigned long>(self,row); }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Ss___SWIG(arma::Mat< unsigned long > *self){ return -*self; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sa___SWIG_0(arma::Mat< unsigned long > *self,arma::Mat< unsigned long > const &b){ return *self + b; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Ss___SWIG_0(arma::Mat< unsigned long > *self,arma::Mat< unsigned long > const &b){ return *self - b; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sm___SWIG_0(arma::Mat< unsigned long > *self,arma::Mat< unsigned long > const &b){ return *self * b; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sd___SWIG_0(arma::Mat< unsigned long > *self,arma::Mat< unsigned long > const &b){ return *self / b; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sa___SWIG_1(arma::Mat< unsigned long > *self,unsigned long const &b){ return *self + b; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Ss___SWIG_1(arma::Mat< unsigned long > *self,unsigned long const &b){ return *self - b; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sm___SWIG_1(arma::Mat< unsigned long > *self,unsigned long const &b){ return *self * b; }
SWIGINTERN arma::Mat< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sd___SWIG_1(arma::Mat< unsigned long > *self,unsigned long const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg____setitem____SWIG_0(arma::Mat< unsigned long > *self,size_t col,arma::Col< unsigned long > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg____setitem____SWIG_1(arma::Mat< unsigned long > *self,size_t row,arma::Row< unsigned long > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg__copy__SWIG(arma::Mat< unsigned long > *self,arma::Mat< unsigned long > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_unsigned_SS_long_Sg__rows__SWIG(arma::Mat< unsigned long > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_unsigned_SS_long_Sg__cols__SWIG(arma::Mat< unsigned long > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg__set_row__SWIG(arma::Mat< unsigned long > *self,size_t r,arma::Row< unsigned long > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg__set_col__SWIG(arma::Mat< unsigned long > *self,size_t c,arma::Col< unsigned long > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__get_col__SWIG(arma::Mat< unsigned long > *self,size_t c){ return Col<unsigned long>(self->col(c)); }
SWIGINTERN arma::Row< unsigned long > arma_Mat_Sl_unsigned_SS_long_Sg__get_row__SWIG(arma::Mat< unsigned long > *self,size_t r){ return Row<unsigned long>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg__println__SWIG_0(arma::Mat< unsigned long > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg__addToEachRow__SWIG(arma::Mat< unsigned long > *self,arma::Row< unsigned long > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_Sg__addToEachCol__SWIG(arma::Mat< unsigned long > *self,arma::Col< unsigned long > const &v){ self->each_col() += v; }
SWIGINTERN unsigned long *arma_Mat_Sl_unsigned_SS_long_Sg__data__SWIG(arma::Mat< unsigned long > *self){ return self->memptr(); }
SWIGINTERN MatrixView< long long > arma_Mat_Sl_long_SS_long_Sg____getitem____SWIG(arma::Mat< long long > *self,size_t row){ return MatrixView<long long>(self,row); }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Ss___SWIG(arma::Mat< long long > *self){ return -*self; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Sa___SWIG_0(arma::Mat< long long > *self,arma::Mat< long long > const &b){ return *self + b; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Ss___SWIG_0(arma::Mat< long long > *self,arma::Mat< long long > const &b){ return *self - b; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Sm___SWIG_0(arma::Mat< long long > *self,arma::Mat< long long > const &b){ return *self * b; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Sd___SWIG_0(arma::Mat< long long > *self,arma::Mat< long long > const &b){ return *self / b; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Sa___SWIG_1(arma::Mat< long long > *self,long long const &b){ return *self + b; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Ss___SWIG_1(arma::Mat< long long > *self,long long const &b){ return *self - b; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Sm___SWIG_1(arma::Mat< long long > *self,long long const &b){ return *self * b; }
SWIGINTERN arma::Mat< long long > arma_Mat_Sl_long_SS_long_Sg__operator_Sd___SWIG_1(arma::Mat< long long > *self,long long const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg____setitem____SWIG_0(arma::Mat< long long > *self,size_t col,arma::Col< long long > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg____setitem____SWIG_1(arma::Mat< long long > *self,size_t row,arma::Row< long long > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg__copy__SWIG(arma::Mat< long long > *self,arma::Mat< long long > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_long_SS_long_Sg__rows__SWIG(arma::Mat< long long > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_long_SS_long_Sg__cols__SWIG(arma::Mat< long long > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg__set_row__SWIG(arma::Mat< long long > *self,size_t r,arma::Row< long long > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg__set_col__SWIG(arma::Mat< long long > *self,size_t c,arma::Col< long long > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< long long > arma_Mat_Sl_long_SS_long_Sg__get_col__SWIG(arma::Mat< long long > *self,size_t c){ return Col<long long>(self->col(c)); }
SWIGINTERN arma::Row< long long > arma_Mat_Sl_long_SS_long_Sg__get_row__SWIG(arma::Mat< long long > *self,size_t r){ return Row<long long>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg__println__SWIG_0(arma::Mat< long long > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg__addToEachRow__SWIG(arma::Mat< long long > *self,arma::Row< long long > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_long_SS_long_Sg__addToEachCol__SWIG(arma::Mat< long long > *self,arma::Col< long long > const &v){ self->each_col() += v; }
SWIGINTERN long long *arma_Mat_Sl_long_SS_long_Sg__data__SWIG(arma::Mat< long long > *self){ return self->memptr(); }
SWIGINTERN MatrixView< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg____getitem____SWIG(arma::Mat< unsigned long long > *self,size_t row){ return MatrixView<unsigned long long>(self,row); }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Ss___SWIG(arma::Mat< unsigned long long > *self){ return -*self; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sa___SWIG_0(arma::Mat< unsigned long long > *self,arma::Mat< unsigned long long > const &b){ return *self + b; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Ss___SWIG_0(arma::Mat< unsigned long long > *self,arma::Mat< unsigned long long > const &b){ return *self - b; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sm___SWIG_0(arma::Mat< unsigned long long > *self,arma::Mat< unsigned long long > const &b){ return *self * b; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sd___SWIG_0(arma::Mat< unsigned long long > *self,arma::Mat< unsigned long long > const &b){ return *self / b; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sa___SWIG_1(arma::Mat< unsigned long long > *self,unsigned long long const &b){ return *self + b; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Ss___SWIG_1(arma::Mat< unsigned long long > *self,unsigned long long const &b){ return *self - b; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sm___SWIG_1(arma::Mat< unsigned long long > *self,unsigned long long const &b){ return *self * b; }
SWIGINTERN arma::Mat< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sd___SWIG_1(arma::Mat< unsigned long long > *self,unsigned long long const &b){ return *self / b; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg____setitem____SWIG_0(arma::Mat< unsigned long long > *self,size_t col,arma::Col< unsigned long long > const &val){ self->col(col) = val; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg____setitem____SWIG_1(arma::Mat< unsigned long long > *self,size_t row,arma::Row< unsigned long long > const &val){ self->row(row) = val; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__copy__SWIG(arma::Mat< unsigned long long > *self,arma::Mat< unsigned long long > const &m){ *self = m; }
SWIGINTERN size_t arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__rows__SWIG(arma::Mat< unsigned long long > const *self){ return self->n_rows; }
SWIGINTERN size_t arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__cols__SWIG(arma::Mat< unsigned long long > const *self){ return self->n_cols; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__set_row__SWIG(arma::Mat< unsigned long long > *self,size_t r,arma::Row< unsigned long long > const &v){
                self->row(r) = v;
            }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__set_col__SWIG(arma::Mat< unsigned long long > *self,size_t c,arma::Col< unsigned long long > const &v){
                self->col(c) = v;
            }
SWIGINTERN arma::Col< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__get_col__SWIG(arma::Mat< unsigned long long > *self,size_t c){ return Col<unsigned long long>(self->col(c)); }
SWIGINTERN arma::Row< unsigned long long > arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__get_row__SWIG(arma::Mat< unsigned long long > *self,size_t r){ return Row<unsigned long long>(self->row(r)); }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__println__SWIG_0(arma::Mat< unsigned long long > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__addToEachRow__SWIG(arma::Mat< unsigned long long > *self,arma::Row< unsigned long long > const &v){ self->each_row() += v; }
SWIGINTERN void arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__addToEachCol__SWIG(arma::Mat< unsigned long long > *self,arma::Col< unsigned long long > const &v){ self->each_col() += v; }
SWIGINTERN unsigned long long *arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__data__SWIG(arma::Mat< unsigned long long > *self){ return self->memptr(); }
SWIGINTERN float arma_Col_Sl_float_Sg____getitem____SWIG(arma::Col< float > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Col_Sl_float_Sg____setitem____SWIG(arma::Col< float > *self,size_t i,float v){ (*self)(i) = v; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Ss___SWIG(arma::Col< float > *self){ return -*self;}
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Sa___SWIG_0(arma::Col< float > *self,arma::Col< float > const &b){ return *self + b; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Ss___SWIG_0(arma::Col< float > *self,arma::Col< float > const &b){ return *self - b; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Sm___SWIG_0(arma::Col< float > *self,arma::Col< float > const &b){ return *self * b; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Sd___SWIG_0(arma::Col< float > *self,arma::Col< float > const &b){ return *self / b; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Sa___SWIG_1(arma::Col< float > *self,float const &b){ return *self + b; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Ss___SWIG_1(arma::Col< float > *self,float const &b){ return *self - b; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Sm___SWIG_1(arma::Col< float > *self,float const &b){ return *self * b; }
SWIGINTERN arma::Col< float > arma_Col_Sl_float_Sg__operator_Sd___SWIG_1(arma::Col< float > *self,float const &b){ return *self / b; }
SWIGINTERN void arma_Col_Sl_float_Sg__println__SWIG_0(arma::Col< float > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN float *arma_Col_Sl_float_Sg__data__SWIG(arma::Col< float > *self){ return self->memptr(); }
SWIGINTERN double arma_Col_Sl_double_Sg____getitem____SWIG(arma::Col< double > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Col_Sl_double_Sg____setitem____SWIG(arma::Col< double > *self,size_t i,double v){ (*self)(i) = v; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Ss___SWIG(arma::Col< double > *self){ return -*self;}
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Sa___SWIG_0(arma::Col< double > *self,arma::Col< double > const &b){ return *self + b; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Ss___SWIG_0(arma::Col< double > *self,arma::Col< double > const &b){ return *self - b; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Sm___SWIG_0(arma::Col< double > *self,arma::Col< double > const &b){ return *self * b; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Sd___SWIG_0(arma::Col< double > *self,arma::Col< double > const &b){ return *self / b; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Sa___SWIG_1(arma::Col< double > *self,double const &b){ return *self + b; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Ss___SWIG_1(arma::Col< double > *self,double const &b){ return *self - b; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Sm___SWIG_1(arma::Col< double > *self,double const &b){ return *self * b; }
SWIGINTERN arma::Col< double > arma_Col_Sl_double_Sg__operator_Sd___SWIG_1(arma::Col< double > *self,double const &b){ return *self / b; }
SWIGINTERN void arma_Col_Sl_double_Sg__println__SWIG_0(arma::Col< double > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN double *arma_Col_Sl_double_Sg__data__SWIG(arma::Col< double > *self){ return self->memptr(); }
SWIGINTERN std::complex< float > arma_Col_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(arma::Col< std::complex< float > > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Col_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG(arma::Col< std::complex< float > > *self,size_t i,std::complex< float > v){ (*self)(i) = v; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG(arma::Col< std::complex< float > > *self){ return -*self;}
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_0(arma::Col< std::complex< float > > *self,arma::Col< std::complex< float > > const &b){ return *self + b; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_0(arma::Col< std::complex< float > > *self,arma::Col< std::complex< float > > const &b){ return *self - b; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_0(arma::Col< std::complex< float > > *self,arma::Col< std::complex< float > > const &b){ return *self * b; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_0(arma::Col< std::complex< float > > *self,arma::Col< std::complex< float > > const &b){ return *self / b; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_1(arma::Col< std::complex< float > > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_1(arma::Col< std::complex< float > > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_1(arma::Col< std::complex< float > > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN arma::Col< std::complex< float > > arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_1(arma::Col< std::complex< float > > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN void arma_Col_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arma::Col< std::complex< float > > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN std::complex< float > *arma_Col_Sl_std_complex_Sl_float_Sg__Sg__data__SWIG(arma::Col< std::complex< float > > *self){ return self->memptr(); }
SWIGINTERN std::complex< double > arma_Col_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(arma::Col< std::complex< double > > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Col_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG(arma::Col< std::complex< double > > *self,size_t i,std::complex< double > v){ (*self)(i) = v; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG(arma::Col< std::complex< double > > *self){ return -*self;}
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_0(arma::Col< std::complex< double > > *self,arma::Col< std::complex< double > > const &b){ return *self + b; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_0(arma::Col< std::complex< double > > *self,arma::Col< std::complex< double > > const &b){ return *self - b; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_0(arma::Col< std::complex< double > > *self,arma::Col< std::complex< double > > const &b){ return *self * b; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_0(arma::Col< std::complex< double > > *self,arma::Col< std::complex< double > > const &b){ return *self / b; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_1(arma::Col< std::complex< double > > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_1(arma::Col< std::complex< double > > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_1(arma::Col< std::complex< double > > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN arma::Col< std::complex< double > > arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_1(arma::Col< std::complex< double > > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN void arma_Col_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arma::Col< std::complex< double > > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN std::complex< double > *arma_Col_Sl_std_complex_Sl_double_Sg__Sg__data__SWIG(arma::Col< std::complex< double > > *self){ return self->memptr(); }
SWIGINTERN float arma_Row_Sl_float_Sg____getitem____SWIG(arma::Row< float > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Row_Sl_float_Sg____setitem____SWIG(arma::Row< float > *self,size_t i,float v){ (*self)(i) = v; }
SWIGINTERN void arma_Row_Sl_float_Sg__println__SWIG_0(arma::Row< float > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN float *arma_Row_Sl_float_Sg__data__SWIG(arma::Row< float > *self){ return self->memptr(); }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Ss___SWIG(arma::Row< float > *self){ return -*self; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Sa___SWIG_0(arma::Row< float > *self,arma::Row< float > const &b){ return *self + b; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Ss___SWIG_0(arma::Row< float > *self,arma::Row< float > const &b){ return *self - b; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Sm___SWIG_0(arma::Row< float > *self,arma::Row< float > const &b){ return *self * b; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Sd___SWIG_0(arma::Row< float > *self,arma::Row< float > const &b){ return *self / b; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Sa___SWIG_1(arma::Row< float > *self,float const &b){ return *self + b; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Ss___SWIG_1(arma::Row< float > *self,float const &b){ return *self - b; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Sm___SWIG_1(arma::Row< float > *self,float const &b){ return *self * b; }
SWIGINTERN arma::Row< float > arma_Row_Sl_float_Sg__operator_Sd___SWIG_1(arma::Row< float > *self,float const &b){ return *self / b; }
SWIGINTERN double arma_Row_Sl_double_Sg____getitem____SWIG(arma::Row< double > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Row_Sl_double_Sg____setitem____SWIG(arma::Row< double > *self,size_t i,double v){ (*self)(i) = v; }
SWIGINTERN void arma_Row_Sl_double_Sg__println__SWIG_0(arma::Row< double > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN double *arma_Row_Sl_double_Sg__data__SWIG(arma::Row< double > *self){ return self->memptr(); }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Ss___SWIG(arma::Row< double > *self){ return -*self; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Sa___SWIG_0(arma::Row< double > *self,arma::Row< double > const &b){ return *self + b; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Ss___SWIG_0(arma::Row< double > *self,arma::Row< double > const &b){ return *self - b; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Sm___SWIG_0(arma::Row< double > *self,arma::Row< double > const &b){ return *self * b; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Sd___SWIG_0(arma::Row< double > *self,arma::Row< double > const &b){ return *self / b; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Sa___SWIG_1(arma::Row< double > *self,double const &b){ return *self + b; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Ss___SWIG_1(arma::Row< double > *self,double const &b){ return *self - b; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Sm___SWIG_1(arma::Row< double > *self,double const &b){ return *self * b; }
SWIGINTERN arma::Row< double > arma_Row_Sl_double_Sg__operator_Sd___SWIG_1(arma::Row< double > *self,double const &b){ return *self / b; }
SWIGINTERN std::complex< float > arma_Row_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(arma::Row< std::complex< float > > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Row_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG(arma::Row< std::complex< float > > *self,size_t i,std::complex< float > v){ (*self)(i) = v; }
SWIGINTERN void arma_Row_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arma::Row< std::complex< float > > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN std::complex< float > *arma_Row_Sl_std_complex_Sl_float_Sg__Sg__data__SWIG(arma::Row< std::complex< float > > *self){ return self->memptr(); }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG(arma::Row< std::complex< float > > *self){ return -*self; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_0(arma::Row< std::complex< float > > *self,arma::Row< std::complex< float > > const &b){ return *self + b; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_0(arma::Row< std::complex< float > > *self,arma::Row< std::complex< float > > const &b){ return *self - b; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_0(arma::Row< std::complex< float > > *self,arma::Row< std::complex< float > > const &b){ return *self * b; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_0(arma::Row< std::complex< float > > *self,arma::Row< std::complex< float > > const &b){ return *self / b; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_1(arma::Row< std::complex< float > > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_1(arma::Row< std::complex< float > > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_1(arma::Row< std::complex< float > > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN arma::Row< std::complex< float > > arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_1(arma::Row< std::complex< float > > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< double > arma_Row_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(arma::Row< std::complex< double > > *self,size_t i){ return (*self)(i); }
SWIGINTERN void arma_Row_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG(arma::Row< std::complex< double > > *self,size_t i,std::complex< double > v){ (*self)(i) = v; }
SWIGINTERN void arma_Row_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arma::Row< std::complex< double > > *self,std::string const &header=""){ self->print(header); }
SWIGINTERN std::complex< double > *arma_Row_Sl_std_complex_Sl_double_Sg__Sg__data__SWIG(arma::Row< std::complex< double > > *self){ return self->memptr(); }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG(arma::Row< std::complex< double > > *self){ return -*self; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_0(arma::Row< std::complex< double > > *self,arma::Row< std::complex< double > > const &b){ return *self + b; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_0(arma::Row< std::complex< double > > *self,arma::Row< std::complex< double > > const &b){ return *self - b; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_0(arma::Row< std::complex< double > > *self,arma::Row< std::complex< double > > const &b){ return *self * b; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_0(arma::Row< std::complex< double > > *self,arma::Row< std::complex< double > > const &b){ return *self / b; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_1(arma::Row< std::complex< double > > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_1(arma::Row< std::complex< double > > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_1(arma::Row< std::complex< double > > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN arma::Row< std::complex< double > > arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_1(arma::Row< std::complex< double > > *self,std::complex< double > const &b){ return *self / b; }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string::string",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::string *)new std::string((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n"
    "    std::string::string(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("std::string::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__getitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___getitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)std_string___getitem____SWIG(arg1,arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__setitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__setitem__",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::__setitem__",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___setitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___tostring(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__str__",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___tostring",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)std_string___str____SWIG(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = std_string_to_int32__SWIG_0(arg1,arg2);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  result = std_string_to_int32__SWIG_0(arg1);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int32(int)\n"
    "    std::string::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = std_string_to_int64__SWIG_0(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  result = std_string_to_int64__SWIG_0(arg1);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int64(int)\n"
    "    std::string::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_float(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  float result;
  
  SWIG_check_num_args("std::string::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_float",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_float",1,SWIGTYPE_p_std__string);
  }
  
  result = (float)std_string_to_float__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_double(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  double result;
  
  SWIG_check_num_args("std::string::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_double",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_double",1,SWIGTYPE_p_std__string);
  }
  
  result = (double)std_string_to_double__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_reverse(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::reverse",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_reverse",1,SWIGTYPE_p_std__string);
  }
  
  std_string_reverse__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_sort(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::sort",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_sort",1,SWIGTYPE_p_std__string);
  }
  
  std_string_sort__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::shuffle",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_shuffle",1,SWIGTYPE_p_std__string);
  }
  
  std_string_shuffle__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_getline(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::getline",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_getline",1,SWIGTYPE_p_std__string);
  }
  
  std_string_getline__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_fill(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::fill",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_fill",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string_fill__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = ((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::clear",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_clear",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::string::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::erase(size_t,size_t)\n"
    "    std::string::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_string_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::push_back",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_push_back",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::pop_back",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_pop_back",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_replace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  std::string result;
  
  SWIG_check_num_args("std::string::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::replace",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::replace",3,"size_t");
  if(!lua_isstring(L,4)) SWIG_fail_arg("std::string::replace",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_replace",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::resize",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_resize",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_substr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("std::string::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::substr",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_substr",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::find(std::string const &,size_t)\n"
    "    std::string::find(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->rfind((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::rfind(std::string const &,size_t)\n"
    "    std::string::rfind(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_compare(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("std::string::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::compare",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::compare",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_compare",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->compare((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    { "to_int32", _wrap_string_to_int32},
    { "to_int64", _wrap_string_to_int64},
    { "to_float", _wrap_string_to_float},
    { "to_double", _wrap_string_to_double},
    { "reverse", _wrap_string_reverse},
    { "sort", _wrap_string_sort},
    { "shuffle", _wrap_string_shuffle},
    { "getline", _wrap_string_getline},
    { "fill", _wrap_string_fill},
    { "data", _wrap_string_data},
    { "size", _wrap_string_size},
    { "empty", _wrap_string_empty},
    { "clear", _wrap_string_clear},
    { "erase", _wrap_string_erase},
    { "push_back", _wrap_string_push_back},
    { "pop_back", _wrap_string_pop_back},
    { "replace", _wrap_string_replace},
    { "resize", _wrap_string_resize},
    { "substr", _wrap_string_substr},
    { "find", _wrap_string_find},
    { "rfind", _wrap_string_rfind},
    { "compare", _wrap_string_compare},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_arma_rng_set_seed(lua_State* L) {
  int SWIG_arg = 0;
  arma::arma_rng::seed_type arg1 ;
  arma::arma_rng::seed_type *argp1 ;
  
  SWIG_check_num_args("arma::arma_rng::set_seed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::arma_rng::set_seed",1,"arma::arma_rng::seed_type const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_arma_rng_cxx11__seed_type,0))){
    SWIG_fail_ptr("arma_rng_set_seed",1,SWIGTYPE_p_arma_rng_cxx11__seed_type);
  }
  arg1 = *argp1;
  
  arma::arma_rng::set_seed(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_arma_rng_set_seed_random(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("arma::arma_rng::set_seed_random",0,0)
  arma::arma_rng::set_seed_random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_arma_rng(lua_State* L) {
  int SWIG_arg = 0;
  arma::arma_rng *result = 0 ;
  
  SWIG_check_num_args("arma::arma_rng::arma_rng",0,0)
  result = (arma::arma_rng *)new arma::arma_rng();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__arma_rng,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_arma_rng(void *obj) {
arma::arma_rng *arg1 = (arma::arma_rng *) obj;
delete arg1;
}
static int _proxy__wrap_new_arma_rng(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_arma_rng);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_arma_rng_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_arma_rng_methods[]= {
    {0,0}
};
static swig_lua_method swig_arma_rng_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_arma_rng_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_arma_rng_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_arma_rng_Sf_SwigStatic_methods[]= {
    { "set_seed", _wrap_arma_rng_set_seed},
    { "set_seed_random", _wrap_arma_rng_set_seed_random},
    {0,0}
};
static swig_lua_class* swig_arma_rng_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_arma_rng_Sf_SwigStatic = {
    "arma_rng",
    swig_arma_rng_Sf_SwigStatic_methods,
    swig_arma_rng_Sf_SwigStatic_attributes,
    swig_arma_rng_Sf_SwigStatic_constants,
    swig_arma_rng_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_arma_rng_bases[] = {0};
static const char *swig_arma_rng_base_names[] = {0};
static swig_lua_class _wrap_class_arma_rng = { "arma_rng", "arma_rng", &SWIGTYPE_p_arma__arma_rng,_proxy__wrap_new_arma_rng, swig_delete_arma_rng, swig_arma_rng_methods, swig_arma_rng_attributes, &swig_arma_rng_Sf_SwigStatic, swig_arma_rng_meta, swig_arma_rng_bases, swig_arma_rng_base_names };

static int _wrap_new_fcomplex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_fcomplex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_fcomplex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_fcomplex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_fcomplex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_fcomplex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fcomplex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fcomplex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fcomplex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fcomplex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fcomplex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fcomplex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fcomplex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fcomplex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fcomplex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fcomplex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fcomplex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fcomplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fcomplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fcomplex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_fcomplex_methods[]= {
    { "real", _wrap_fcomplex_real},
    { "imag", _wrap_fcomplex_imag},
    { "__add", _wrap_fcomplex___add},
    { "__sub", _wrap_fcomplex___sub},
    { "__div", _wrap_fcomplex___div},
    { "__mul", _wrap_fcomplex___mul},
    { "__pow", _wrap_fcomplex___pow},
    { "__eq", _wrap_fcomplex___eq},
    {0,0}
};
static swig_lua_method swig_fcomplex_meta[] = {
    { "__add", _wrap_fcomplex___add},
    { "__sub", _wrap_fcomplex___sub},
    { "__div", _wrap_fcomplex___div},
    { "__mul", _wrap_fcomplex___mul},
    { "__pow", _wrap_fcomplex___pow},
    { "__eq", _wrap_fcomplex___eq},
    {0,0}
};

static swig_lua_attribute swig_fcomplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fcomplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fcomplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fcomplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fcomplex_Sf_SwigStatic = {
    "fcomplex",
    swig_fcomplex_Sf_SwigStatic_methods,
    swig_fcomplex_Sf_SwigStatic_attributes,
    swig_fcomplex_Sf_SwigStatic_constants,
    swig_fcomplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fcomplex_bases[] = {0};
static const char *swig_fcomplex_base_names[] = {0};
static swig_lua_class _wrap_class_fcomplex = { "fcomplex", "fcomplex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_fcomplex, swig_delete_fcomplex, swig_fcomplex_methods, swig_fcomplex_attributes, &swig_fcomplex_Sf_SwigStatic, swig_fcomplex_meta, swig_fcomplex_bases, swig_fcomplex_base_names };

static int _wrap_new_xcomplex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_xcomplex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_xcomplex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_xcomplex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_xcomplex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_xcomplex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_xcomplex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_xcomplex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_xcomplex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_xcomplex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_xcomplex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_xcomplex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_xcomplex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_xcomplex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'xcomplex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_xcomplex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_xcomplex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_xcomplex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'xcomplex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_xcomplex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcomplex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_xcomplex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_xcomplex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'xcomplex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_xcomplex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("xcomplex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_xcomplex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_xcomplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_xcomplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_xcomplex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_xcomplex_methods[]= {
    { "real", _wrap_xcomplex_real},
    { "imag", _wrap_xcomplex_imag},
    { "__add", _wrap_xcomplex___add},
    { "__sub", _wrap_xcomplex___sub},
    { "__div", _wrap_xcomplex___div},
    { "__mul", _wrap_xcomplex___mul},
    { "__pow", _wrap_xcomplex___pow},
    { "__eq", _wrap_xcomplex___eq},
    {0,0}
};
static swig_lua_method swig_xcomplex_meta[] = {
    { "__add", _wrap_xcomplex___add},
    { "__sub", _wrap_xcomplex___sub},
    { "__div", _wrap_xcomplex___div},
    { "__mul", _wrap_xcomplex___mul},
    { "__pow", _wrap_xcomplex___pow},
    { "__eq", _wrap_xcomplex___eq},
    {0,0}
};

static swig_lua_attribute swig_xcomplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_xcomplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_xcomplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_xcomplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_xcomplex_Sf_SwigStatic = {
    "xcomplex",
    swig_xcomplex_Sf_SwigStatic_methods,
    swig_xcomplex_Sf_SwigStatic_attributes,
    swig_xcomplex_Sf_SwigStatic_constants,
    swig_xcomplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_xcomplex_bases[] = {0};
static const char *swig_xcomplex_base_names[] = {0};
static swig_lua_class _wrap_class_xcomplex = { "xcomplex", "xcomplex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_xcomplex, swig_delete_xcomplex, swig_xcomplex_methods, swig_xcomplex_attributes, &swig_xcomplex_Sf_SwigStatic, swig_xcomplex_meta, swig_xcomplex_bases, swig_xcomplex_base_names };

static int _wrap_new_fmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::Mat",0,0)
  result = (arma::Mat< float > *)new arma::Mat< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< float >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< float > *)new arma::Mat< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = 0 ;
  arma::Mat< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< float >::Mat",1,"arma::Mat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("new_fmat",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arma::Mat< float > *)new arma::Mat< float >((arma::Mat< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_fmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_fmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_fmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::Mat()\n"
    "    arma::Mat< float >::Mat(size_t,size_t)\n"
    "    arma::Mat< float >::Mat(arma::Mat< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator ()",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___call",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::at",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_at",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::zeros",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_zeros",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::zeros",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_zeros",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_fmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::zeros()\n"
    "    arma::Mat< float >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::ones",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_ones",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::ones",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_ones",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_fmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::ones()\n"
    "    arma::Mat< float >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::eye",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_eye",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::eye",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_eye",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_fmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::eye()\n"
    "    arma::Mat< float >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::randu",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_randu",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::randu",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_randu",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_fmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::randu()\n"
    "    arma::Mat< float >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::randn",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_randn",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::randn",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_randn",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_fmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::randn()\n"
    "    arma::Mat< float >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("arma::Mat< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::fill",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::fill",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_fill",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::replace",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::replace",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::replace",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_replace",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::clamp",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::clamp",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::clamp",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_clamp",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::set_size",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_set_size",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::reshape",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_reshape",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::resize",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_resize",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::copy_size",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::copy_size",2,"arma::Mat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_copy_size",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_copy_size",2,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->copy_size((arma::Mat< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::reset",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_reset",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::memptr",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_memptr",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (float *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::colptr",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_colptr",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::as_col",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_as_col",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::as_row",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_as_row",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::t",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_t",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("arma::Mat< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::min",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_min",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("arma::Mat< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::max",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_max",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< float >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::index_min",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_index_min",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< float >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::index_max",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_index_max",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::eval",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_eval",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_empty",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_empty",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_trimatu",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_trimatl",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_diagmat",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_square",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_square",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_symmetric",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_zero",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_zero",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::is_finite",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_is_finite",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::has_inf",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_has_inf",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< float >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::has_nan",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_has_nan",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< float >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::raw_print",1,"arma::Mat< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< float >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_raw_print",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::raw_print",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_raw_print",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::raw_print(std::string const &)\n"
    "    arma::Mat< float >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< float >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::brief_print",1,"arma::Mat< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< float >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_brief_print",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::brief_print",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_brief_print",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::brief_print(std::string const &)\n"
    "    arma::Mat< float >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::diag",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_diag",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::diag",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_diag",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::diag(size_t)\n"
    "    arma::Mat< float >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::insert_rows",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_insert_rows",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::insert_cols",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_insert_cols",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< float >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::shed_row",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_shed_row",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::shed_rows",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_shed_rows",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< float >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::shed_col",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_shed_col",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::shed_cols",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_shed_cols",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::swap_rows",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_swap_rows",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< float >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::swap_cols",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_swap_cols",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::swap",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::swap",2,"arma::Mat< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_swap",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_swap",2,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::submat",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< float >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< float >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< float >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_submat",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< float >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::save",1,"arma::Mat< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< float >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_save",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< float >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::load",1,"arma::Mat< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< float >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_load",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< float > > result;
  
  SWIG_check_num_args("arma::Mat< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::__getitem__",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___getitem",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_float_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< float > * resultptr = new MatrixView< float >((const MatrixView< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator -",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___unm",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = arma_Mat_Sl_float_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > *arg2 = 0 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator +",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::operator +",2,"arma::Mat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___add",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___add",2,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = arma_Mat_Sl_float_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< float > const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > *arg2 = 0 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator -",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::operator -",2,"arma::Mat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___sub",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___sub",2,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = arma_Mat_Sl_float_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< float > const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > *arg2 = 0 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator *",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::operator *",2,"arma::Mat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___mul",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___mul",2,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = arma_Mat_Sl_float_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< float > const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > *arg2 = 0 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator /",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::operator /",2,"arma::Mat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___div",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___div",2,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = arma_Mat_Sl_float_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< float > const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator +",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___add",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_float_Sg__operator_Sa___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::operator +(arma::Mat< float > const &)\n"
    "    arma::Mat< float >::operator +(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator -",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___sub",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_float_Sg__operator_Ss___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::operator -(arma::Mat< float > const &)\n"
    "    arma::Mat< float >::operator -(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator *",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___mul",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_float_Sg__operator_Sm___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::operator *(arma::Mat< float > const &)\n"
    "    arma::Mat< float >::operator *(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Mat< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::operator /",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___div",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_float_Sg__operator_Sd___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Mat< float > * resultptr = new arma::Mat< float >((const arma::Mat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::operator /(arma::Mat< float > const &)\n"
    "    arma::Mat< float >::operator /(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  arma::Col< float > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::__setitem__",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< float >::__setitem__",3,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___setitem",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fmat___setitem",3,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  arma_Mat_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  arma::Row< float > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::__setitem__",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< float >::__setitem__",3,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat___setitem",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("fmat___setitem",3,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  arma_Mat_Sl_float_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::__setitem__(size_t,arma::Col< float > const &)\n"
    "    arma::Mat< float >::__setitem__(size_t,arma::Row< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Mat< float > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::copy",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::copy",2,"arma::Mat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_copy",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_copy",2,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  arma_Mat_Sl_float_Sg__copy__SWIG(arg1,(arma::Mat< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::rows",1,"arma::Mat< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_rows",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = arma_Mat_Sl_float_Sg__rows__SWIG((arma::Mat< float > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::cols",1,"arma::Mat< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_cols",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = arma_Mat_Sl_float_Sg__cols__SWIG((arma::Mat< float > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  arma::Row< float > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::set_row",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< float >::set_row",3,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_set_row",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("fmat_set_row",3,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  arma_Mat_Sl_float_Sg__set_row__SWIG(arg1,arg2,(arma::Row< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  arma::Col< float > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::set_col",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< float >::set_col",3,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_set_col",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fmat_set_col",3,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  arma_Mat_Sl_float_Sg__set_col__SWIG(arg1,arg2,(arma::Col< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::get_col",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_get_col",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_float_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  size_t arg2 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Mat< float >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::get_row",1,"arma::Mat< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< float >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_get_row",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_float_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< float >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::println",1,"arma::Mat< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< float >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_println",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_float_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::println",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_println",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  arma_Mat_Sl_float_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< float >::println(std::string const &)\n"
    "    arma::Mat< float >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_fmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Row< float > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::addToEachRow",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::addToEachRow",2,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("fmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  arma_Mat_Sl_float_Sg__addToEachRow__SWIG(arg1,(arma::Row< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  arma::Col< float > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::addToEachCol",1,"arma::Mat< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< float >::addToEachCol",2,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  arma_Mat_Sl_float_Sg__addToEachCol__SWIG(arg1,(arma::Col< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< float > *arg1 = (arma::Mat< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< float >::data",1,"arma::Mat< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_float_t,0))){
    SWIG_fail_ptr("fmat_data",1,SWIGTYPE_p_arma__MatT_float_t);
  }
  
  result = (float *)arma_Mat_Sl_float_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fmat(void *obj) {
arma::Mat< float > *arg1 = (arma::Mat< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_fmat_methods[]= {
    { "__call", _wrap_fmat___call},
    { "at", _wrap_fmat_at},
    { "zeros", _wrap_fmat_zeros},
    { "ones", _wrap_fmat_ones},
    { "eye", _wrap_fmat_eye},
    { "randu", _wrap_fmat_randu},
    { "randn", _wrap_fmat_randn},
    { "fill", _wrap_fmat_fill},
    { "replace", _wrap_fmat_replace},
    { "clamp", _wrap_fmat_clamp},
    { "set_size", _wrap_fmat_set_size},
    { "reshape", _wrap_fmat_reshape},
    { "resize", _wrap_fmat_resize},
    { "copy_size", _wrap_fmat_copy_size},
    { "reset", _wrap_fmat_reset},
    { "memptr", _wrap_fmat_memptr},
    { "colptr", _wrap_fmat_colptr},
    { "as_col", _wrap_fmat_as_col},
    { "as_row", _wrap_fmat_as_row},
    { "t", _wrap_fmat_t},
    { "min", _wrap_fmat_min},
    { "max", _wrap_fmat_max},
    { "index_min", _wrap_fmat_index_min},
    { "index_max", _wrap_fmat_index_max},
    { "eval", _wrap_fmat_eval},
    { "is_empty", _wrap_fmat_is_empty},
    { "is_trimatu", _wrap_fmat_is_trimatu},
    { "is_trimatl", _wrap_fmat_is_trimatl},
    { "is_diagmat", _wrap_fmat_is_diagmat},
    { "is_square", _wrap_fmat_is_square},
    { "is_symmetric", _wrap_fmat_is_symmetric},
    { "is_zero", _wrap_fmat_is_zero},
    { "is_finite", _wrap_fmat_is_finite},
    { "has_inf", _wrap_fmat_has_inf},
    { "has_nan", _wrap_fmat_has_nan},
    { "raw_print", _wrap_fmat_raw_print},
    { "brief_print", _wrap_fmat_brief_print},
    { "diag", _wrap_fmat_diag},
    { "insert_rows", _wrap_fmat_insert_rows},
    { "insert_cols", _wrap_fmat_insert_cols},
    { "shed_row", _wrap_fmat_shed_row},
    { "shed_rows", _wrap_fmat_shed_rows},
    { "shed_col", _wrap_fmat_shed_col},
    { "shed_cols", _wrap_fmat_shed_cols},
    { "swap_rows", _wrap_fmat_swap_rows},
    { "swap_cols", _wrap_fmat_swap_cols},
    { "swap", _wrap_fmat_swap},
    { "submat", _wrap_fmat_submat},
    { "save", _wrap_fmat_save},
    { "load", _wrap_fmat_load},
    { "__getitem", _wrap_fmat___getitem},
    { "__unm", _wrap_fmat___unm},
    { "__add", _wrap_fmat___add},
    { "__sub", _wrap_fmat___sub},
    { "__mul", _wrap_fmat___mul},
    { "__div", _wrap_fmat___div},
    { "__setitem", _wrap_fmat___setitem},
    { "copy", _wrap_fmat_copy},
    { "rows", _wrap_fmat_rows},
    { "cols", _wrap_fmat_cols},
    { "set_row", _wrap_fmat_set_row},
    { "set_col", _wrap_fmat_set_col},
    { "get_col", _wrap_fmat_get_col},
    { "get_row", _wrap_fmat_get_row},
    { "println", _wrap_fmat_println},
    { "addToEachRow", _wrap_fmat_addToEachRow},
    { "addToEachCol", _wrap_fmat_addToEachCol},
    { "data", _wrap_fmat_data},
    {0,0}
};
static swig_lua_method swig_fmat_meta[] = {
    { "__call", _wrap_fmat___call},
    { "__getitem", _wrap_fmat___getitem},
    { "__unm", _wrap_fmat___unm},
    { "__add", _wrap_fmat___add},
    { "__sub", _wrap_fmat___sub},
    { "__mul", _wrap_fmat___mul},
    { "__div", _wrap_fmat___div},
    { "__setitem", _wrap_fmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_fmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fmat_Sf_SwigStatic = {
    "fmat",
    swig_fmat_Sf_SwigStatic_methods,
    swig_fmat_Sf_SwigStatic_attributes,
    swig_fmat_Sf_SwigStatic_constants,
    swig_fmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fmat_bases[] = {0};
static const char *swig_fmat_base_names[] = {0};
static swig_lua_class _wrap_class_fmat = { "fmat", "fmat", &SWIGTYPE_p_arma__MatT_float_t,_proxy__wrap_new_fmat, swig_delete_fmat, swig_fmat_methods, swig_fmat_attributes, &swig_fmat_Sf_SwigStatic, swig_fmat_meta, swig_fmat_bases, swig_fmat_base_names };

static int _wrap_new_dmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::Mat",0,0)
  result = (arma::Mat< double > *)new arma::Mat< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< double >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< double > *)new arma::Mat< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = 0 ;
  arma::Mat< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< double >::Mat",1,"arma::Mat< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("new_dmat",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arma::Mat< double > *)new arma::Mat< double >((arma::Mat< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_dmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_dmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_dmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_dmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::Mat()\n"
    "    arma::Mat< double >::Mat(size_t,size_t)\n"
    "    arma::Mat< double >::Mat(arma::Mat< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator ()",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___call",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::at",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_at",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::zeros",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_zeros",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::zeros",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_zeros",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::zeros()\n"
    "    arma::Mat< double >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::ones",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_ones",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::ones",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_ones",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::ones()\n"
    "    arma::Mat< double >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::eye",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_eye",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::eye",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_eye",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::eye()\n"
    "    arma::Mat< double >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::randu",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_randu",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::randu",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_randu",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::randu()\n"
    "    arma::Mat< double >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::randn",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_randn",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::randn",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_randn",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::randn()\n"
    "    arma::Mat< double >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("arma::Mat< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::fill",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::fill",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_fill",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::replace",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::replace",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::replace",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_replace",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::clamp",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::clamp",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::clamp",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_clamp",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::set_size",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_set_size",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::reshape",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_reshape",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::resize",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_resize",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::copy_size",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::copy_size",2,"arma::Mat< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_copy_size",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_copy_size",2,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->copy_size((arma::Mat< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::reset",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_reset",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::memptr",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_memptr",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (double *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::colptr",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_colptr",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::as_col",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_as_col",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::as_row",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_as_row",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::t",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_t",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("arma::Mat< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::min",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_min",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("arma::Mat< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::max",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_max",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< double >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::index_min",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_index_min",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< double >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::index_max",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_index_max",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::eval",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_eval",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_empty",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_empty",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_trimatu",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_trimatl",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_diagmat",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_square",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_square",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_symmetric",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_zero",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_zero",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::is_finite",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_is_finite",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::has_inf",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_has_inf",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< double >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::has_nan",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_has_nan",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< double >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::raw_print",1,"arma::Mat< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< double >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_raw_print",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::raw_print",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_raw_print",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::raw_print(std::string const &)\n"
    "    arma::Mat< double >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< double >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::brief_print",1,"arma::Mat< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< double >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_brief_print",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::brief_print",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_brief_print",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::brief_print(std::string const &)\n"
    "    arma::Mat< double >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::diag",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_diag",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::diag",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_diag",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::diag(size_t)\n"
    "    arma::Mat< double >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::insert_rows",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_insert_rows",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::insert_cols",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_insert_cols",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< double >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::shed_row",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_shed_row",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::shed_rows",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_shed_rows",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< double >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::shed_col",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_shed_col",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::shed_cols",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_shed_cols",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::swap_rows",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_swap_rows",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< double >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::swap_cols",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_swap_cols",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::swap",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::swap",2,"arma::Mat< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_swap",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_swap",2,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::submat",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< double >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< double >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< double >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_submat",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< double >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::save",1,"arma::Mat< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< double >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_save",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< double >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::load",1,"arma::Mat< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< double >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_load",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< double > > result;
  
  SWIG_check_num_args("arma::Mat< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::__getitem__",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___getitem",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_double_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< double > * resultptr = new MatrixView< double >((const MatrixView< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator -",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___unm",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = arma_Mat_Sl_double_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > *arg2 = 0 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator +",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::operator +",2,"arma::Mat< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___add",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___add",2,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = arma_Mat_Sl_double_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< double > const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > *arg2 = 0 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator -",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::operator -",2,"arma::Mat< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___sub",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___sub",2,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = arma_Mat_Sl_double_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< double > const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > *arg2 = 0 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator *",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::operator *",2,"arma::Mat< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___mul",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___mul",2,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = arma_Mat_Sl_double_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< double > const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > *arg2 = 0 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator /",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::operator /",2,"arma::Mat< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___div",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___div",2,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = arma_Mat_Sl_double_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< double > const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator +",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::operator +",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___add",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_double_Sg__operator_Sa___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::operator +(arma::Mat< double > const &)\n"
    "    arma::Mat< double >::operator +(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator -",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::operator -",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___sub",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_double_Sg__operator_Ss___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::operator -(arma::Mat< double > const &)\n"
    "    arma::Mat< double >::operator -(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator *",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::operator *",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___mul",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_double_Sg__operator_Sm___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::operator *(arma::Mat< double > const &)\n"
    "    arma::Mat< double >::operator *(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Mat< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::operator /",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::operator /",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___div",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_double_Sg__operator_Sd___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Mat< double > * resultptr = new arma::Mat< double >((const arma::Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::operator /(arma::Mat< double > const &)\n"
    "    arma::Mat< double >::operator /(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  arma::Col< double > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::__setitem__",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< double >::__setitem__",3,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___setitem",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dmat___setitem",3,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  arma_Mat_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  arma::Row< double > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::__setitem__",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< double >::__setitem__",3,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat___setitem",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("dmat___setitem",3,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  arma_Mat_Sl_double_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_dmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_dmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::__setitem__(size_t,arma::Col< double > const &)\n"
    "    arma::Mat< double >::__setitem__(size_t,arma::Row< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Mat< double > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::copy",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::copy",2,"arma::Mat< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_copy",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_copy",2,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  arma_Mat_Sl_double_Sg__copy__SWIG(arg1,(arma::Mat< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::rows",1,"arma::Mat< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_rows",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = arma_Mat_Sl_double_Sg__rows__SWIG((arma::Mat< double > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::cols",1,"arma::Mat< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_cols",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = arma_Mat_Sl_double_Sg__cols__SWIG((arma::Mat< double > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  arma::Row< double > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::set_row",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< double >::set_row",3,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_set_row",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("dmat_set_row",3,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  arma_Mat_Sl_double_Sg__set_row__SWIG(arg1,arg2,(arma::Row< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  arma::Col< double > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::set_col",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< double >::set_col",3,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_set_col",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dmat_set_col",3,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  arma_Mat_Sl_double_Sg__set_col__SWIG(arg1,arg2,(arma::Col< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::get_col",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_get_col",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_double_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  size_t arg2 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Mat< double >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::get_row",1,"arma::Mat< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< double >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_get_row",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_double_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< double >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::println",1,"arma::Mat< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< double >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_println",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_double_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::println",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_println",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  arma_Mat_Sl_double_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_dmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< double >::println(std::string const &)\n"
    "    arma::Mat< double >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_dmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Row< double > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::addToEachRow",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::addToEachRow",2,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("dmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  arma_Mat_Sl_double_Sg__addToEachRow__SWIG(arg1,(arma::Row< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  arma::Col< double > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::addToEachCol",1,"arma::Mat< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< double >::addToEachCol",2,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  arma_Mat_Sl_double_Sg__addToEachCol__SWIG(arg1,(arma::Col< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< double > *arg1 = (arma::Mat< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< double >::data",1,"arma::Mat< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_double_t,0))){
    SWIG_fail_ptr("dmat_data",1,SWIGTYPE_p_arma__MatT_double_t);
  }
  
  result = (double *)arma_Mat_Sl_double_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_dmat(void *obj) {
arma::Mat< double > *arg1 = (arma::Mat< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_dmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_dmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_dmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_dmat_methods[]= {
    { "__call", _wrap_dmat___call},
    { "at", _wrap_dmat_at},
    { "zeros", _wrap_dmat_zeros},
    { "ones", _wrap_dmat_ones},
    { "eye", _wrap_dmat_eye},
    { "randu", _wrap_dmat_randu},
    { "randn", _wrap_dmat_randn},
    { "fill", _wrap_dmat_fill},
    { "replace", _wrap_dmat_replace},
    { "clamp", _wrap_dmat_clamp},
    { "set_size", _wrap_dmat_set_size},
    { "reshape", _wrap_dmat_reshape},
    { "resize", _wrap_dmat_resize},
    { "copy_size", _wrap_dmat_copy_size},
    { "reset", _wrap_dmat_reset},
    { "memptr", _wrap_dmat_memptr},
    { "colptr", _wrap_dmat_colptr},
    { "as_col", _wrap_dmat_as_col},
    { "as_row", _wrap_dmat_as_row},
    { "t", _wrap_dmat_t},
    { "min", _wrap_dmat_min},
    { "max", _wrap_dmat_max},
    { "index_min", _wrap_dmat_index_min},
    { "index_max", _wrap_dmat_index_max},
    { "eval", _wrap_dmat_eval},
    { "is_empty", _wrap_dmat_is_empty},
    { "is_trimatu", _wrap_dmat_is_trimatu},
    { "is_trimatl", _wrap_dmat_is_trimatl},
    { "is_diagmat", _wrap_dmat_is_diagmat},
    { "is_square", _wrap_dmat_is_square},
    { "is_symmetric", _wrap_dmat_is_symmetric},
    { "is_zero", _wrap_dmat_is_zero},
    { "is_finite", _wrap_dmat_is_finite},
    { "has_inf", _wrap_dmat_has_inf},
    { "has_nan", _wrap_dmat_has_nan},
    { "raw_print", _wrap_dmat_raw_print},
    { "brief_print", _wrap_dmat_brief_print},
    { "diag", _wrap_dmat_diag},
    { "insert_rows", _wrap_dmat_insert_rows},
    { "insert_cols", _wrap_dmat_insert_cols},
    { "shed_row", _wrap_dmat_shed_row},
    { "shed_rows", _wrap_dmat_shed_rows},
    { "shed_col", _wrap_dmat_shed_col},
    { "shed_cols", _wrap_dmat_shed_cols},
    { "swap_rows", _wrap_dmat_swap_rows},
    { "swap_cols", _wrap_dmat_swap_cols},
    { "swap", _wrap_dmat_swap},
    { "submat", _wrap_dmat_submat},
    { "save", _wrap_dmat_save},
    { "load", _wrap_dmat_load},
    { "__getitem", _wrap_dmat___getitem},
    { "__unm", _wrap_dmat___unm},
    { "__add", _wrap_dmat___add},
    { "__sub", _wrap_dmat___sub},
    { "__mul", _wrap_dmat___mul},
    { "__div", _wrap_dmat___div},
    { "__setitem", _wrap_dmat___setitem},
    { "copy", _wrap_dmat_copy},
    { "rows", _wrap_dmat_rows},
    { "cols", _wrap_dmat_cols},
    { "set_row", _wrap_dmat_set_row},
    { "set_col", _wrap_dmat_set_col},
    { "get_col", _wrap_dmat_get_col},
    { "get_row", _wrap_dmat_get_row},
    { "println", _wrap_dmat_println},
    { "addToEachRow", _wrap_dmat_addToEachRow},
    { "addToEachCol", _wrap_dmat_addToEachCol},
    { "data", _wrap_dmat_data},
    {0,0}
};
static swig_lua_method swig_dmat_meta[] = {
    { "__call", _wrap_dmat___call},
    { "__getitem", _wrap_dmat___getitem},
    { "__unm", _wrap_dmat___unm},
    { "__add", _wrap_dmat___add},
    { "__sub", _wrap_dmat___sub},
    { "__mul", _wrap_dmat___mul},
    { "__div", _wrap_dmat___div},
    { "__setitem", _wrap_dmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_dmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_dmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_dmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_dmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_dmat_Sf_SwigStatic = {
    "dmat",
    swig_dmat_Sf_SwigStatic_methods,
    swig_dmat_Sf_SwigStatic_attributes,
    swig_dmat_Sf_SwigStatic_constants,
    swig_dmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_dmat_bases[] = {0};
static const char *swig_dmat_base_names[] = {0};
static swig_lua_class _wrap_class_dmat = { "dmat", "dmat", &SWIGTYPE_p_arma__MatT_double_t,_proxy__wrap_new_dmat, swig_delete_dmat, swig_dmat_methods, swig_dmat_attributes, &swig_dmat_Sf_SwigStatic, swig_dmat_meta, swig_dmat_bases, swig_dmat_base_names };

static int _wrap_new_cfmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::Mat",0,0)
  result = (arma::Mat< std::complex< float > > *)new arma::Mat< std::complex< float > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< std::complex< float > > *)new arma::Mat< std::complex< float > >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = 0 ;
  arma::Mat< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::Mat",1,"arma::Mat< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_cfmat",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arma::Mat< std::complex< float > > *)new arma::Mat< std::complex< float > >((arma::Mat< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_cfmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cfmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_cfmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cfmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::Mat()\n"
    "    arma::Mat< std::complex< float > >::Mat(size_t,size_t)\n"
    "    arma::Mat< std::complex< float > >::Mat(arma::Mat< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator ()",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___call",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (std::complex< float > *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::at",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_at",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (std::complex< float > *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::zeros",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_zeros",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::zeros",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_zeros",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cfmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::zeros()\n"
    "    arma::Mat< std::complex< float > >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::ones",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_ones",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::ones",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_ones",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cfmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::ones()\n"
    "    arma::Mat< std::complex< float > >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::eye",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_eye",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::eye",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_eye",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cfmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::eye()\n"
    "    arma::Mat< std::complex< float > >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randu",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_randu",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randu",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_randu",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cfmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::randu()\n"
    "    arma::Mat< std::complex< float > >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randn",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_randn",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randn",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_randn",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cfmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::randn()\n"
    "    arma::Mat< std::complex< float > >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::fill",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::fill",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_fill",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp2 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::replace",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::replace",2,"std::complex< float > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::replace",3,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_replace",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat_replace",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat_replace",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp2 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::clamp",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::clamp",2,"std::complex< float > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::clamp",3,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_clamp",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat_clamp",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat_clamp",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_size",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_set_size",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::reshape",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_reshape",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::resize",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_resize",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::copy_size",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::copy_size",2,"arma::Mat< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_copy_size",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_copy_size",2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->copy_size((arma::Mat< std::complex< float > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::reset",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_reset",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::memptr",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_memptr",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::colptr",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_colptr",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::as_col",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_as_col",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::as_row",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_as_row",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::t",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_t",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::min",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_min",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->min();
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::max",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_max",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->max();
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::index_min",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_index_min",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::index_max",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_index_max",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::eval",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_eval",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_empty",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_empty",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_trimatu",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_trimatl",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_diagmat",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_square",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_square",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_symmetric",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_zero",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_zero",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::is_finite",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_is_finite",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::has_inf",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_has_inf",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::has_nan",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_has_nan",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::raw_print",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_raw_print",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::raw_print",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_raw_print",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::raw_print(std::string const &)\n"
    "    arma::Mat< std::complex< float > >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::brief_print",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_brief_print",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::brief_print",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_brief_print",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::brief_print(std::string const &)\n"
    "    arma::Mat< std::complex< float > >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::diag",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_diag",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::diag",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_diag",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::diag(size_t)\n"
    "    arma::Mat< std::complex< float > >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::insert_rows",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_insert_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::insert_cols",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_insert_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_row",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_shed_row",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_rows",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_shed_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_col",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_shed_col",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_cols",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_shed_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap_rows",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_swap_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap_cols",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_swap_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::swap",2,"arma::Mat< std::complex< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_swap",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_swap",2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::submat",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< std::complex< float > >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< std::complex< float > >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_submat",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::save",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_save",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::load",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_load",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< std::complex< float > > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__getitem__",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___getitem",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< std::complex< float > > * resultptr = new MatrixView< std::complex< float > >((const MatrixView< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator -",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___unm",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator +",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator +",2,"arma::Mat< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___add",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___add",2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< std::complex< float > > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator -",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator -",2,"arma::Mat< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___sub",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___sub",2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< std::complex< float > > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator *",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator *",2,"arma::Mat< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___mul",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___mul",2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< std::complex< float > > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator /",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator /",2,"arma::Mat< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___div",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___div",2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< std::complex< float > > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator +",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator +",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___add",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::operator +(arma::Mat< std::complex< float > > const &)\n"
    "    arma::Mat< std::complex< float > >::operator +(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator -",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator -",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___sub",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::operator -(arma::Mat< std::complex< float > > const &)\n"
    "    arma::Mat< std::complex< float > >::operator -(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator *",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator *",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___mul",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::operator *(arma::Mat< std::complex< float > > const &)\n"
    "    arma::Mat< std::complex< float > >::operator *(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Mat< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator /",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::operator /",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___div",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfmat___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Mat< std::complex< float > > * resultptr = new arma::Mat< std::complex< float > >((const arma::Mat< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::operator /(arma::Mat< std::complex< float > > const &)\n"
    "    arma::Mat< std::complex< float > >::operator /(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< float > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__setitem__",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__setitem__",3,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___setitem",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___setitem",3,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< std::complex< float > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  arma::Row< std::complex< float > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__setitem__",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::__setitem__",3,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___setitem",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat___setitem",3,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< std::complex< float > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_cfmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_cfmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::__setitem__(size_t,arma::Col< std::complex< float > > const &)\n"
    "    arma::Mat< std::complex< float > >::__setitem__(size_t,arma::Row< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Mat< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::copy",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::copy",2,"arma::Mat< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_copy",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_copy",2,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__copy__SWIG(arg1,(arma::Mat< std::complex< float > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::rows",1,"arma::Mat< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__rows__SWIG((arma::Mat< std::complex< float > > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::cols",1,"arma::Mat< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__cols__SWIG((arma::Mat< std::complex< float > > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  arma::Row< std::complex< float > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_row",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_row",3,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_set_row",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_set_row",3,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__set_row__SWIG(arg1,arg2,(arma::Row< std::complex< float > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< float > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_col",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< float > >::set_col",3,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_set_col",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_set_col",3,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__set_col__SWIG(arg1,arg2,(arma::Col< std::complex< float > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::get_col",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_get_col",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  size_t arg2 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::get_row",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_get_row",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::println",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_println",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::println",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_println",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< float > >::println(std::string const &)\n"
    "    arma::Mat< std::complex< float > >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_cfmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::addToEachRow",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::addToEachRow",2,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__addToEachRow__SWIG(arg1,(arma::Row< std::complex< float > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::addToEachCol",1,"arma::Mat< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< float > >::addToEachCol",2,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__addToEachCol__SWIG(arg1,(arma::Col< std::complex< float > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< float > >::data",1,"arma::Mat< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfmat_data",1,SWIGTYPE_p_arma__MatT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)arma_Mat_Sl_std_complex_Sl_float_Sg__Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cfmat(void *obj) {
arma::Mat< std::complex< float > > *arg1 = (arma::Mat< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cfmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cfmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cfmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cfmat_methods[]= {
    { "__call", _wrap_cfmat___call},
    { "at", _wrap_cfmat_at},
    { "zeros", _wrap_cfmat_zeros},
    { "ones", _wrap_cfmat_ones},
    { "eye", _wrap_cfmat_eye},
    { "randu", _wrap_cfmat_randu},
    { "randn", _wrap_cfmat_randn},
    { "fill", _wrap_cfmat_fill},
    { "replace", _wrap_cfmat_replace},
    { "clamp", _wrap_cfmat_clamp},
    { "set_size", _wrap_cfmat_set_size},
    { "reshape", _wrap_cfmat_reshape},
    { "resize", _wrap_cfmat_resize},
    { "copy_size", _wrap_cfmat_copy_size},
    { "reset", _wrap_cfmat_reset},
    { "memptr", _wrap_cfmat_memptr},
    { "colptr", _wrap_cfmat_colptr},
    { "as_col", _wrap_cfmat_as_col},
    { "as_row", _wrap_cfmat_as_row},
    { "t", _wrap_cfmat_t},
    { "min", _wrap_cfmat_min},
    { "max", _wrap_cfmat_max},
    { "index_min", _wrap_cfmat_index_min},
    { "index_max", _wrap_cfmat_index_max},
    { "eval", _wrap_cfmat_eval},
    { "is_empty", _wrap_cfmat_is_empty},
    { "is_trimatu", _wrap_cfmat_is_trimatu},
    { "is_trimatl", _wrap_cfmat_is_trimatl},
    { "is_diagmat", _wrap_cfmat_is_diagmat},
    { "is_square", _wrap_cfmat_is_square},
    { "is_symmetric", _wrap_cfmat_is_symmetric},
    { "is_zero", _wrap_cfmat_is_zero},
    { "is_finite", _wrap_cfmat_is_finite},
    { "has_inf", _wrap_cfmat_has_inf},
    { "has_nan", _wrap_cfmat_has_nan},
    { "raw_print", _wrap_cfmat_raw_print},
    { "brief_print", _wrap_cfmat_brief_print},
    { "diag", _wrap_cfmat_diag},
    { "insert_rows", _wrap_cfmat_insert_rows},
    { "insert_cols", _wrap_cfmat_insert_cols},
    { "shed_row", _wrap_cfmat_shed_row},
    { "shed_rows", _wrap_cfmat_shed_rows},
    { "shed_col", _wrap_cfmat_shed_col},
    { "shed_cols", _wrap_cfmat_shed_cols},
    { "swap_rows", _wrap_cfmat_swap_rows},
    { "swap_cols", _wrap_cfmat_swap_cols},
    { "swap", _wrap_cfmat_swap},
    { "submat", _wrap_cfmat_submat},
    { "save", _wrap_cfmat_save},
    { "load", _wrap_cfmat_load},
    { "__getitem", _wrap_cfmat___getitem},
    { "__unm", _wrap_cfmat___unm},
    { "__add", _wrap_cfmat___add},
    { "__sub", _wrap_cfmat___sub},
    { "__mul", _wrap_cfmat___mul},
    { "__div", _wrap_cfmat___div},
    { "__setitem", _wrap_cfmat___setitem},
    { "copy", _wrap_cfmat_copy},
    { "rows", _wrap_cfmat_rows},
    { "cols", _wrap_cfmat_cols},
    { "set_row", _wrap_cfmat_set_row},
    { "set_col", _wrap_cfmat_set_col},
    { "get_col", _wrap_cfmat_get_col},
    { "get_row", _wrap_cfmat_get_row},
    { "println", _wrap_cfmat_println},
    { "addToEachRow", _wrap_cfmat_addToEachRow},
    { "addToEachCol", _wrap_cfmat_addToEachCol},
    { "data", _wrap_cfmat_data},
    {0,0}
};
static swig_lua_method swig_cfmat_meta[] = {
    { "__call", _wrap_cfmat___call},
    { "__getitem", _wrap_cfmat___getitem},
    { "__unm", _wrap_cfmat___unm},
    { "__add", _wrap_cfmat___add},
    { "__sub", _wrap_cfmat___sub},
    { "__mul", _wrap_cfmat___mul},
    { "__div", _wrap_cfmat___div},
    { "__setitem", _wrap_cfmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_cfmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cfmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cfmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cfmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cfmat_Sf_SwigStatic = {
    "cfmat",
    swig_cfmat_Sf_SwigStatic_methods,
    swig_cfmat_Sf_SwigStatic_attributes,
    swig_cfmat_Sf_SwigStatic_constants,
    swig_cfmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cfmat_bases[] = {0};
static const char *swig_cfmat_base_names[] = {0};
static swig_lua_class _wrap_class_cfmat = { "cfmat", "cfmat", &SWIGTYPE_p_arma__MatT_std__complexT_float_t_t,_proxy__wrap_new_cfmat, swig_delete_cfmat, swig_cfmat_methods, swig_cfmat_attributes, &swig_cfmat_Sf_SwigStatic, swig_cfmat_meta, swig_cfmat_bases, swig_cfmat_base_names };

static int _wrap_new_cxmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::Mat",0,0)
  result = (arma::Mat< std::complex< double > > *)new arma::Mat< std::complex< double > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< std::complex< double > > *)new arma::Mat< std::complex< double > >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = 0 ;
  arma::Mat< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::Mat",1,"arma::Mat< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_cxmat",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arma::Mat< std::complex< double > > *)new arma::Mat< std::complex< double > >((arma::Mat< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_cxmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cxmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_cxmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cxmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::Mat()\n"
    "    arma::Mat< std::complex< double > >::Mat(size_t,size_t)\n"
    "    arma::Mat< std::complex< double > >::Mat(arma::Mat< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator ()",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___call",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (std::complex< double > *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::at",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_at",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (std::complex< double > *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::zeros",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_zeros",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::zeros",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_zeros",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cxmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::zeros()\n"
    "    arma::Mat< std::complex< double > >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::ones",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_ones",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::ones",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_ones",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cxmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::ones()\n"
    "    arma::Mat< std::complex< double > >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::eye",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_eye",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::eye",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_eye",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cxmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::eye()\n"
    "    arma::Mat< std::complex< double > >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randu",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_randu",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randu",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_randu",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cxmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::randu()\n"
    "    arma::Mat< std::complex< double > >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randn",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_randn",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randn",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_randn",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cxmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::randn()\n"
    "    arma::Mat< std::complex< double > >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::fill",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::fill",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_fill",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp2 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::replace",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::replace",2,"std::complex< double > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::replace",3,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_replace",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat_replace",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat_replace",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp2 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::clamp",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::clamp",2,"std::complex< double > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::clamp",3,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_clamp",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat_clamp",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat_clamp",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_size",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_set_size",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::reshape",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_reshape",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::resize",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_resize",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::copy_size",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::copy_size",2,"arma::Mat< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_copy_size",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_copy_size",2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->copy_size((arma::Mat< std::complex< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::reset",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_reset",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::memptr",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_memptr",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::colptr",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_colptr",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::as_col",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_as_col",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::as_row",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_as_row",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::t",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_t",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::min",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_min",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->min();
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::max",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_max",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->max();
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::index_min",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_index_min",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::index_max",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_index_max",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::eval",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_eval",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_empty",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_empty",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_trimatu",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_trimatl",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_diagmat",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_square",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_square",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_symmetric",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_zero",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_zero",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::is_finite",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_is_finite",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::has_inf",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_has_inf",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::has_nan",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_has_nan",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::raw_print",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_raw_print",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::raw_print",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_raw_print",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::raw_print(std::string const &)\n"
    "    arma::Mat< std::complex< double > >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::brief_print",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_brief_print",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::brief_print",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_brief_print",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::brief_print(std::string const &)\n"
    "    arma::Mat< std::complex< double > >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::diag",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_diag",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::diag",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_diag",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::diag(size_t)\n"
    "    arma::Mat< std::complex< double > >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::insert_rows",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_insert_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::insert_cols",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_insert_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_row",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_shed_row",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_rows",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_shed_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_col",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_shed_col",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_cols",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_shed_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap_rows",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_swap_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap_cols",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_swap_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::swap",2,"arma::Mat< std::complex< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_swap",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_swap",2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::submat",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< std::complex< double > >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< std::complex< double > >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_submat",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::save",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_save",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::load",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_load",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< std::complex< double > > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__getitem__",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___getitem",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< std::complex< double > > * resultptr = new MatrixView< std::complex< double > >((const MatrixView< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator -",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___unm",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator +",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator +",2,"arma::Mat< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___add",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___add",2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< std::complex< double > > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator -",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator -",2,"arma::Mat< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___sub",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___sub",2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< std::complex< double > > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator *",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator *",2,"arma::Mat< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___mul",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___mul",2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< std::complex< double > > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator /",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator /",2,"arma::Mat< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___div",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___div",2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< std::complex< double > > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator +",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator +",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___add",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::operator +(arma::Mat< std::complex< double > > const &)\n"
    "    arma::Mat< std::complex< double > >::operator +(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator -",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator -",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___sub",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::operator -(arma::Mat< std::complex< double > > const &)\n"
    "    arma::Mat< std::complex< double > >::operator -(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator *",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator *",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___mul",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::operator *(arma::Mat< std::complex< double > > const &)\n"
    "    arma::Mat< std::complex< double > >::operator *(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Mat< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator /",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::operator /",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___div",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxmat___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Mat< std::complex< double > > * resultptr = new arma::Mat< std::complex< double > >((const arma::Mat< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::operator /(arma::Mat< std::complex< double > > const &)\n"
    "    arma::Mat< std::complex< double > >::operator /(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< double > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__setitem__",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__setitem__",3,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___setitem",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___setitem",3,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< std::complex< double > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  arma::Row< std::complex< double > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__setitem__",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::__setitem__",3,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___setitem",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat___setitem",3,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< std::complex< double > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_cxmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_cxmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::__setitem__(size_t,arma::Col< std::complex< double > > const &)\n"
    "    arma::Mat< std::complex< double > >::__setitem__(size_t,arma::Row< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Mat< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::copy",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::copy",2,"arma::Mat< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_copy",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_copy",2,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__copy__SWIG(arg1,(arma::Mat< std::complex< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::rows",1,"arma::Mat< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_rows",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__rows__SWIG((arma::Mat< std::complex< double > > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::cols",1,"arma::Mat< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_cols",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__cols__SWIG((arma::Mat< std::complex< double > > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  arma::Row< std::complex< double > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_row",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_row",3,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_set_row",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_set_row",3,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__set_row__SWIG(arg1,arg2,(arma::Row< std::complex< double > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< double > > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_col",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< std::complex< double > >::set_col",3,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_set_col",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_set_col",3,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__set_col__SWIG(arg1,arg2,(arma::Col< std::complex< double > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::get_col",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_get_col",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  size_t arg2 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::get_row",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_get_row",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::println",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_println",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::println",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_println",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< std::complex< double > >::println(std::string const &)\n"
    "    arma::Mat< std::complex< double > >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_cxmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::addToEachRow",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::addToEachRow",2,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__addToEachRow__SWIG(arg1,(arma::Row< std::complex< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::addToEachCol",1,"arma::Mat< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< std::complex< double > >::addToEachCol",2,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__addToEachCol__SWIG(arg1,(arma::Col< std::complex< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< std::complex< double > >::data",1,"arma::Mat< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxmat_data",1,SWIGTYPE_p_arma__MatT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)arma_Mat_Sl_std_complex_Sl_double_Sg__Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cxmat(void *obj) {
arma::Mat< std::complex< double > > *arg1 = (arma::Mat< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cxmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cxmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cxmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cxmat_methods[]= {
    { "__call", _wrap_cxmat___call},
    { "at", _wrap_cxmat_at},
    { "zeros", _wrap_cxmat_zeros},
    { "ones", _wrap_cxmat_ones},
    { "eye", _wrap_cxmat_eye},
    { "randu", _wrap_cxmat_randu},
    { "randn", _wrap_cxmat_randn},
    { "fill", _wrap_cxmat_fill},
    { "replace", _wrap_cxmat_replace},
    { "clamp", _wrap_cxmat_clamp},
    { "set_size", _wrap_cxmat_set_size},
    { "reshape", _wrap_cxmat_reshape},
    { "resize", _wrap_cxmat_resize},
    { "copy_size", _wrap_cxmat_copy_size},
    { "reset", _wrap_cxmat_reset},
    { "memptr", _wrap_cxmat_memptr},
    { "colptr", _wrap_cxmat_colptr},
    { "as_col", _wrap_cxmat_as_col},
    { "as_row", _wrap_cxmat_as_row},
    { "t", _wrap_cxmat_t},
    { "min", _wrap_cxmat_min},
    { "max", _wrap_cxmat_max},
    { "index_min", _wrap_cxmat_index_min},
    { "index_max", _wrap_cxmat_index_max},
    { "eval", _wrap_cxmat_eval},
    { "is_empty", _wrap_cxmat_is_empty},
    { "is_trimatu", _wrap_cxmat_is_trimatu},
    { "is_trimatl", _wrap_cxmat_is_trimatl},
    { "is_diagmat", _wrap_cxmat_is_diagmat},
    { "is_square", _wrap_cxmat_is_square},
    { "is_symmetric", _wrap_cxmat_is_symmetric},
    { "is_zero", _wrap_cxmat_is_zero},
    { "is_finite", _wrap_cxmat_is_finite},
    { "has_inf", _wrap_cxmat_has_inf},
    { "has_nan", _wrap_cxmat_has_nan},
    { "raw_print", _wrap_cxmat_raw_print},
    { "brief_print", _wrap_cxmat_brief_print},
    { "diag", _wrap_cxmat_diag},
    { "insert_rows", _wrap_cxmat_insert_rows},
    { "insert_cols", _wrap_cxmat_insert_cols},
    { "shed_row", _wrap_cxmat_shed_row},
    { "shed_rows", _wrap_cxmat_shed_rows},
    { "shed_col", _wrap_cxmat_shed_col},
    { "shed_cols", _wrap_cxmat_shed_cols},
    { "swap_rows", _wrap_cxmat_swap_rows},
    { "swap_cols", _wrap_cxmat_swap_cols},
    { "swap", _wrap_cxmat_swap},
    { "submat", _wrap_cxmat_submat},
    { "save", _wrap_cxmat_save},
    { "load", _wrap_cxmat_load},
    { "__getitem", _wrap_cxmat___getitem},
    { "__unm", _wrap_cxmat___unm},
    { "__add", _wrap_cxmat___add},
    { "__sub", _wrap_cxmat___sub},
    { "__mul", _wrap_cxmat___mul},
    { "__div", _wrap_cxmat___div},
    { "__setitem", _wrap_cxmat___setitem},
    { "copy", _wrap_cxmat_copy},
    { "rows", _wrap_cxmat_rows},
    { "cols", _wrap_cxmat_cols},
    { "set_row", _wrap_cxmat_set_row},
    { "set_col", _wrap_cxmat_set_col},
    { "get_col", _wrap_cxmat_get_col},
    { "get_row", _wrap_cxmat_get_row},
    { "println", _wrap_cxmat_println},
    { "addToEachRow", _wrap_cxmat_addToEachRow},
    { "addToEachCol", _wrap_cxmat_addToEachCol},
    { "data", _wrap_cxmat_data},
    {0,0}
};
static swig_lua_method swig_cxmat_meta[] = {
    { "__call", _wrap_cxmat___call},
    { "__getitem", _wrap_cxmat___getitem},
    { "__unm", _wrap_cxmat___unm},
    { "__add", _wrap_cxmat___add},
    { "__sub", _wrap_cxmat___sub},
    { "__mul", _wrap_cxmat___mul},
    { "__div", _wrap_cxmat___div},
    { "__setitem", _wrap_cxmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_cxmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cxmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cxmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cxmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cxmat_Sf_SwigStatic = {
    "cxmat",
    swig_cxmat_Sf_SwigStatic_methods,
    swig_cxmat_Sf_SwigStatic_attributes,
    swig_cxmat_Sf_SwigStatic_constants,
    swig_cxmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cxmat_bases[] = {0};
static const char *swig_cxmat_base_names[] = {0};
static swig_lua_class _wrap_class_cxmat = { "cxmat", "cxmat", &SWIGTYPE_p_arma__MatT_std__complexT_double_t_t,_proxy__wrap_new_cxmat, swig_delete_cxmat, swig_cxmat_methods, swig_cxmat_attributes, &swig_cxmat_Sf_SwigStatic, swig_cxmat_meta, swig_cxmat_bases, swig_cxmat_base_names };

static int _wrap_new_imat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::Mat",0,0)
  result = (arma::Mat< int > *)new arma::Mat< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_imat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< int > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< int >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< int > *)new arma::Mat< int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_imat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = 0 ;
  arma::Mat< int > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< int >::Mat",1,"arma::Mat< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("new_imat",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arma::Mat< int > *)new arma::Mat< int >((arma::Mat< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_imat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_imat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_imat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_imat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_imat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::Mat()\n"
    "    arma::Mat< int >::Mat(size_t,size_t)\n"
    "    arma::Mat< int >::Mat(arma::Mat< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_imat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator ()",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___call",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::at",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_at",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::zeros",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_zeros",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::zeros",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_zeros",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_imat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::zeros()\n"
    "    arma::Mat< int >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_imat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::ones",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_ones",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::ones",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_ones",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_imat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::ones()\n"
    "    arma::Mat< int >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_imat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::eye",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_eye",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::eye",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_eye",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_imat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::eye()\n"
    "    arma::Mat< int >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_imat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::randu",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_randu",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::randu",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_randu",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_imat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::randu()\n"
    "    arma::Mat< int >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_imat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::randn",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_randn",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::randn",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_randn",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_imat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::randn()\n"
    "    arma::Mat< int >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_imat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("arma::Mat< int >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::fill",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::fill",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_fill",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::replace",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::replace",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::replace",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_replace",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::clamp",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::clamp",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::clamp",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_clamp",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::set_size",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_set_size",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::reshape",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_reshape",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::resize",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_resize",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::copy_size",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::copy_size",2,"arma::Mat< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_copy_size",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_copy_size",2,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->copy_size((arma::Mat< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::reset",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_reset",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::memptr",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_memptr",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (int *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::colptr",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_colptr",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  SwigValueWrapper< arma::Col< int > > result;
  
  SWIG_check_num_args("arma::Mat< int >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::as_col",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_as_col",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< int > * resultptr = new arma::Col< int >((const arma::Col< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  SwigValueWrapper< arma::Row< int > > result;
  
  SWIG_check_num_args("arma::Mat< int >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::as_row",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_as_row",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< int > * resultptr = new arma::Row< int >((const arma::Row< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::t",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_t",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("arma::Mat< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::min",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_min",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("arma::Mat< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::max",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_max",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< int >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::index_min",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_index_min",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< int >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::index_max",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_index_max",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::eval",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_eval",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_empty",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_empty",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_trimatu",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_trimatu",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_trimatl",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_trimatl",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_diagmat",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_diagmat",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_square",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_square",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_symmetric",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_symmetric",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_zero",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_zero",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::is_finite",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_is_finite",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::has_inf",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_has_inf",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< int >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::has_nan",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_has_nan",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< int >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::raw_print",1,"arma::Mat< int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< int >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_raw_print",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::raw_print",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_raw_print",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::raw_print(std::string const &)\n"
    "    arma::Mat< int >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_imat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< int >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::brief_print",1,"arma::Mat< int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< int >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_brief_print",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::brief_print",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_brief_print",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::brief_print(std::string const &)\n"
    "    arma::Mat< int >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_imat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< int > > result;
  
  SWIG_check_num_args("arma::Mat< int >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::diag",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_diag",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< int > * resultptr = new arma::Col< int >((const arma::Col< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  SwigValueWrapper< arma::Col< int > > result;
  
  SWIG_check_num_args("arma::Mat< int >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::diag",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_diag",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< int > * resultptr = new arma::Col< int >((const arma::Col< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::diag(size_t)\n"
    "    arma::Mat< int >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_imat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::insert_rows",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_insert_rows",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::insert_cols",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_insert_cols",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< int >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::shed_row",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_shed_row",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::shed_rows",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_shed_rows",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< int >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::shed_col",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_shed_col",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::shed_cols",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_shed_cols",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::swap_rows",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_swap_rows",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< int >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::swap_cols",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_swap_cols",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::swap",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::swap",2,"arma::Mat< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_swap",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_swap",2,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::submat",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< int >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< int >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< int >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_submat",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< int >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::save",1,"arma::Mat< int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< int >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_save",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< int >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::load",1,"arma::Mat< int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< int >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_load",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< int > > result;
  
  SWIG_check_num_args("arma::Mat< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::__getitem__",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___getitem",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_int_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< int > * resultptr = new MatrixView< int >((const MatrixView< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator -",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___unm",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = arma_Mat_Sl_int_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > *arg2 = 0 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator +",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::operator +",2,"arma::Mat< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___add",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___add",2,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = arma_Mat_Sl_int_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< int > const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > *arg2 = 0 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator -",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::operator -",2,"arma::Mat< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___sub",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___sub",2,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = arma_Mat_Sl_int_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< int > const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > *arg2 = 0 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator *",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::operator *",2,"arma::Mat< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___mul",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___mul",2,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = arma_Mat_Sl_int_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< int > const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > *arg2 = 0 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator /",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::operator /",2,"arma::Mat< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___div",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___div",2,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = arma_Mat_Sl_int_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< int > const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator +",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::operator +",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___add",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_int_Sg__operator_Sa___SWIG_1(arg1,(int const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_imat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::operator +(arma::Mat< int > const &)\n"
    "    arma::Mat< int >::operator +(int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_imat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator -",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::operator -",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___sub",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_int_Sg__operator_Ss___SWIG_1(arg1,(int const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_imat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::operator -(arma::Mat< int > const &)\n"
    "    arma::Mat< int >::operator -(int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_imat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator *",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::operator *",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___mul",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_int_Sg__operator_Sm___SWIG_1(arg1,(int const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_imat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::operator *(arma::Mat< int > const &)\n"
    "    arma::Mat< int >::operator *(int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_imat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  arma::Mat< int > result;
  
  SWIG_check_num_args("arma::Mat< int >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::operator /",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::operator /",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___div",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_int_Sg__operator_Sd___SWIG_1(arg1,(int const &)*arg2);
  {
    arma::Mat< int > * resultptr = new arma::Mat< int >((const arma::Mat< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_imat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::operator /(arma::Mat< int > const &)\n"
    "    arma::Mat< int >::operator /(int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_imat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  arma::Col< int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::__setitem__",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< int >::__setitem__",3,"arma::Col< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___setitem",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_int_t,0))){
    SWIG_fail_ptr("imat___setitem",3,SWIGTYPE_p_arma__ColT_int_t);
  }
  
  arma_Mat_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  arma::Row< int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::__setitem__",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< int >::__setitem__",3,"arma::Row< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat___setitem",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_int_t,0))){
    SWIG_fail_ptr("imat___setitem",3,SWIGTYPE_p_arma__RowT_int_t);
  }
  
  arma_Mat_Sl_int_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_int_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_imat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_int_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_imat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::__setitem__(size_t,arma::Col< int > const &)\n"
    "    arma::Mat< int >::__setitem__(size_t,arma::Row< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_imat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Mat< int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::copy",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::copy",2,"arma::Mat< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_copy",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_copy",2,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  arma_Mat_Sl_int_Sg__copy__SWIG(arg1,(arma::Mat< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< int >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::rows",1,"arma::Mat< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_rows",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = arma_Mat_Sl_int_Sg__rows__SWIG((arma::Mat< int > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< int >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::cols",1,"arma::Mat< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_cols",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = arma_Mat_Sl_int_Sg__cols__SWIG((arma::Mat< int > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  arma::Row< int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::set_row",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< int >::set_row",3,"arma::Row< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_set_row",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_int_t,0))){
    SWIG_fail_ptr("imat_set_row",3,SWIGTYPE_p_arma__RowT_int_t);
  }
  
  arma_Mat_Sl_int_Sg__set_row__SWIG(arg1,arg2,(arma::Row< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  arma::Col< int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::set_col",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< int >::set_col",3,"arma::Col< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_set_col",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_int_t,0))){
    SWIG_fail_ptr("imat_set_col",3,SWIGTYPE_p_arma__ColT_int_t);
  }
  
  arma_Mat_Sl_int_Sg__set_col__SWIG(arg1,arg2,(arma::Col< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< int > > result;
  
  SWIG_check_num_args("arma::Mat< int >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::get_col",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_get_col",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_int_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< int > * resultptr = new arma::Col< int >((const arma::Col< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Row< int > > result;
  
  SWIG_check_num_args("arma::Mat< int >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::get_row",1,"arma::Mat< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< int >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_get_row",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_int_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< int > * resultptr = new arma::Row< int >((const arma::Row< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< int >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::println",1,"arma::Mat< int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< int >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_println",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_int_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::println",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_println",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  arma_Mat_Sl_int_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_imat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< int >::println(std::string const &)\n"
    "    arma::Mat< int >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_imat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Row< int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::addToEachRow",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::addToEachRow",2,"arma::Row< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_addToEachRow",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_int_t,0))){
    SWIG_fail_ptr("imat_addToEachRow",2,SWIGTYPE_p_arma__RowT_int_t);
  }
  
  arma_Mat_Sl_int_Sg__addToEachRow__SWIG(arg1,(arma::Row< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  arma::Col< int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::addToEachCol",1,"arma::Mat< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< int >::addToEachCol",2,"arma::Col< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_addToEachCol",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_int_t,0))){
    SWIG_fail_ptr("imat_addToEachCol",2,SWIGTYPE_p_arma__ColT_int_t);
  }
  
  arma_Mat_Sl_int_Sg__addToEachCol__SWIG(arg1,(arma::Col< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< int > *arg1 = (arma::Mat< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< int >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< int >::data",1,"arma::Mat< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_int_t,0))){
    SWIG_fail_ptr("imat_data",1,SWIGTYPE_p_arma__MatT_int_t);
  }
  
  result = (int *)arma_Mat_Sl_int_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_imat(void *obj) {
arma::Mat< int > *arg1 = (arma::Mat< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_imat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_imat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_imat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_imat_methods[]= {
    { "__call", _wrap_imat___call},
    { "at", _wrap_imat_at},
    { "zeros", _wrap_imat_zeros},
    { "ones", _wrap_imat_ones},
    { "eye", _wrap_imat_eye},
    { "randu", _wrap_imat_randu},
    { "randn", _wrap_imat_randn},
    { "fill", _wrap_imat_fill},
    { "replace", _wrap_imat_replace},
    { "clamp", _wrap_imat_clamp},
    { "set_size", _wrap_imat_set_size},
    { "reshape", _wrap_imat_reshape},
    { "resize", _wrap_imat_resize},
    { "copy_size", _wrap_imat_copy_size},
    { "reset", _wrap_imat_reset},
    { "memptr", _wrap_imat_memptr},
    { "colptr", _wrap_imat_colptr},
    { "as_col", _wrap_imat_as_col},
    { "as_row", _wrap_imat_as_row},
    { "t", _wrap_imat_t},
    { "min", _wrap_imat_min},
    { "max", _wrap_imat_max},
    { "index_min", _wrap_imat_index_min},
    { "index_max", _wrap_imat_index_max},
    { "eval", _wrap_imat_eval},
    { "is_empty", _wrap_imat_is_empty},
    { "is_trimatu", _wrap_imat_is_trimatu},
    { "is_trimatl", _wrap_imat_is_trimatl},
    { "is_diagmat", _wrap_imat_is_diagmat},
    { "is_square", _wrap_imat_is_square},
    { "is_symmetric", _wrap_imat_is_symmetric},
    { "is_zero", _wrap_imat_is_zero},
    { "is_finite", _wrap_imat_is_finite},
    { "has_inf", _wrap_imat_has_inf},
    { "has_nan", _wrap_imat_has_nan},
    { "raw_print", _wrap_imat_raw_print},
    { "brief_print", _wrap_imat_brief_print},
    { "diag", _wrap_imat_diag},
    { "insert_rows", _wrap_imat_insert_rows},
    { "insert_cols", _wrap_imat_insert_cols},
    { "shed_row", _wrap_imat_shed_row},
    { "shed_rows", _wrap_imat_shed_rows},
    { "shed_col", _wrap_imat_shed_col},
    { "shed_cols", _wrap_imat_shed_cols},
    { "swap_rows", _wrap_imat_swap_rows},
    { "swap_cols", _wrap_imat_swap_cols},
    { "swap", _wrap_imat_swap},
    { "submat", _wrap_imat_submat},
    { "save", _wrap_imat_save},
    { "load", _wrap_imat_load},
    { "__getitem", _wrap_imat___getitem},
    { "__unm", _wrap_imat___unm},
    { "__add", _wrap_imat___add},
    { "__sub", _wrap_imat___sub},
    { "__mul", _wrap_imat___mul},
    { "__div", _wrap_imat___div},
    { "__setitem", _wrap_imat___setitem},
    { "copy", _wrap_imat_copy},
    { "rows", _wrap_imat_rows},
    { "cols", _wrap_imat_cols},
    { "set_row", _wrap_imat_set_row},
    { "set_col", _wrap_imat_set_col},
    { "get_col", _wrap_imat_get_col},
    { "get_row", _wrap_imat_get_row},
    { "println", _wrap_imat_println},
    { "addToEachRow", _wrap_imat_addToEachRow},
    { "addToEachCol", _wrap_imat_addToEachCol},
    { "data", _wrap_imat_data},
    {0,0}
};
static swig_lua_method swig_imat_meta[] = {
    { "__call", _wrap_imat___call},
    { "__getitem", _wrap_imat___getitem},
    { "__unm", _wrap_imat___unm},
    { "__add", _wrap_imat___add},
    { "__sub", _wrap_imat___sub},
    { "__mul", _wrap_imat___mul},
    { "__div", _wrap_imat___div},
    { "__setitem", _wrap_imat___setitem},
    {0,0}
};

static swig_lua_attribute swig_imat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_imat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_imat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_imat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_imat_Sf_SwigStatic = {
    "imat",
    swig_imat_Sf_SwigStatic_methods,
    swig_imat_Sf_SwigStatic_attributes,
    swig_imat_Sf_SwigStatic_constants,
    swig_imat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_imat_bases[] = {0};
static const char *swig_imat_base_names[] = {0};
static swig_lua_class _wrap_class_imat = { "imat", "imat", &SWIGTYPE_p_arma__MatT_int_t,_proxy__wrap_new_imat, swig_delete_imat, swig_imat_methods, swig_imat_attributes, &swig_imat_Sf_SwigStatic, swig_imat_meta, swig_imat_bases, swig_imat_base_names };

static int _wrap_new_umat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::Mat",0,0)
  result = (arma::Mat< unsigned int > *)new arma::Mat< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_umat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< unsigned int > *)new arma::Mat< unsigned int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_umat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = 0 ;
  arma::Mat< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::Mat",1,"arma::Mat< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_umat",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arma::Mat< unsigned int > *)new arma::Mat< unsigned int >((arma::Mat< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_umat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_umat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_umat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_umat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_umat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::Mat()\n"
    "    arma::Mat< unsigned int >::Mat(size_t,size_t)\n"
    "    arma::Mat< unsigned int >::Mat(arma::Mat< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_umat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator ()",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___call",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned int *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::at",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_at",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned int *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::zeros",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_zeros",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::zeros",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_zeros",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_umat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::zeros()\n"
    "    arma::Mat< unsigned int >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_umat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::ones",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_ones",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::ones",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_ones",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_umat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::ones()\n"
    "    arma::Mat< unsigned int >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_umat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::eye",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_eye",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::eye",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_eye",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_umat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::eye()\n"
    "    arma::Mat< unsigned int >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_umat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::randu",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_randu",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::randu",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_randu",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_umat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::randu()\n"
    "    arma::Mat< unsigned int >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_umat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::randn",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_randn",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::randn",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_randn",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_umat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::randn()\n"
    "    arma::Mat< unsigned int >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_umat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::fill",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::fill",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_fill",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::replace",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::replace",2,"unsigned int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::replace",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_replace",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::clamp",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::clamp",2,"unsigned int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::clamp",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_clamp",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::set_size",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_set_size",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::reshape",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_reshape",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::resize",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_resize",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::copy_size",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::copy_size",2,"arma::Mat< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_copy_size",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_copy_size",2,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->copy_size((arma::Mat< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::reset",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_reset",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::memptr",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_memptr",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (unsigned int *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::colptr",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_colptr",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  SwigValueWrapper< arma::Col< unsigned int > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::as_col",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_as_col",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< unsigned int > * resultptr = new arma::Col< unsigned int >((const arma::Col< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  SwigValueWrapper< arma::Row< unsigned int > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::as_row",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_as_row",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< unsigned int > * resultptr = new arma::Row< unsigned int >((const arma::Row< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::t",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_t",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::min",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_min",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::max",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_max",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::index_min",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_index_min",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::index_max",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_index_max",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::eval",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_eval",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_empty",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_empty",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_trimatu",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_trimatu",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_trimatl",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_trimatl",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_diagmat",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_diagmat",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_square",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_square",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_symmetric",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_symmetric",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_zero",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_zero",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::is_finite",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_is_finite",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::has_inf",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_has_inf",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::has_nan",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_has_nan",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::raw_print",1,"arma::Mat< unsigned int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_raw_print",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::raw_print",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_raw_print",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::raw_print(std::string const &)\n"
    "    arma::Mat< unsigned int >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_umat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::brief_print",1,"arma::Mat< unsigned int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_brief_print",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::brief_print",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_brief_print",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::brief_print(std::string const &)\n"
    "    arma::Mat< unsigned int >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_umat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< unsigned int > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::diag",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_diag",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< unsigned int > * resultptr = new arma::Col< unsigned int >((const arma::Col< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  SwigValueWrapper< arma::Col< unsigned int > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::diag",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_diag",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< unsigned int > * resultptr = new arma::Col< unsigned int >((const arma::Col< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::diag(size_t)\n"
    "    arma::Mat< unsigned int >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_umat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::insert_rows",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_insert_rows",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::insert_cols",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_insert_cols",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_row",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_shed_row",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_rows",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_shed_rows",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_col",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_shed_col",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_cols",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_shed_cols",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::swap_rows",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_swap_rows",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::swap_cols",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_swap_cols",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::swap",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::swap",2,"arma::Mat< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_swap",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_swap",2,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::submat",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< unsigned int >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< unsigned int >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_submat",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::save",1,"arma::Mat< unsigned int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_save",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::load",1,"arma::Mat< unsigned int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_load",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< unsigned int > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::__getitem__",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___getitem",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_int_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< unsigned int > * resultptr = new MatrixView< unsigned int >((const MatrixView< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator -",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___unm",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > *arg2 = 0 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator +",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator +",2,"arma::Mat< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___add",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___add",2,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< unsigned int > const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > *arg2 = 0 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator -",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator -",2,"arma::Mat< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___sub",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___sub",2,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< unsigned int > const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > *arg2 = 0 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator *",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator *",2,"arma::Mat< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___mul",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___mul",2,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< unsigned int > const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > *arg2 = 0 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator /",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator /",2,"arma::Mat< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___div",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___div",2,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< unsigned int > const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator +",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator +",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___add",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sa___SWIG_1(arg1,(unsigned int const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_umat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::operator +(arma::Mat< unsigned int > const &)\n"
    "    arma::Mat< unsigned int >::operator +(unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_umat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator -",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator -",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___sub",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Ss___SWIG_1(arg1,(unsigned int const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_umat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::operator -(arma::Mat< unsigned int > const &)\n"
    "    arma::Mat< unsigned int >::operator -(unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_umat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator *",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator *",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___mul",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sm___SWIG_1(arg1,(unsigned int const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_umat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::operator *(arma::Mat< unsigned int > const &)\n"
    "    arma::Mat< unsigned int >::operator *(unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_umat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  arma::Mat< unsigned int > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::operator /",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::operator /",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___div",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_int_Sg__operator_Sd___SWIG_1(arg1,(unsigned int const &)*arg2);
  {
    arma::Mat< unsigned int > * resultptr = new arma::Mat< unsigned int >((const arma::Mat< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_umat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::operator /(arma::Mat< unsigned int > const &)\n"
    "    arma::Mat< unsigned int >::operator /(unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_umat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  arma::Col< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::__setitem__",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::__setitem__",3,"arma::Col< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___setitem",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___setitem",3,SWIGTYPE_p_arma__ColT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  arma::Row< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::__setitem__",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::__setitem__",3,"arma::Row< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___setitem",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat___setitem",3,SWIGTYPE_p_arma__RowT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_umat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_umat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::__setitem__(size_t,arma::Col< unsigned int > const &)\n"
    "    arma::Mat< unsigned int >::__setitem__(size_t,arma::Row< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_umat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Mat< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::copy",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::copy",2,"arma::Mat< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_copy",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_copy",2,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg__copy__SWIG(arg1,(arma::Mat< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::rows",1,"arma::Mat< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_rows",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_int_Sg__rows__SWIG((arma::Mat< unsigned int > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::cols",1,"arma::Mat< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_cols",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_int_Sg__cols__SWIG((arma::Mat< unsigned int > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  arma::Row< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::set_row",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::set_row",3,"arma::Row< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_set_row",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_set_row",3,SWIGTYPE_p_arma__RowT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg__set_row__SWIG(arg1,arg2,(arma::Row< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  arma::Col< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::set_col",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned int >::set_col",3,"arma::Col< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_set_col",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_set_col",3,SWIGTYPE_p_arma__ColT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg__set_col__SWIG(arg1,arg2,(arma::Col< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< unsigned int > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::get_col",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_get_col",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_int_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< unsigned int > * resultptr = new arma::Col< unsigned int >((const arma::Col< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Row< unsigned int > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::get_row",1,"arma::Mat< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_get_row",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_int_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< unsigned int > * resultptr = new arma::Row< unsigned int >((const arma::Row< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::println",1,"arma::Mat< unsigned int > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_println",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_unsigned_SS_int_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::println",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_println",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_umat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_umat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'umat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned int >::println(std::string const &)\n"
    "    arma::Mat< unsigned int >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_umat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Row< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::addToEachRow",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::addToEachRow",2,"arma::Row< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_addToEachRow",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_addToEachRow",2,SWIGTYPE_p_arma__RowT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg__addToEachRow__SWIG(arg1,(arma::Row< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  arma::Col< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::addToEachCol",1,"arma::Mat< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned int >::addToEachCol",2,"arma::Col< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_addToEachCol",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_addToEachCol",2,SWIGTYPE_p_arma__ColT_unsigned_int_t);
  }
  
  arma_Mat_Sl_unsigned_SS_int_Sg__addToEachCol__SWIG(arg1,(arma::Col< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_umat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned int >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned int >::data",1,"arma::Mat< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_int_t,0))){
    SWIG_fail_ptr("umat_data",1,SWIGTYPE_p_arma__MatT_unsigned_int_t);
  }
  
  result = (unsigned int *)arma_Mat_Sl_unsigned_SS_int_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_umat(void *obj) {
arma::Mat< unsigned int > *arg1 = (arma::Mat< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_umat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_umat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_umat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_umat_methods[]= {
    { "__call", _wrap_umat___call},
    { "at", _wrap_umat_at},
    { "zeros", _wrap_umat_zeros},
    { "ones", _wrap_umat_ones},
    { "eye", _wrap_umat_eye},
    { "randu", _wrap_umat_randu},
    { "randn", _wrap_umat_randn},
    { "fill", _wrap_umat_fill},
    { "replace", _wrap_umat_replace},
    { "clamp", _wrap_umat_clamp},
    { "set_size", _wrap_umat_set_size},
    { "reshape", _wrap_umat_reshape},
    { "resize", _wrap_umat_resize},
    { "copy_size", _wrap_umat_copy_size},
    { "reset", _wrap_umat_reset},
    { "memptr", _wrap_umat_memptr},
    { "colptr", _wrap_umat_colptr},
    { "as_col", _wrap_umat_as_col},
    { "as_row", _wrap_umat_as_row},
    { "t", _wrap_umat_t},
    { "min", _wrap_umat_min},
    { "max", _wrap_umat_max},
    { "index_min", _wrap_umat_index_min},
    { "index_max", _wrap_umat_index_max},
    { "eval", _wrap_umat_eval},
    { "is_empty", _wrap_umat_is_empty},
    { "is_trimatu", _wrap_umat_is_trimatu},
    { "is_trimatl", _wrap_umat_is_trimatl},
    { "is_diagmat", _wrap_umat_is_diagmat},
    { "is_square", _wrap_umat_is_square},
    { "is_symmetric", _wrap_umat_is_symmetric},
    { "is_zero", _wrap_umat_is_zero},
    { "is_finite", _wrap_umat_is_finite},
    { "has_inf", _wrap_umat_has_inf},
    { "has_nan", _wrap_umat_has_nan},
    { "raw_print", _wrap_umat_raw_print},
    { "brief_print", _wrap_umat_brief_print},
    { "diag", _wrap_umat_diag},
    { "insert_rows", _wrap_umat_insert_rows},
    { "insert_cols", _wrap_umat_insert_cols},
    { "shed_row", _wrap_umat_shed_row},
    { "shed_rows", _wrap_umat_shed_rows},
    { "shed_col", _wrap_umat_shed_col},
    { "shed_cols", _wrap_umat_shed_cols},
    { "swap_rows", _wrap_umat_swap_rows},
    { "swap_cols", _wrap_umat_swap_cols},
    { "swap", _wrap_umat_swap},
    { "submat", _wrap_umat_submat},
    { "save", _wrap_umat_save},
    { "load", _wrap_umat_load},
    { "__getitem", _wrap_umat___getitem},
    { "__unm", _wrap_umat___unm},
    { "__add", _wrap_umat___add},
    { "__sub", _wrap_umat___sub},
    { "__mul", _wrap_umat___mul},
    { "__div", _wrap_umat___div},
    { "__setitem", _wrap_umat___setitem},
    { "copy", _wrap_umat_copy},
    { "rows", _wrap_umat_rows},
    { "cols", _wrap_umat_cols},
    { "set_row", _wrap_umat_set_row},
    { "set_col", _wrap_umat_set_col},
    { "get_col", _wrap_umat_get_col},
    { "get_row", _wrap_umat_get_row},
    { "println", _wrap_umat_println},
    { "addToEachRow", _wrap_umat_addToEachRow},
    { "addToEachCol", _wrap_umat_addToEachCol},
    { "data", _wrap_umat_data},
    {0,0}
};
static swig_lua_method swig_umat_meta[] = {
    { "__call", _wrap_umat___call},
    { "__getitem", _wrap_umat___getitem},
    { "__unm", _wrap_umat___unm},
    { "__add", _wrap_umat___add},
    { "__sub", _wrap_umat___sub},
    { "__mul", _wrap_umat___mul},
    { "__div", _wrap_umat___div},
    { "__setitem", _wrap_umat___setitem},
    {0,0}
};

static swig_lua_attribute swig_umat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_umat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_umat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_umat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_umat_Sf_SwigStatic = {
    "umat",
    swig_umat_Sf_SwigStatic_methods,
    swig_umat_Sf_SwigStatic_attributes,
    swig_umat_Sf_SwigStatic_constants,
    swig_umat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_umat_bases[] = {0};
static const char *swig_umat_base_names[] = {0};
static swig_lua_class _wrap_class_umat = { "umat", "umat", &SWIGTYPE_p_arma__MatT_unsigned_int_t,_proxy__wrap_new_umat, swig_delete_umat, swig_umat_methods, swig_umat_attributes, &swig_umat_Sf_SwigStatic, swig_umat_meta, swig_umat_bases, swig_umat_base_names };

static int _wrap_new_lmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::Mat",0,0)
  result = (arma::Mat< long > *)new arma::Mat< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< long >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< long > *)new arma::Mat< long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = 0 ;
  arma::Mat< long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< long >::Mat",1,"arma::Mat< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("new_lmat",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arma::Mat< long > *)new arma::Mat< long >((arma::Mat< long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_lmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_lmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_lmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_lmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::Mat()\n"
    "    arma::Mat< long >::Mat(size_t,size_t)\n"
    "    arma::Mat< long >::Mat(arma::Mat< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator ()",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___call",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::at",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_at",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::zeros",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_zeros",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::zeros",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_zeros",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::zeros()\n"
    "    arma::Mat< long >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::ones",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_ones",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::ones",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_ones",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::ones()\n"
    "    arma::Mat< long >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::eye",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_eye",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::eye",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_eye",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::eye()\n"
    "    arma::Mat< long >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::randu",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_randu",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::randu",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_randu",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::randu()\n"
    "    arma::Mat< long >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::randn",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_randn",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::randn",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_randn",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::randn()\n"
    "    arma::Mat< long >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("arma::Mat< long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::fill",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::fill",2,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_fill",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long arg2 ;
  long arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::replace",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::replace",2,"long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::replace",3,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_replace",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  arg3 = (long const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long arg2 ;
  long arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::clamp",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::clamp",2,"long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::clamp",3,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_clamp",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  arg3 = (long const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::set_size",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_set_size",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::reshape",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_reshape",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::resize",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_resize",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::copy_size",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::copy_size",2,"arma::Mat< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_copy_size",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_copy_size",2,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->copy_size((arma::Mat< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::reset",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_reset",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::memptr",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_memptr",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (long *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::colptr",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_colptr",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  SwigValueWrapper< arma::Col< long > > result;
  
  SWIG_check_num_args("arma::Mat< long >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::as_col",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_as_col",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< long > * resultptr = new arma::Col< long >((const arma::Col< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  SwigValueWrapper< arma::Row< long > > result;
  
  SWIG_check_num_args("arma::Mat< long >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::as_row",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_as_row",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< long > * resultptr = new arma::Row< long >((const arma::Row< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::t",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_t",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("arma::Mat< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::min",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_min",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("arma::Mat< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::max",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_max",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::index_min",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_index_min",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::index_max",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_index_max",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::eval",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_eval",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_empty",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_empty",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_trimatu",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_trimatl",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_diagmat",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_square",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_square",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_symmetric",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_zero",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_zero",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::is_finite",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_is_finite",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::has_inf",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_has_inf",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::has_nan",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_has_nan",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::raw_print",1,"arma::Mat< long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_raw_print",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::raw_print",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_raw_print",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::raw_print(std::string const &)\n"
    "    arma::Mat< long >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::brief_print",1,"arma::Mat< long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_brief_print",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::brief_print",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_brief_print",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::brief_print(std::string const &)\n"
    "    arma::Mat< long >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< long > > result;
  
  SWIG_check_num_args("arma::Mat< long >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::diag",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_diag",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< long > * resultptr = new arma::Col< long >((const arma::Col< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  SwigValueWrapper< arma::Col< long > > result;
  
  SWIG_check_num_args("arma::Mat< long >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::diag",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_diag",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< long > * resultptr = new arma::Col< long >((const arma::Col< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::diag(size_t)\n"
    "    arma::Mat< long >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::insert_rows",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_insert_rows",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::insert_cols",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_insert_cols",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< long >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::shed_row",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_shed_row",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::shed_rows",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_shed_rows",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< long >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::shed_col",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_shed_col",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::shed_cols",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_shed_cols",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::swap_rows",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_swap_rows",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::swap_cols",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_swap_cols",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::swap",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::swap",2,"arma::Mat< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_swap",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_swap",2,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::submat",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< long >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< long >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_submat",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::save",1,"arma::Mat< long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_save",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::load",1,"arma::Mat< long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_load",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< long > > result;
  
  SWIG_check_num_args("arma::Mat< long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::__getitem__",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___getitem",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_long_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< long > * resultptr = new MatrixView< long >((const MatrixView< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator -",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___unm",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = arma_Mat_Sl_long_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > *arg2 = 0 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator +",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::operator +",2,"arma::Mat< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___add",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___add",2,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = arma_Mat_Sl_long_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< long > const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > *arg2 = 0 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator -",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::operator -",2,"arma::Mat< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___sub",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___sub",2,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = arma_Mat_Sl_long_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< long > const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > *arg2 = 0 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator *",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::operator *",2,"arma::Mat< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___mul",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___mul",2,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = arma_Mat_Sl_long_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< long > const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > *arg2 = 0 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator /",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::operator /",2,"arma::Mat< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___div",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___div",2,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = arma_Mat_Sl_long_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< long > const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator +",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::operator +",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___add",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_Sg__operator_Sa___SWIG_1(arg1,(long const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_lmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::operator +(arma::Mat< long > const &)\n"
    "    arma::Mat< long >::operator +(long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator -",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::operator -",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___sub",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_Sg__operator_Ss___SWIG_1(arg1,(long const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_lmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::operator -(arma::Mat< long > const &)\n"
    "    arma::Mat< long >::operator -(long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator *",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::operator *",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___mul",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_Sg__operator_Sm___SWIG_1(arg1,(long const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_lmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::operator *(arma::Mat< long > const &)\n"
    "    arma::Mat< long >::operator *(long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  arma::Mat< long > result;
  
  SWIG_check_num_args("arma::Mat< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::operator /",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::operator /",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___div",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_Sg__operator_Sd___SWIG_1(arg1,(long const &)*arg2);
  {
    arma::Mat< long > * resultptr = new arma::Mat< long >((const arma::Mat< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_lmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::operator /(arma::Mat< long > const &)\n"
    "    arma::Mat< long >::operator /(long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  arma::Col< long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::__setitem__",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long >::__setitem__",3,"arma::Col< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___setitem",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_long_t,0))){
    SWIG_fail_ptr("lmat___setitem",3,SWIGTYPE_p_arma__ColT_long_t);
  }
  
  arma_Mat_Sl_long_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  arma::Row< long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::__setitem__",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long >::__setitem__",3,"arma::Row< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat___setitem",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_long_t,0))){
    SWIG_fail_ptr("lmat___setitem",3,SWIGTYPE_p_arma__RowT_long_t);
  }
  
  arma_Mat_Sl_long_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_lmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_lmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::__setitem__(size_t,arma::Col< long > const &)\n"
    "    arma::Mat< long >::__setitem__(size_t,arma::Row< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Mat< long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::copy",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::copy",2,"arma::Mat< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_copy",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_copy",2,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  arma_Mat_Sl_long_Sg__copy__SWIG(arg1,(arma::Mat< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::rows",1,"arma::Mat< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_rows",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = arma_Mat_Sl_long_Sg__rows__SWIG((arma::Mat< long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::cols",1,"arma::Mat< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_cols",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = arma_Mat_Sl_long_Sg__cols__SWIG((arma::Mat< long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  arma::Row< long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::set_row",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long >::set_row",3,"arma::Row< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_set_row",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_long_t,0))){
    SWIG_fail_ptr("lmat_set_row",3,SWIGTYPE_p_arma__RowT_long_t);
  }
  
  arma_Mat_Sl_long_Sg__set_row__SWIG(arg1,arg2,(arma::Row< long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  arma::Col< long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::set_col",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long >::set_col",3,"arma::Col< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_set_col",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_long_t,0))){
    SWIG_fail_ptr("lmat_set_col",3,SWIGTYPE_p_arma__ColT_long_t);
  }
  
  arma_Mat_Sl_long_Sg__set_col__SWIG(arg1,arg2,(arma::Col< long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< long > > result;
  
  SWIG_check_num_args("arma::Mat< long >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::get_col",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_get_col",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_long_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< long > * resultptr = new arma::Col< long >((const arma::Col< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Row< long > > result;
  
  SWIG_check_num_args("arma::Mat< long >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::get_row",1,"arma::Mat< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_get_row",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_long_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< long > * resultptr = new arma::Row< long >((const arma::Row< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::println",1,"arma::Mat< long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_println",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_long_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::println",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_println",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  arma_Mat_Sl_long_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_lmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long >::println(std::string const &)\n"
    "    arma::Mat< long >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_lmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Row< long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::addToEachRow",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::addToEachRow",2,"arma::Row< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_long_t,0))){
    SWIG_fail_ptr("lmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_long_t);
  }
  
  arma_Mat_Sl_long_Sg__addToEachRow__SWIG(arg1,(arma::Row< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  arma::Col< long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::addToEachCol",1,"arma::Mat< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long >::addToEachCol",2,"arma::Col< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_long_t,0))){
    SWIG_fail_ptr("lmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_long_t);
  }
  
  arma_Mat_Sl_long_Sg__addToEachCol__SWIG(arg1,(arma::Col< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long > *arg1 = (arma::Mat< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long >::data",1,"arma::Mat< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_t,0))){
    SWIG_fail_ptr("lmat_data",1,SWIGTYPE_p_arma__MatT_long_t);
  }
  
  result = (long *)arma_Mat_Sl_long_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_lmat(void *obj) {
arma::Mat< long > *arg1 = (arma::Mat< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_lmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_lmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_lmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_lmat_methods[]= {
    { "__call", _wrap_lmat___call},
    { "at", _wrap_lmat_at},
    { "zeros", _wrap_lmat_zeros},
    { "ones", _wrap_lmat_ones},
    { "eye", _wrap_lmat_eye},
    { "randu", _wrap_lmat_randu},
    { "randn", _wrap_lmat_randn},
    { "fill", _wrap_lmat_fill},
    { "replace", _wrap_lmat_replace},
    { "clamp", _wrap_lmat_clamp},
    { "set_size", _wrap_lmat_set_size},
    { "reshape", _wrap_lmat_reshape},
    { "resize", _wrap_lmat_resize},
    { "copy_size", _wrap_lmat_copy_size},
    { "reset", _wrap_lmat_reset},
    { "memptr", _wrap_lmat_memptr},
    { "colptr", _wrap_lmat_colptr},
    { "as_col", _wrap_lmat_as_col},
    { "as_row", _wrap_lmat_as_row},
    { "t", _wrap_lmat_t},
    { "min", _wrap_lmat_min},
    { "max", _wrap_lmat_max},
    { "index_min", _wrap_lmat_index_min},
    { "index_max", _wrap_lmat_index_max},
    { "eval", _wrap_lmat_eval},
    { "is_empty", _wrap_lmat_is_empty},
    { "is_trimatu", _wrap_lmat_is_trimatu},
    { "is_trimatl", _wrap_lmat_is_trimatl},
    { "is_diagmat", _wrap_lmat_is_diagmat},
    { "is_square", _wrap_lmat_is_square},
    { "is_symmetric", _wrap_lmat_is_symmetric},
    { "is_zero", _wrap_lmat_is_zero},
    { "is_finite", _wrap_lmat_is_finite},
    { "has_inf", _wrap_lmat_has_inf},
    { "has_nan", _wrap_lmat_has_nan},
    { "raw_print", _wrap_lmat_raw_print},
    { "brief_print", _wrap_lmat_brief_print},
    { "diag", _wrap_lmat_diag},
    { "insert_rows", _wrap_lmat_insert_rows},
    { "insert_cols", _wrap_lmat_insert_cols},
    { "shed_row", _wrap_lmat_shed_row},
    { "shed_rows", _wrap_lmat_shed_rows},
    { "shed_col", _wrap_lmat_shed_col},
    { "shed_cols", _wrap_lmat_shed_cols},
    { "swap_rows", _wrap_lmat_swap_rows},
    { "swap_cols", _wrap_lmat_swap_cols},
    { "swap", _wrap_lmat_swap},
    { "submat", _wrap_lmat_submat},
    { "save", _wrap_lmat_save},
    { "load", _wrap_lmat_load},
    { "__getitem", _wrap_lmat___getitem},
    { "__unm", _wrap_lmat___unm},
    { "__add", _wrap_lmat___add},
    { "__sub", _wrap_lmat___sub},
    { "__mul", _wrap_lmat___mul},
    { "__div", _wrap_lmat___div},
    { "__setitem", _wrap_lmat___setitem},
    { "copy", _wrap_lmat_copy},
    { "rows", _wrap_lmat_rows},
    { "cols", _wrap_lmat_cols},
    { "set_row", _wrap_lmat_set_row},
    { "set_col", _wrap_lmat_set_col},
    { "get_col", _wrap_lmat_get_col},
    { "get_row", _wrap_lmat_get_row},
    { "println", _wrap_lmat_println},
    { "addToEachRow", _wrap_lmat_addToEachRow},
    { "addToEachCol", _wrap_lmat_addToEachCol},
    { "data", _wrap_lmat_data},
    {0,0}
};
static swig_lua_method swig_lmat_meta[] = {
    { "__call", _wrap_lmat___call},
    { "__getitem", _wrap_lmat___getitem},
    { "__unm", _wrap_lmat___unm},
    { "__add", _wrap_lmat___add},
    { "__sub", _wrap_lmat___sub},
    { "__mul", _wrap_lmat___mul},
    { "__div", _wrap_lmat___div},
    { "__setitem", _wrap_lmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_lmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_lmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_lmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_lmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_lmat_Sf_SwigStatic = {
    "lmat",
    swig_lmat_Sf_SwigStatic_methods,
    swig_lmat_Sf_SwigStatic_attributes,
    swig_lmat_Sf_SwigStatic_constants,
    swig_lmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_lmat_bases[] = {0};
static const char *swig_lmat_base_names[] = {0};
static swig_lua_class _wrap_class_lmat = { "lmat", "lmat", &SWIGTYPE_p_arma__MatT_long_t,_proxy__wrap_new_lmat, swig_delete_lmat, swig_lmat_methods, swig_lmat_attributes, &swig_lmat_Sf_SwigStatic, swig_lmat_meta, swig_lmat_bases, swig_lmat_base_names };

static int _wrap_new_ulmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::Mat",0,0)
  result = (arma::Mat< unsigned long > *)new arma::Mat< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< unsigned long > *)new arma::Mat< unsigned long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = 0 ;
  arma::Mat< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::Mat",1,"arma::Mat< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_ulmat",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arma::Mat< unsigned long > *)new arma::Mat< unsigned long >((arma::Mat< unsigned long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ulmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ulmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ulmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ulmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::Mat()\n"
    "    arma::Mat< unsigned long >::Mat(size_t,size_t)\n"
    "    arma::Mat< unsigned long >::Mat(arma::Mat< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator ()",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___call",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::at",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_at",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::zeros",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_zeros",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::zeros",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_zeros",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::zeros()\n"
    "    arma::Mat< unsigned long >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::ones",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_ones",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::ones",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_ones",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::ones()\n"
    "    arma::Mat< unsigned long >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::eye",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_eye",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::eye",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_eye",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::eye()\n"
    "    arma::Mat< unsigned long >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::randu",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_randu",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::randu",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_randu",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::randu()\n"
    "    arma::Mat< unsigned long >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::randn",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_randn",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::randn",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_randn",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::randn()\n"
    "    arma::Mat< unsigned long >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::fill",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::fill",2,"unsigned long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_fill",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::replace",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::replace",2,"unsigned long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::replace",3,"unsigned long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_replace",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::clamp",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::clamp",2,"unsigned long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::clamp",3,"unsigned long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_clamp",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::set_size",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_set_size",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::reshape",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_reshape",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::resize",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_resize",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::copy_size",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::copy_size",2,"arma::Mat< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_copy_size",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_copy_size",2,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->copy_size((arma::Mat< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::reset",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_reset",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::memptr",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_memptr",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (unsigned long *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::colptr",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_colptr",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  SwigValueWrapper< arma::Col< unsigned long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::as_col",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_as_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< unsigned long > * resultptr = new arma::Col< unsigned long >((const arma::Col< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  SwigValueWrapper< arma::Row< unsigned long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::as_row",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_as_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< unsigned long > * resultptr = new arma::Row< unsigned long >((const arma::Row< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::t",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_t",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::min",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_min",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::max",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_max",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::index_min",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_index_min",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::index_max",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_index_max",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::eval",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_eval",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_empty",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_empty",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_trimatu",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_trimatl",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_diagmat",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_square",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_square",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_symmetric",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_zero",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_zero",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::is_finite",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_is_finite",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::has_inf",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_has_inf",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::has_nan",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_has_nan",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::raw_print",1,"arma::Mat< unsigned long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_raw_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::raw_print",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_raw_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::raw_print(std::string const &)\n"
    "    arma::Mat< unsigned long >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::brief_print",1,"arma::Mat< unsigned long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_brief_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::brief_print",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_brief_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::brief_print(std::string const &)\n"
    "    arma::Mat< unsigned long >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< unsigned long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::diag",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_diag",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< unsigned long > * resultptr = new arma::Col< unsigned long >((const arma::Col< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  SwigValueWrapper< arma::Col< unsigned long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::diag",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_diag",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< unsigned long > * resultptr = new arma::Col< unsigned long >((const arma::Col< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::diag(size_t)\n"
    "    arma::Mat< unsigned long >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::insert_rows",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_insert_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::insert_cols",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_insert_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_row",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_shed_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_rows",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_shed_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_col",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_shed_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_cols",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_shed_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::swap_rows",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_swap_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::swap_cols",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_swap_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::swap",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::swap",2,"arma::Mat< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_swap",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_swap",2,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::submat",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< unsigned long >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< unsigned long >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_submat",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::save",1,"arma::Mat< unsigned long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_save",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::load",1,"arma::Mat< unsigned long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_load",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< unsigned long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::__getitem__",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___getitem",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_long_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< unsigned long > * resultptr = new MatrixView< unsigned long >((const MatrixView< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator -",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___unm",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > *arg2 = 0 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator +",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator +",2,"arma::Mat< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___add",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___add",2,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< unsigned long > const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > *arg2 = 0 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator -",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator -",2,"arma::Mat< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___sub",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___sub",2,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< unsigned long > const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > *arg2 = 0 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator *",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator *",2,"arma::Mat< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___mul",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___mul",2,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< unsigned long > const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > *arg2 = 0 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator /",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator /",2,"arma::Mat< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___div",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___div",2,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< unsigned long > const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator +",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator +",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___add",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sa___SWIG_1(arg1,(unsigned long const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ulmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::operator +(arma::Mat< unsigned long > const &)\n"
    "    arma::Mat< unsigned long >::operator +(unsigned long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator -",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator -",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___sub",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Ss___SWIG_1(arg1,(unsigned long const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ulmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::operator -(arma::Mat< unsigned long > const &)\n"
    "    arma::Mat< unsigned long >::operator -(unsigned long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator *",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator *",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___mul",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sm___SWIG_1(arg1,(unsigned long const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ulmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::operator *(arma::Mat< unsigned long > const &)\n"
    "    arma::Mat< unsigned long >::operator *(unsigned long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  arma::Mat< unsigned long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::operator /",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::operator /",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___div",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_Sg__operator_Sd___SWIG_1(arg1,(unsigned long const &)*arg2);
  {
    arma::Mat< unsigned long > * resultptr = new arma::Mat< unsigned long >((const arma::Mat< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ulmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::operator /(arma::Mat< unsigned long > const &)\n"
    "    arma::Mat< unsigned long >::operator /(unsigned long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  arma::Col< unsigned long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::__setitem__",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::__setitem__",3,"arma::Col< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___setitem",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___setitem",3,SWIGTYPE_p_arma__ColT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< unsigned long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  arma::Row< unsigned long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::__setitem__",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::__setitem__",3,"arma::Row< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___setitem",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat___setitem",3,SWIGTYPE_p_arma__RowT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< unsigned long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ulmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ulmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::__setitem__(size_t,arma::Col< unsigned long > const &)\n"
    "    arma::Mat< unsigned long >::__setitem__(size_t,arma::Row< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Mat< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::copy",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::copy",2,"arma::Mat< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_copy",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_copy",2,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg__copy__SWIG(arg1,(arma::Mat< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::rows",1,"arma::Mat< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_Sg__rows__SWIG((arma::Mat< unsigned long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::cols",1,"arma::Mat< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_Sg__cols__SWIG((arma::Mat< unsigned long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  arma::Row< unsigned long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::set_row",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::set_row",3,"arma::Row< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_set_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_set_row",3,SWIGTYPE_p_arma__RowT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg__set_row__SWIG(arg1,arg2,(arma::Row< unsigned long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  arma::Col< unsigned long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::set_col",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long >::set_col",3,"arma::Col< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_set_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_set_col",3,SWIGTYPE_p_arma__ColT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg__set_col__SWIG(arg1,arg2,(arma::Col< unsigned long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< unsigned long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::get_col",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_get_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_long_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< unsigned long > * resultptr = new arma::Col< unsigned long >((const arma::Col< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Row< unsigned long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::get_row",1,"arma::Mat< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_get_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_long_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< unsigned long > * resultptr = new arma::Row< unsigned long >((const arma::Row< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::println",1,"arma::Mat< unsigned long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_println",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_unsigned_SS_long_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::println",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_println",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ulmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long >::println(std::string const &)\n"
    "    arma::Mat< unsigned long >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_ulmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Row< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::addToEachRow",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::addToEachRow",2,"arma::Row< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg__addToEachRow__SWIG(arg1,(arma::Row< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  arma::Col< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::addToEachCol",1,"arma::Mat< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long >::addToEachCol",2,"arma::Col< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_unsigned_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_Sg__addToEachCol__SWIG(arg1,(arma::Col< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long >::data",1,"arma::Mat< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulmat_data",1,SWIGTYPE_p_arma__MatT_unsigned_long_t);
  }
  
  result = (unsigned long *)arma_Mat_Sl_unsigned_SS_long_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulmat(void *obj) {
arma::Mat< unsigned long > *arg1 = (arma::Mat< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulmat_methods[]= {
    { "__call", _wrap_ulmat___call},
    { "at", _wrap_ulmat_at},
    { "zeros", _wrap_ulmat_zeros},
    { "ones", _wrap_ulmat_ones},
    { "eye", _wrap_ulmat_eye},
    { "randu", _wrap_ulmat_randu},
    { "randn", _wrap_ulmat_randn},
    { "fill", _wrap_ulmat_fill},
    { "replace", _wrap_ulmat_replace},
    { "clamp", _wrap_ulmat_clamp},
    { "set_size", _wrap_ulmat_set_size},
    { "reshape", _wrap_ulmat_reshape},
    { "resize", _wrap_ulmat_resize},
    { "copy_size", _wrap_ulmat_copy_size},
    { "reset", _wrap_ulmat_reset},
    { "memptr", _wrap_ulmat_memptr},
    { "colptr", _wrap_ulmat_colptr},
    { "as_col", _wrap_ulmat_as_col},
    { "as_row", _wrap_ulmat_as_row},
    { "t", _wrap_ulmat_t},
    { "min", _wrap_ulmat_min},
    { "max", _wrap_ulmat_max},
    { "index_min", _wrap_ulmat_index_min},
    { "index_max", _wrap_ulmat_index_max},
    { "eval", _wrap_ulmat_eval},
    { "is_empty", _wrap_ulmat_is_empty},
    { "is_trimatu", _wrap_ulmat_is_trimatu},
    { "is_trimatl", _wrap_ulmat_is_trimatl},
    { "is_diagmat", _wrap_ulmat_is_diagmat},
    { "is_square", _wrap_ulmat_is_square},
    { "is_symmetric", _wrap_ulmat_is_symmetric},
    { "is_zero", _wrap_ulmat_is_zero},
    { "is_finite", _wrap_ulmat_is_finite},
    { "has_inf", _wrap_ulmat_has_inf},
    { "has_nan", _wrap_ulmat_has_nan},
    { "raw_print", _wrap_ulmat_raw_print},
    { "brief_print", _wrap_ulmat_brief_print},
    { "diag", _wrap_ulmat_diag},
    { "insert_rows", _wrap_ulmat_insert_rows},
    { "insert_cols", _wrap_ulmat_insert_cols},
    { "shed_row", _wrap_ulmat_shed_row},
    { "shed_rows", _wrap_ulmat_shed_rows},
    { "shed_col", _wrap_ulmat_shed_col},
    { "shed_cols", _wrap_ulmat_shed_cols},
    { "swap_rows", _wrap_ulmat_swap_rows},
    { "swap_cols", _wrap_ulmat_swap_cols},
    { "swap", _wrap_ulmat_swap},
    { "submat", _wrap_ulmat_submat},
    { "save", _wrap_ulmat_save},
    { "load", _wrap_ulmat_load},
    { "__getitem", _wrap_ulmat___getitem},
    { "__unm", _wrap_ulmat___unm},
    { "__add", _wrap_ulmat___add},
    { "__sub", _wrap_ulmat___sub},
    { "__mul", _wrap_ulmat___mul},
    { "__div", _wrap_ulmat___div},
    { "__setitem", _wrap_ulmat___setitem},
    { "copy", _wrap_ulmat_copy},
    { "rows", _wrap_ulmat_rows},
    { "cols", _wrap_ulmat_cols},
    { "set_row", _wrap_ulmat_set_row},
    { "set_col", _wrap_ulmat_set_col},
    { "get_col", _wrap_ulmat_get_col},
    { "get_row", _wrap_ulmat_get_row},
    { "println", _wrap_ulmat_println},
    { "addToEachRow", _wrap_ulmat_addToEachRow},
    { "addToEachCol", _wrap_ulmat_addToEachCol},
    { "data", _wrap_ulmat_data},
    {0,0}
};
static swig_lua_method swig_ulmat_meta[] = {
    { "__call", _wrap_ulmat___call},
    { "__getitem", _wrap_ulmat___getitem},
    { "__unm", _wrap_ulmat___unm},
    { "__add", _wrap_ulmat___add},
    { "__sub", _wrap_ulmat___sub},
    { "__mul", _wrap_ulmat___mul},
    { "__div", _wrap_ulmat___div},
    { "__setitem", _wrap_ulmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_ulmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulmat_Sf_SwigStatic = {
    "ulmat",
    swig_ulmat_Sf_SwigStatic_methods,
    swig_ulmat_Sf_SwigStatic_attributes,
    swig_ulmat_Sf_SwigStatic_constants,
    swig_ulmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulmat_bases[] = {0};
static const char *swig_ulmat_base_names[] = {0};
static swig_lua_class _wrap_class_ulmat = { "ulmat", "ulmat", &SWIGTYPE_p_arma__MatT_unsigned_long_t,_proxy__wrap_new_ulmat, swig_delete_ulmat, swig_ulmat_methods, swig_ulmat_attributes, &swig_ulmat_Sf_SwigStatic, swig_ulmat_meta, swig_ulmat_bases, swig_ulmat_base_names };

static int _wrap_new_llmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::Mat",0,0)
  result = (arma::Mat< long long > *)new arma::Mat< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< long long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< long long >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< long long > *)new arma::Mat< long long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = 0 ;
  arma::Mat< long long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< long long >::Mat",1,"arma::Mat< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("new_llmat",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arma::Mat< long long > *)new arma::Mat< long long >((arma::Mat< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_llmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_llmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_llmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_llmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::Mat()\n"
    "    arma::Mat< long long >::Mat(size_t,size_t)\n"
    "    arma::Mat< long long >::Mat(arma::Mat< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator ()",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___call",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::at",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_at",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long long *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::zeros",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_zeros",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::zeros",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_zeros",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_llmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::zeros()\n"
    "    arma::Mat< long long >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::ones",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_ones",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::ones",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_ones",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_llmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::ones()\n"
    "    arma::Mat< long long >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::eye",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_eye",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::eye",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_eye",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_llmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::eye()\n"
    "    arma::Mat< long long >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::randu",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_randu",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::randu",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_randu",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_llmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::randu()\n"
    "    arma::Mat< long long >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::randn",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_randn",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::randn",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_randn",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_llmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::randn()\n"
    "    arma::Mat< long long >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::fill",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::fill",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_fill",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::replace",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::replace",2,"long long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::replace",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_replace",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::clamp",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::clamp",2,"long long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::clamp",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_clamp",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::set_size",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_set_size",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::reshape",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_reshape",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::resize",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_resize",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::copy_size",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::copy_size",2,"arma::Mat< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_copy_size",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_copy_size",2,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->copy_size((arma::Mat< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::reset",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_reset",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::memptr",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_memptr",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (long long *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::colptr",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_colptr",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  SwigValueWrapper< arma::Col< long long > > result;
  
  SWIG_check_num_args("arma::Mat< long long >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::as_col",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_as_col",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< long long > * resultptr = new arma::Col< long long >((const arma::Col< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  SwigValueWrapper< arma::Row< long long > > result;
  
  SWIG_check_num_args("arma::Mat< long long >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::as_row",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_as_row",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< long long > * resultptr = new arma::Row< long long >((const arma::Row< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::t",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_t",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("arma::Mat< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::min",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_min",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("arma::Mat< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::max",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_max",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long long >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::index_min",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_index_min",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long long >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::index_max",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_index_max",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::eval",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_eval",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_empty",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_empty",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_trimatu",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_trimatl",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_diagmat",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_square",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_square",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_symmetric",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_zero",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_zero",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::is_finite",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_is_finite",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::has_inf",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_has_inf",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< long long >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::has_nan",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_has_nan",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::raw_print",1,"arma::Mat< long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long long >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_raw_print",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::raw_print",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_raw_print",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::raw_print(std::string const &)\n"
    "    arma::Mat< long long >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::brief_print",1,"arma::Mat< long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long long >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_brief_print",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::brief_print",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_brief_print",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::brief_print(std::string const &)\n"
    "    arma::Mat< long long >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< long long > > result;
  
  SWIG_check_num_args("arma::Mat< long long >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::diag",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_diag",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< long long > * resultptr = new arma::Col< long long >((const arma::Col< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  SwigValueWrapper< arma::Col< long long > > result;
  
  SWIG_check_num_args("arma::Mat< long long >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::diag",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_diag",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< long long > * resultptr = new arma::Col< long long >((const arma::Col< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::diag(size_t)\n"
    "    arma::Mat< long long >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::insert_rows",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_insert_rows",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::insert_cols",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_insert_cols",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::shed_row",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_shed_row",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::shed_rows",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_shed_rows",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::shed_col",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_shed_col",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::shed_cols",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_shed_cols",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::swap_rows",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_swap_rows",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< long long >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::swap_cols",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_swap_cols",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::swap",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::swap",2,"arma::Mat< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_swap",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_swap",2,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::submat",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< long long >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< long long >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< long long >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_submat",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::save",1,"arma::Mat< long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long long >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_save",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::load",1,"arma::Mat< long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long long >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_load",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< long long > > result;
  
  SWIG_check_num_args("arma::Mat< long long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::__getitem__",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___getitem",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_long_SS_long_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< long long > * resultptr = new MatrixView< long long >((const MatrixView< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator -",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___unm",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > *arg2 = 0 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator +",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator +",2,"arma::Mat< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___add",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___add",2,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< long long > const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > *arg2 = 0 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator -",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator -",2,"arma::Mat< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___sub",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___sub",2,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< long long > const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > *arg2 = 0 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator *",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator *",2,"arma::Mat< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___mul",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___mul",2,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< long long > const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > *arg2 = 0 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator /",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator /",2,"arma::Mat< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___div",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___div",2,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< long long > const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator +",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator +",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___add",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Sa___SWIG_1(arg1,(long long const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_llmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::operator +(arma::Mat< long long > const &)\n"
    "    arma::Mat< long long >::operator +(long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator -",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator -",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___sub",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Ss___SWIG_1(arg1,(long long const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_llmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::operator -(arma::Mat< long long > const &)\n"
    "    arma::Mat< long long >::operator -(long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator *",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator *",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___mul",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Sm___SWIG_1(arg1,(long long const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_llmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::operator *(arma::Mat< long long > const &)\n"
    "    arma::Mat< long long >::operator *(long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  arma::Mat< long long > result;
  
  SWIG_check_num_args("arma::Mat< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::operator /",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::operator /",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___div",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_long_SS_long_Sg__operator_Sd___SWIG_1(arg1,(long long const &)*arg2);
  {
    arma::Mat< long long > * resultptr = new arma::Mat< long long >((const arma::Mat< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_llmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::operator /(arma::Mat< long long > const &)\n"
    "    arma::Mat< long long >::operator /(long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  arma::Col< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::__setitem__",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long long >::__setitem__",3,"arma::Col< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___setitem",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_long_long_t,0))){
    SWIG_fail_ptr("llmat___setitem",3,SWIGTYPE_p_arma__ColT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  arma::Row< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::__setitem__",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long long >::__setitem__",3,"arma::Row< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat___setitem",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_long_long_t,0))){
    SWIG_fail_ptr("llmat___setitem",3,SWIGTYPE_p_arma__RowT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_long_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_llmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_long_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_llmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::__setitem__(size_t,arma::Col< long long > const &)\n"
    "    arma::Mat< long long >::__setitem__(size_t,arma::Row< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Mat< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::copy",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::copy",2,"arma::Mat< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_copy",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_copy",2,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg__copy__SWIG(arg1,(arma::Mat< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long long >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::rows",1,"arma::Mat< long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_rows",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = arma_Mat_Sl_long_SS_long_Sg__rows__SWIG((arma::Mat< long long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< long long >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::cols",1,"arma::Mat< long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_cols",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = arma_Mat_Sl_long_SS_long_Sg__cols__SWIG((arma::Mat< long long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  arma::Row< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::set_row",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long long >::set_row",3,"arma::Row< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_set_row",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_long_long_t,0))){
    SWIG_fail_ptr("llmat_set_row",3,SWIGTYPE_p_arma__RowT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg__set_row__SWIG(arg1,arg2,(arma::Row< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  arma::Col< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::set_col",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< long long >::set_col",3,"arma::Col< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_set_col",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_long_long_t,0))){
    SWIG_fail_ptr("llmat_set_col",3,SWIGTYPE_p_arma__ColT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg__set_col__SWIG(arg1,arg2,(arma::Col< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< long long > > result;
  
  SWIG_check_num_args("arma::Mat< long long >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::get_col",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_get_col",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_long_SS_long_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< long long > * resultptr = new arma::Col< long long >((const arma::Col< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Row< long long > > result;
  
  SWIG_check_num_args("arma::Mat< long long >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::get_row",1,"arma::Mat< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< long long >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_get_row",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_long_SS_long_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< long long > * resultptr = new arma::Row< long long >((const arma::Row< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< long long >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::println",1,"arma::Mat< long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< long long >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_println",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_long_SS_long_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::println",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_println",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_llmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_llmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< long long >::println(std::string const &)\n"
    "    arma::Mat< long long >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_llmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Row< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::addToEachRow",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::addToEachRow",2,"arma::Row< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_long_long_t,0))){
    SWIG_fail_ptr("llmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg__addToEachRow__SWIG(arg1,(arma::Row< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  arma::Col< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::addToEachCol",1,"arma::Mat< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< long long >::addToEachCol",2,"arma::Col< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_long_long_t,0))){
    SWIG_fail_ptr("llmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_long_long_t);
  }
  
  arma_Mat_Sl_long_SS_long_Sg__addToEachCol__SWIG(arg1,(arma::Col< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< long long > *arg1 = (arma::Mat< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< long long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< long long >::data",1,"arma::Mat< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_long_long_t,0))){
    SWIG_fail_ptr("llmat_data",1,SWIGTYPE_p_arma__MatT_long_long_t);
  }
  
  result = (long long *)arma_Mat_Sl_long_SS_long_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llmat(void *obj) {
arma::Mat< long long > *arg1 = (arma::Mat< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llmat_methods[]= {
    { "__call", _wrap_llmat___call},
    { "at", _wrap_llmat_at},
    { "zeros", _wrap_llmat_zeros},
    { "ones", _wrap_llmat_ones},
    { "eye", _wrap_llmat_eye},
    { "randu", _wrap_llmat_randu},
    { "randn", _wrap_llmat_randn},
    { "fill", _wrap_llmat_fill},
    { "replace", _wrap_llmat_replace},
    { "clamp", _wrap_llmat_clamp},
    { "set_size", _wrap_llmat_set_size},
    { "reshape", _wrap_llmat_reshape},
    { "resize", _wrap_llmat_resize},
    { "copy_size", _wrap_llmat_copy_size},
    { "reset", _wrap_llmat_reset},
    { "memptr", _wrap_llmat_memptr},
    { "colptr", _wrap_llmat_colptr},
    { "as_col", _wrap_llmat_as_col},
    { "as_row", _wrap_llmat_as_row},
    { "t", _wrap_llmat_t},
    { "min", _wrap_llmat_min},
    { "max", _wrap_llmat_max},
    { "index_min", _wrap_llmat_index_min},
    { "index_max", _wrap_llmat_index_max},
    { "eval", _wrap_llmat_eval},
    { "is_empty", _wrap_llmat_is_empty},
    { "is_trimatu", _wrap_llmat_is_trimatu},
    { "is_trimatl", _wrap_llmat_is_trimatl},
    { "is_diagmat", _wrap_llmat_is_diagmat},
    { "is_square", _wrap_llmat_is_square},
    { "is_symmetric", _wrap_llmat_is_symmetric},
    { "is_zero", _wrap_llmat_is_zero},
    { "is_finite", _wrap_llmat_is_finite},
    { "has_inf", _wrap_llmat_has_inf},
    { "has_nan", _wrap_llmat_has_nan},
    { "raw_print", _wrap_llmat_raw_print},
    { "brief_print", _wrap_llmat_brief_print},
    { "diag", _wrap_llmat_diag},
    { "insert_rows", _wrap_llmat_insert_rows},
    { "insert_cols", _wrap_llmat_insert_cols},
    { "shed_row", _wrap_llmat_shed_row},
    { "shed_rows", _wrap_llmat_shed_rows},
    { "shed_col", _wrap_llmat_shed_col},
    { "shed_cols", _wrap_llmat_shed_cols},
    { "swap_rows", _wrap_llmat_swap_rows},
    { "swap_cols", _wrap_llmat_swap_cols},
    { "swap", _wrap_llmat_swap},
    { "submat", _wrap_llmat_submat},
    { "save", _wrap_llmat_save},
    { "load", _wrap_llmat_load},
    { "__getitem", _wrap_llmat___getitem},
    { "__unm", _wrap_llmat___unm},
    { "__add", _wrap_llmat___add},
    { "__sub", _wrap_llmat___sub},
    { "__mul", _wrap_llmat___mul},
    { "__div", _wrap_llmat___div},
    { "__setitem", _wrap_llmat___setitem},
    { "copy", _wrap_llmat_copy},
    { "rows", _wrap_llmat_rows},
    { "cols", _wrap_llmat_cols},
    { "set_row", _wrap_llmat_set_row},
    { "set_col", _wrap_llmat_set_col},
    { "get_col", _wrap_llmat_get_col},
    { "get_row", _wrap_llmat_get_row},
    { "println", _wrap_llmat_println},
    { "addToEachRow", _wrap_llmat_addToEachRow},
    { "addToEachCol", _wrap_llmat_addToEachCol},
    { "data", _wrap_llmat_data},
    {0,0}
};
static swig_lua_method swig_llmat_meta[] = {
    { "__call", _wrap_llmat___call},
    { "__getitem", _wrap_llmat___getitem},
    { "__unm", _wrap_llmat___unm},
    { "__add", _wrap_llmat___add},
    { "__sub", _wrap_llmat___sub},
    { "__mul", _wrap_llmat___mul},
    { "__div", _wrap_llmat___div},
    { "__setitem", _wrap_llmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_llmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llmat_Sf_SwigStatic = {
    "llmat",
    swig_llmat_Sf_SwigStatic_methods,
    swig_llmat_Sf_SwigStatic_attributes,
    swig_llmat_Sf_SwigStatic_constants,
    swig_llmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llmat_bases[] = {0};
static const char *swig_llmat_base_names[] = {0};
static swig_lua_class _wrap_class_llmat = { "llmat", "llmat", &SWIGTYPE_p_arma__MatT_long_long_t,_proxy__wrap_new_llmat, swig_delete_llmat, swig_llmat_methods, swig_llmat_attributes, &swig_llmat_Sf_SwigStatic, swig_llmat_meta, swig_llmat_bases, swig_llmat_base_names };

static int _wrap_new_ullmat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::Mat",0,0)
  result = (arma::Mat< unsigned long long > *)new arma::Mat< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullmat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  arma::Mat< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::Mat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::Mat",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::Mat",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arma::Mat< unsigned long long > *)new arma::Mat< unsigned long long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullmat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = 0 ;
  arma::Mat< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::Mat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::Mat",1,"arma::Mat< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_ullmat",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arma::Mat< unsigned long long > *)new arma::Mat< unsigned long long >((arma::Mat< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullmat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ullmat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ullmat__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ullmat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ullmat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::Mat()\n"
    "    arma::Mat< unsigned long long >::Mat(size_t,size_t)\n"
    "    arma::Mat< unsigned long long >::Mat(arma::Mat< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator ()",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___call",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::at",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_at",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long long *) &(arg1)->at(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::zeros",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_zeros",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::zeros",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::zeros",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::zeros",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::zeros",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_zeros",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->zeros(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_zeros(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_zeros__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ullmat_zeros__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::zeros()\n"
    "    arma::Mat< unsigned long long >::zeros(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::ones",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_ones",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::ones",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::ones",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::ones",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_ones",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_ones__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ullmat_ones__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::ones()\n"
    "    arma::Mat< unsigned long long >::ones(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_eye__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::eye",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_eye",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->eye();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_eye__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::eye",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::eye",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::eye",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::eye",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_eye",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->eye(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_eye(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_eye__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ullmat_eye__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_eye'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::eye()\n"
    "    arma::Mat< unsigned long long >::eye(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::randu",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_randu",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::randu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::randu",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::randu",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::randu",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_randu",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randu(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_randu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_randu__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ullmat_randu__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::randu()\n"
    "    arma::Mat< unsigned long long >::randu(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::randn",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_randn",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::randn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::randn",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::randn",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::randn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_randn",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->randn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_randn(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_randn__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ullmat_randn__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::randn()\n"
    "    arma::Mat< unsigned long long >::randn(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::fill",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::fill",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_fill",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::replace",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::replace",2,"unsigned long long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::replace",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_replace",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::clamp",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::clamp",2,"unsigned long long const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::clamp",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_clamp",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_size",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_size",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_size",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_set_size",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_size(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_reshape(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::reshape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::reshape",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::reshape",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::reshape",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_reshape",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->reshape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::resize",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_resize",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::copy_size",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::copy_size",2,"arma::Mat< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_copy_size",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_copy_size",2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->copy_size((arma::Mat< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::reset",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_reset",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::memptr",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_memptr",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_colptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::colptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::colptr",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::colptr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_colptr",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long *)(arg1)->colptr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_as_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  SwigValueWrapper< arma::Col< unsigned long long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::as_col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::as_col",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_as_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arg1)->as_col();
  {
    arma::Col< unsigned long long > * resultptr = new arma::Col< unsigned long long >((const arma::Col< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_as_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  SwigValueWrapper< arma::Row< unsigned long long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::as_row",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_as_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arg1)->as_row();
  {
    arma::Row< unsigned long long > * resultptr = new arma::Row< unsigned long long >((const arma::Row< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_t(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::t",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_t",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arg1)->t();
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::min",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_min",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::max",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_max",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_index_min(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::index_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::index_min",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_index_min",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arg1)->index_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_index_max(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::index_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::index_max",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_index_max",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arg1)->index_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_eval(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::eval",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_eval",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arg1)->eval();
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_empty",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_empty",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_trimatu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_trimatu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_trimatu",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_trimatu",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_trimatu();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_trimatl(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_trimatl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_trimatl",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_trimatl",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_trimatl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_diagmat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_diagmat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_diagmat",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_diagmat",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_diagmat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_square(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_square",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_square",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_square();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_symmetric(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_symmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_symmetric",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_symmetric",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_symmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_zero",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_zero",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_is_finite(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::is_finite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::is_finite",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_is_finite",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->is_finite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_has_inf(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::has_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::has_inf",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_has_inf",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->has_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_has_nan(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::has_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::has_nan",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_has_nan",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->has_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::raw_print",1,"arma::Mat< unsigned long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_raw_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::raw_print",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_raw_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::raw_print(std::string const &)\n"
    "    arma::Mat< unsigned long long >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::brief_print",1,"arma::Mat< unsigned long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_brief_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::brief_print",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_brief_print",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::brief_print(std::string const &)\n"
    "    arma::Mat< unsigned long long >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< unsigned long long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::diag",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::diag",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_diag",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->diag(arg2);
  {
    arma::Col< unsigned long long > * resultptr = new arma::Col< unsigned long long >((const arma::Col< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  SwigValueWrapper< arma::Col< unsigned long long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::diag",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_diag",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (arg1)->diag();
  {
    arma::Col< unsigned long long > * resultptr = new arma::Col< unsigned long long >((const arma::Col< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_diag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat_diag__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::diag(size_t)\n"
    "    arma::Mat< unsigned long long >::diag()\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_insert_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::insert_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::insert_rows",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::insert_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::insert_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_insert_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_insert_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::insert_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::insert_cols",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::insert_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::insert_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_insert_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_shed_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::shed_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_row",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_shed_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_shed_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::shed_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_rows",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_shed_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_shed_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::shed_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_col",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_shed_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->shed_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_shed_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::shed_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_cols",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::shed_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_shed_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->shed_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_swap_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::swap_rows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap_rows",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap_rows",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap_rows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_swap_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_rows(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_swap_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::swap_cols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap_cols",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap_cols",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap_cols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_swap_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->swap_cols(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_swap(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::swap",2,"arma::Mat< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_swap",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_swap",2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_submat(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::submat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::submat",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::submat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::submat",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("arma::Mat< unsigned long long >::submat",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("arma::Mat< unsigned long long >::submat",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_submat",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->submat(arg2,arg3,arg4,arg5);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_save(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::save",1,"arma::Mat< unsigned long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_save",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_load(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::load",1,"arma::Mat< unsigned long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_load",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< MatrixView< unsigned long long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::__getitem__",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___getitem",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg____getitem____SWIG(arg1,arg2);
  {
    MatrixView< unsigned long long > * resultptr = new MatrixView< unsigned long long >((const MatrixView< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixViewT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator -",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___unm",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > *arg2 = 0 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator +",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator +",2,"arma::Mat< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___add",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___add",2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sa___SWIG_0(arg1,(arma::Mat< unsigned long long > const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > *arg2 = 0 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator -",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator -",2,"arma::Mat< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___sub",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___sub",2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Ss___SWIG_0(arg1,(arma::Mat< unsigned long long > const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > *arg2 = 0 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator *",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator *",2,"arma::Mat< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___mul",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___mul",2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sm___SWIG_0(arg1,(arma::Mat< unsigned long long > const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > *arg2 = 0 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator /",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator /",2,"arma::Mat< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___div",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___div",2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sd___SWIG_0(arg1,(arma::Mat< unsigned long long > const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator +",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator +",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___add",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sa___SWIG_1(arg1,(unsigned long long const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ullmat___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::operator +(arma::Mat< unsigned long long > const &)\n"
    "    arma::Mat< unsigned long long >::operator +(unsigned long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator -",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator -",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___sub",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Ss___SWIG_1(arg1,(unsigned long long const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ullmat___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::operator -(arma::Mat< unsigned long long > const &)\n"
    "    arma::Mat< unsigned long long >::operator -(unsigned long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator *",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator *",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___mul",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sm___SWIG_1(arg1,(unsigned long long const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ullmat___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::operator *(arma::Mat< unsigned long long > const &)\n"
    "    arma::Mat< unsigned long long >::operator *(unsigned long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  arma::Mat< unsigned long long > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator /",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::operator /",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___div",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__operator_Sd___SWIG_1(arg1,(unsigned long long const &)*arg2);
  {
    arma::Mat< unsigned long long > * resultptr = new arma::Mat< unsigned long long >((const arma::Mat< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ullmat___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::operator /(arma::Mat< unsigned long long > const &)\n"
    "    arma::Mat< unsigned long long >::operator /(unsigned long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  arma::Col< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::__setitem__",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::__setitem__",3,"arma::Col< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___setitem",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___setitem",3,SWIGTYPE_p_arma__ColT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg____setitem____SWIG_0(arg1,arg2,(arma::Col< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  arma::Row< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::__setitem__",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::__setitem__",3,"arma::Row< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___setitem",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat___setitem",3,SWIGTYPE_p_arma__RowT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg____setitem____SWIG_1(arg1,arg2,(arma::Row< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__ColT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ullmat___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_arma__RowT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ullmat___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::__setitem__(size_t,arma::Col< unsigned long long > const &)\n"
    "    arma::Mat< unsigned long long >::__setitem__(size_t,arma::Row< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_copy(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Mat< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::copy",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::copy",2,"arma::Mat< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_copy",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_copy",2,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__copy__SWIG(arg1,(arma::Mat< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_rows(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::rows",1,"arma::Mat< unsigned long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_rows",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__rows__SWIG((arma::Mat< unsigned long long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_cols(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::cols",1,"arma::Mat< unsigned long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_cols",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__cols__SWIG((arma::Mat< unsigned long long > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_set_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  arma::Row< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_row",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_row",3,"arma::Row< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_set_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__RowT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_set_row",3,SWIGTYPE_p_arma__RowT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__set_row__SWIG(arg1,arg2,(arma::Row< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_set_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  arma::Col< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_col",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Mat< unsigned long long >::set_col",3,"arma::Col< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_set_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_arma__ColT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_set_col",3,SWIGTYPE_p_arma__ColT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__set_col__SWIG(arg1,arg2,(arma::Col< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_get_col(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Col< unsigned long long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::get_col",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_get_col",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__get_col__SWIG(arg1,arg2);
  {
    arma::Col< unsigned long long > * resultptr = new arma::Col< unsigned long long >((const arma::Col< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_get_row(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< arma::Row< unsigned long long > > result;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::get_row",1,"arma::Mat< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_get_row",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__get_row__SWIG(arg1,arg2);
  {
    arma::Row< unsigned long long > * resultptr = new arma::Row< unsigned long long >((const arma::Row< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::println",1,"arma::Mat< unsigned long long > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_println",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::println",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_println",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ullmat_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__MatT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullmat_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullmat_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Mat< unsigned long long >::println(std::string const &)\n"
    "    arma::Mat< unsigned long long >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_ullmat_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Row< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::addToEachRow",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::addToEachRow",2,"arma::Row< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_addToEachRow",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_addToEachRow",2,SWIGTYPE_p_arma__RowT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__addToEachRow__SWIG(arg1,(arma::Row< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_addToEachCol(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  arma::Col< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::addToEachCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::addToEachCol",1,"arma::Mat< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Mat< unsigned long long >::addToEachCol",2,"arma::Col< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_addToEachCol",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_addToEachCol",2,SWIGTYPE_p_arma__ColT_unsigned_long_long_t);
  }
  
  arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__addToEachCol__SWIG(arg1,(arma::Col< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullmat_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("arma::Mat< unsigned long long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Mat< unsigned long long >::data",1,"arma::Mat< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullmat_data",1,SWIGTYPE_p_arma__MatT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *)arma_Mat_Sl_unsigned_SS_long_SS_long_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullmat(void *obj) {
arma::Mat< unsigned long long > *arg1 = (arma::Mat< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullmat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullmat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullmat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullmat_methods[]= {
    { "__call", _wrap_ullmat___call},
    { "at", _wrap_ullmat_at},
    { "zeros", _wrap_ullmat_zeros},
    { "ones", _wrap_ullmat_ones},
    { "eye", _wrap_ullmat_eye},
    { "randu", _wrap_ullmat_randu},
    { "randn", _wrap_ullmat_randn},
    { "fill", _wrap_ullmat_fill},
    { "replace", _wrap_ullmat_replace},
    { "clamp", _wrap_ullmat_clamp},
    { "set_size", _wrap_ullmat_set_size},
    { "reshape", _wrap_ullmat_reshape},
    { "resize", _wrap_ullmat_resize},
    { "copy_size", _wrap_ullmat_copy_size},
    { "reset", _wrap_ullmat_reset},
    { "memptr", _wrap_ullmat_memptr},
    { "colptr", _wrap_ullmat_colptr},
    { "as_col", _wrap_ullmat_as_col},
    { "as_row", _wrap_ullmat_as_row},
    { "t", _wrap_ullmat_t},
    { "min", _wrap_ullmat_min},
    { "max", _wrap_ullmat_max},
    { "index_min", _wrap_ullmat_index_min},
    { "index_max", _wrap_ullmat_index_max},
    { "eval", _wrap_ullmat_eval},
    { "is_empty", _wrap_ullmat_is_empty},
    { "is_trimatu", _wrap_ullmat_is_trimatu},
    { "is_trimatl", _wrap_ullmat_is_trimatl},
    { "is_diagmat", _wrap_ullmat_is_diagmat},
    { "is_square", _wrap_ullmat_is_square},
    { "is_symmetric", _wrap_ullmat_is_symmetric},
    { "is_zero", _wrap_ullmat_is_zero},
    { "is_finite", _wrap_ullmat_is_finite},
    { "has_inf", _wrap_ullmat_has_inf},
    { "has_nan", _wrap_ullmat_has_nan},
    { "raw_print", _wrap_ullmat_raw_print},
    { "brief_print", _wrap_ullmat_brief_print},
    { "diag", _wrap_ullmat_diag},
    { "insert_rows", _wrap_ullmat_insert_rows},
    { "insert_cols", _wrap_ullmat_insert_cols},
    { "shed_row", _wrap_ullmat_shed_row},
    { "shed_rows", _wrap_ullmat_shed_rows},
    { "shed_col", _wrap_ullmat_shed_col},
    { "shed_cols", _wrap_ullmat_shed_cols},
    { "swap_rows", _wrap_ullmat_swap_rows},
    { "swap_cols", _wrap_ullmat_swap_cols},
    { "swap", _wrap_ullmat_swap},
    { "submat", _wrap_ullmat_submat},
    { "save", _wrap_ullmat_save},
    { "load", _wrap_ullmat_load},
    { "__getitem", _wrap_ullmat___getitem},
    { "__unm", _wrap_ullmat___unm},
    { "__add", _wrap_ullmat___add},
    { "__sub", _wrap_ullmat___sub},
    { "__mul", _wrap_ullmat___mul},
    { "__div", _wrap_ullmat___div},
    { "__setitem", _wrap_ullmat___setitem},
    { "copy", _wrap_ullmat_copy},
    { "rows", _wrap_ullmat_rows},
    { "cols", _wrap_ullmat_cols},
    { "set_row", _wrap_ullmat_set_row},
    { "set_col", _wrap_ullmat_set_col},
    { "get_col", _wrap_ullmat_get_col},
    { "get_row", _wrap_ullmat_get_row},
    { "println", _wrap_ullmat_println},
    { "addToEachRow", _wrap_ullmat_addToEachRow},
    { "addToEachCol", _wrap_ullmat_addToEachCol},
    { "data", _wrap_ullmat_data},
    {0,0}
};
static swig_lua_method swig_ullmat_meta[] = {
    { "__call", _wrap_ullmat___call},
    { "__getitem", _wrap_ullmat___getitem},
    { "__unm", _wrap_ullmat___unm},
    { "__add", _wrap_ullmat___add},
    { "__sub", _wrap_ullmat___sub},
    { "__mul", _wrap_ullmat___mul},
    { "__div", _wrap_ullmat___div},
    { "__setitem", _wrap_ullmat___setitem},
    {0,0}
};

static swig_lua_attribute swig_ullmat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullmat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullmat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullmat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullmat_Sf_SwigStatic = {
    "ullmat",
    swig_ullmat_Sf_SwigStatic_methods,
    swig_ullmat_Sf_SwigStatic_attributes,
    swig_ullmat_Sf_SwigStatic_constants,
    swig_ullmat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullmat_bases[] = {0};
static const char *swig_ullmat_base_names[] = {0};
static swig_lua_class _wrap_class_ullmat = { "ullmat", "ullmat", &SWIGTYPE_p_arma__MatT_unsigned_long_long_t,_proxy__wrap_new_ullmat, swig_delete_ullmat, swig_ullmat_methods, swig_ullmat_attributes, &swig_ullmat_Sf_SwigStatic, swig_ullmat_meta, swig_ullmat_bases, swig_ullmat_base_names };

static int _wrap_new_fvec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::Col",0,0)
  result = (arma::Col< float > *)new arma::Col< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fvec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Col< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::Col",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Col< float >::Col",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Col< float > *)new arma::Col< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fvec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = 0 ;
  arma::Col< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::Col",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Col< float >::Col",1,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("new_fvec",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = (arma::Col< float > *)new arma::Col< float >((arma::Col< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fvec(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_fvec__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_fvec__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_fvec__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fvec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::Col()\n"
    "    arma::Col< float >::Col(size_t)\n"
    "    arma::Col< float >::Col(arma::Col< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::at",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_at",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator ()",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___call",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("arma::Col< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::__getitem__",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___getitem",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)arma_Col_Sl_float_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Col< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::__setitem__",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Col< float >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___setitem",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arma_Col_Sl_float_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator -",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___unm",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = arma_Col_Sl_float_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  arma::Col< float > *arg2 = 0 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator +",1,"arma::Col< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< float >::operator +",2,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___add",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___add",2,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = arma_Col_Sl_float_Sg__operator_Sa___SWIG_0(arg1,(arma::Col< float > const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  arma::Col< float > *arg2 = 0 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator -",1,"arma::Col< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< float >::operator -",2,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___sub",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___sub",2,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = arma_Col_Sl_float_Sg__operator_Ss___SWIG_0(arg1,(arma::Col< float > const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  arma::Col< float > *arg2 = 0 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator *",1,"arma::Col< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< float >::operator *",2,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___mul",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___mul",2,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = arma_Col_Sl_float_Sg__operator_Sm___SWIG_0(arg1,(arma::Col< float > const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  arma::Col< float > *arg2 = 0 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator /",1,"arma::Col< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< float >::operator /",2,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___div",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___div",2,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = arma_Col_Sl_float_Sg__operator_Sd___SWIG_0(arg1,(arma::Col< float > const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator +",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___add",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_float_Sg__operator_Sa___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fvec___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::operator +(arma::Col< float > const &)\n"
    "    arma::Col< float >::operator +(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator -",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___sub",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_float_Sg__operator_Ss___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fvec___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::operator -(arma::Col< float > const &)\n"
    "    arma::Col< float >::operator -(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator *",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___mul",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_float_Sg__operator_Sm___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fvec___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::operator *(arma::Col< float > const &)\n"
    "    arma::Col< float >::operator *(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Col< float > result;
  
  SWIG_check_num_args("arma::Col< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::operator /",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec___div",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_float_Sg__operator_Sd___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Col< float > * resultptr = new arma::Col< float >((const arma::Col< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fvec___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::operator /(arma::Col< float > const &)\n"
    "    arma::Col< float >::operator /(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< float >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::println",1,"arma::Col< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< float >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_println",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Col_Sl_float_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::println",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_println",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  arma_Col_Sl_float_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fvec_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::println(std::string const &)\n"
    "    arma::Col< float >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::data",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_data",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = (float *)arma_Col_Sl_float_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Col< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::size",1,"arma::Col< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_size",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = ((arma::Col< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::zeros",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_zeros",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< float >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::zeros",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_zeros",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fvec_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::zeros()\n"
    "    arma::Col< float >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::ones",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_ones",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< float >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::ones",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_ones",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fvec_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::ones()\n"
    "    arma::Col< float >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::randu",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_randu",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< float >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::randu",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_randu",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fvec_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::randu()\n"
    "    arma::Col< float >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::randn",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_randn",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< float >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::randn",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_randn",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fvec_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::randn()\n"
    "    arma::Col< float >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("arma::Col< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::fill",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::fill",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_fill",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Col< float >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::replace",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::replace",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Col< float >::replace",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_replace",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Col< float >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::clamp",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::clamp",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Col< float >::clamp",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_clamp",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< float >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::set_size",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_set_size",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::resize",1,"arma::Col< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_resize",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  arma::Col< float > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::copy_size",1,"arma::Col< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< float >::copy_size",2,"arma::Col< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_copy_size",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_copy_size",2,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->copy_size((arma::Col< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::reset",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_reset",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< float >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::raw_print",1,"arma::Col< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< float >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_raw_print",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::raw_print",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_raw_print",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fvec_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::raw_print(std::string const &)\n"
    "    arma::Col< float >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< float >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::brief_print",1,"arma::Col< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< float >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_brief_print",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  
  SWIG_check_num_args("arma::Col< float >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::brief_print",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_brief_print",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fvec_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fvec_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_fvec_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fvec_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< float >::brief_print(std::string const &)\n"
    "    arma::Col< float >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_fvec_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< float > *arg1 = (arma::Col< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Col< float >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< float >::memptr",1,"arma::Col< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_float_t,0))){
    SWIG_fail_ptr("fvec_memptr",1,SWIGTYPE_p_arma__ColT_float_t);
  }
  
  result = (float *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fvec(void *obj) {
arma::Col< float > *arg1 = (arma::Col< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fvec(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fvec);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fvec_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_fvec_methods[]= {
    { "at", _wrap_fvec_at},
    { "__call", _wrap_fvec___call},
    { "__getitem", _wrap_fvec___getitem},
    { "__setitem", _wrap_fvec___setitem},
    { "__unm", _wrap_fvec___unm},
    { "__add", _wrap_fvec___add},
    { "__sub", _wrap_fvec___sub},
    { "__mul", _wrap_fvec___mul},
    { "__div", _wrap_fvec___div},
    { "println", _wrap_fvec_println},
    { "data", _wrap_fvec_data},
    { "size", _wrap_fvec_size},
    { "zeros", _wrap_fvec_zeros},
    { "ones", _wrap_fvec_ones},
    { "randu", _wrap_fvec_randu},
    { "randn", _wrap_fvec_randn},
    { "fill", _wrap_fvec_fill},
    { "replace", _wrap_fvec_replace},
    { "clamp", _wrap_fvec_clamp},
    { "set_size", _wrap_fvec_set_size},
    { "resize", _wrap_fvec_resize},
    { "copy_size", _wrap_fvec_copy_size},
    { "reset", _wrap_fvec_reset},
    { "raw_print", _wrap_fvec_raw_print},
    { "brief_print", _wrap_fvec_brief_print},
    { "memptr", _wrap_fvec_memptr},
    {0,0}
};
static swig_lua_method swig_fvec_meta[] = {
    { "__call", _wrap_fvec___call},
    { "__getitem", _wrap_fvec___getitem},
    { "__setitem", _wrap_fvec___setitem},
    { "__unm", _wrap_fvec___unm},
    { "__add", _wrap_fvec___add},
    { "__sub", _wrap_fvec___sub},
    { "__mul", _wrap_fvec___mul},
    { "__div", _wrap_fvec___div},
    {0,0}
};

static swig_lua_attribute swig_fvec_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fvec_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fvec_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fvec_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fvec_Sf_SwigStatic = {
    "fvec",
    swig_fvec_Sf_SwigStatic_methods,
    swig_fvec_Sf_SwigStatic_attributes,
    swig_fvec_Sf_SwigStatic_constants,
    swig_fvec_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fvec_bases[] = {0};
static const char *swig_fvec_base_names[] = {0};
static swig_lua_class _wrap_class_fvec = { "fvec", "fvec", &SWIGTYPE_p_arma__ColT_float_t,_proxy__wrap_new_fvec, swig_delete_fvec, swig_fvec_methods, swig_fvec_attributes, &swig_fvec_Sf_SwigStatic, swig_fvec_meta, swig_fvec_bases, swig_fvec_base_names };

static int _wrap_new_dvec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::Col",0,0)
  result = (arma::Col< double > *)new arma::Col< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dvec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Col< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::Col",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Col< double >::Col",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Col< double > *)new arma::Col< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dvec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = 0 ;
  arma::Col< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::Col",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Col< double >::Col",1,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("new_dvec",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = (arma::Col< double > *)new arma::Col< double >((arma::Col< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dvec(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_dvec__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_dvec__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_dvec__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_dvec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::Col()\n"
    "    arma::Col< double >::Col(size_t)\n"
    "    arma::Col< double >::Col(arma::Col< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::at",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_at",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator ()",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___call",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("arma::Col< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::__getitem__",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___getitem",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)arma_Col_Sl_double_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Col< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::__setitem__",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Col< double >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___setitem",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arma_Col_Sl_double_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator -",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___unm",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = arma_Col_Sl_double_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  arma::Col< double > *arg2 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator +",1,"arma::Col< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< double >::operator +",2,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___add",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___add",2,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = arma_Col_Sl_double_Sg__operator_Sa___SWIG_0(arg1,(arma::Col< double > const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  arma::Col< double > *arg2 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator -",1,"arma::Col< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< double >::operator -",2,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___sub",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___sub",2,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = arma_Col_Sl_double_Sg__operator_Ss___SWIG_0(arg1,(arma::Col< double > const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  arma::Col< double > *arg2 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator *",1,"arma::Col< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< double >::operator *",2,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___mul",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___mul",2,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = arma_Col_Sl_double_Sg__operator_Sm___SWIG_0(arg1,(arma::Col< double > const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  arma::Col< double > *arg2 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator /",1,"arma::Col< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< double >::operator /",2,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___div",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___div",2,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = arma_Col_Sl_double_Sg__operator_Sd___SWIG_0(arg1,(arma::Col< double > const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator +",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::operator +",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___add",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_double_Sg__operator_Sa___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dvec___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::operator +(arma::Col< double > const &)\n"
    "    arma::Col< double >::operator +(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator -",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::operator -",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___sub",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_double_Sg__operator_Ss___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dvec___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::operator -(arma::Col< double > const &)\n"
    "    arma::Col< double >::operator -(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator *",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::operator *",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___mul",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_double_Sg__operator_Sm___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dvec___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::operator *(arma::Col< double > const &)\n"
    "    arma::Col< double >::operator *(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("arma::Col< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::operator /",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::operator /",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec___div",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Col_Sl_double_Sg__operator_Sd___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dvec___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::operator /(arma::Col< double > const &)\n"
    "    arma::Col< double >::operator /(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< double >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::println",1,"arma::Col< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< double >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_println",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Col_Sl_double_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::println",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_println",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  arma_Col_Sl_double_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dvec_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::println(std::string const &)\n"
    "    arma::Col< double >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::data",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_data",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = (double *)arma_Col_Sl_double_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Col< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::size",1,"arma::Col< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_size",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = ((arma::Col< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::zeros",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_zeros",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< double >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::zeros",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_zeros",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dvec_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::zeros()\n"
    "    arma::Col< double >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::ones",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_ones",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< double >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::ones",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_ones",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dvec_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::ones()\n"
    "    arma::Col< double >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::randu",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_randu",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< double >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::randu",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_randu",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dvec_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::randu()\n"
    "    arma::Col< double >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::randn",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_randn",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< double >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::randn",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_randn",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dvec_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::randn()\n"
    "    arma::Col< double >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("arma::Col< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::fill",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::fill",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_fill",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Col< double >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::replace",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::replace",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Col< double >::replace",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_replace",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Col< double >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::clamp",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::clamp",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Col< double >::clamp",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_clamp",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< double >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::set_size",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_set_size",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::resize",1,"arma::Col< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_resize",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  arma::Col< double > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::copy_size",1,"arma::Col< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< double >::copy_size",2,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_copy_size",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_copy_size",2,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->copy_size((arma::Col< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::reset",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_reset",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< double >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::raw_print",1,"arma::Col< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< double >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_raw_print",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::raw_print",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_raw_print",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dvec_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::raw_print(std::string const &)\n"
    "    arma::Col< double >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< double >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::brief_print",1,"arma::Col< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< double >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_brief_print",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  
  SWIG_check_num_args("arma::Col< double >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::brief_print",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_brief_print",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dvec_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dvec_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_dvec_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dvec_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< double >::brief_print(std::string const &)\n"
    "    arma::Col< double >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_dvec_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = (arma::Col< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Col< double >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< double >::memptr",1,"arma::Col< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("dvec_memptr",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = (double *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_dvec(void *obj) {
arma::Col< double > *arg1 = (arma::Col< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_dvec(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_dvec);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_dvec_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_dvec_methods[]= {
    { "at", _wrap_dvec_at},
    { "__call", _wrap_dvec___call},
    { "__getitem", _wrap_dvec___getitem},
    { "__setitem", _wrap_dvec___setitem},
    { "__unm", _wrap_dvec___unm},
    { "__add", _wrap_dvec___add},
    { "__sub", _wrap_dvec___sub},
    { "__mul", _wrap_dvec___mul},
    { "__div", _wrap_dvec___div},
    { "println", _wrap_dvec_println},
    { "data", _wrap_dvec_data},
    { "size", _wrap_dvec_size},
    { "zeros", _wrap_dvec_zeros},
    { "ones", _wrap_dvec_ones},
    { "randu", _wrap_dvec_randu},
    { "randn", _wrap_dvec_randn},
    { "fill", _wrap_dvec_fill},
    { "replace", _wrap_dvec_replace},
    { "clamp", _wrap_dvec_clamp},
    { "set_size", _wrap_dvec_set_size},
    { "resize", _wrap_dvec_resize},
    { "copy_size", _wrap_dvec_copy_size},
    { "reset", _wrap_dvec_reset},
    { "raw_print", _wrap_dvec_raw_print},
    { "brief_print", _wrap_dvec_brief_print},
    { "memptr", _wrap_dvec_memptr},
    {0,0}
};
static swig_lua_method swig_dvec_meta[] = {
    { "__call", _wrap_dvec___call},
    { "__getitem", _wrap_dvec___getitem},
    { "__setitem", _wrap_dvec___setitem},
    { "__unm", _wrap_dvec___unm},
    { "__add", _wrap_dvec___add},
    { "__sub", _wrap_dvec___sub},
    { "__mul", _wrap_dvec___mul},
    { "__div", _wrap_dvec___div},
    {0,0}
};

static swig_lua_attribute swig_dvec_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_dvec_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_dvec_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_dvec_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_dvec_Sf_SwigStatic = {
    "dvec",
    swig_dvec_Sf_SwigStatic_methods,
    swig_dvec_Sf_SwigStatic_attributes,
    swig_dvec_Sf_SwigStatic_constants,
    swig_dvec_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_dvec_bases[] = {0};
static const char *swig_dvec_base_names[] = {0};
static swig_lua_class _wrap_class_dvec = { "dvec", "dvec", &SWIGTYPE_p_arma__ColT_double_t,_proxy__wrap_new_dvec, swig_delete_dvec, swig_dvec_methods, swig_dvec_attributes, &swig_dvec_Sf_SwigStatic, swig_dvec_meta, swig_dvec_bases, swig_dvec_base_names };

static int _wrap_new_cfvec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::Col",0,0)
  result = (arma::Col< std::complex< float > > *)new arma::Col< std::complex< float > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfvec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Col< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::Col",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::Col",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Col< std::complex< float > > *)new arma::Col< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfvec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = 0 ;
  arma::Col< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::Col",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::Col",1,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_cfvec",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = (arma::Col< std::complex< float > > *)new arma::Col< std::complex< float > >((arma::Col< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfvec(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_cfvec__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cfvec__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_cfvec__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cfvec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::Col()\n"
    "    arma::Col< std::complex< float > >::Col(size_t)\n"
    "    arma::Col< std::complex< float > >::Col(arma::Col< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::at",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_at",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator ()",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___call",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::__getitem__",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___getitem",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::__setitem__",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Col< std::complex< float > >::__setitem__",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___setitem",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  arma_Col_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator -",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___unm",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG(arg1);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator +",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator +",2,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___add",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___add",2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_0(arg1,(arma::Col< std::complex< float > > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator -",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator -",2,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___sub",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___sub",2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_0(arg1,(arma::Col< std::complex< float > > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator *",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator *",2,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___mul",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___mul",2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_0(arg1,(arma::Col< std::complex< float > > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator /",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator /",2,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___div",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___div",2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_0(arg1,(arma::Col< std::complex< float > > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator +",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator +",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___add",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::operator +(arma::Col< std::complex< float > > const &)\n"
    "    arma::Col< std::complex< float > >::operator +(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator -",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator -",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___sub",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::operator -(arma::Col< std::complex< float > > const &)\n"
    "    arma::Col< std::complex< float > >::operator -(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator *",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator *",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___mul",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::operator *(arma::Col< std::complex< float > > const &)\n"
    "    arma::Col< std::complex< float > >::operator *(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Col< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator /",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::operator /",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec___div",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Col< std::complex< float > > * resultptr = new arma::Col< std::complex< float > >((const arma::Col< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfvec___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::operator /(arma::Col< std::complex< float > > const &)\n"
    "    arma::Col< std::complex< float > >::operator /(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::println",1,"arma::Col< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_println",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Col_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::println",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_println",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  arma_Col_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfvec_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfvec_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::println(std::string const &)\n"
    "    arma::Col< std::complex< float > >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::data",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_data",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)arma_Col_Sl_std_complex_Sl_float_Sg__Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::size",1,"arma::Col< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_size",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = ((arma::Col< std::complex< float > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::zeros",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_zeros",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::zeros",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_zeros",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfvec_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfvec_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::zeros()\n"
    "    arma::Col< std::complex< float > >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::ones",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_ones",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::ones",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_ones",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfvec_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfvec_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::ones()\n"
    "    arma::Col< std::complex< float > >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::randu",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_randu",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::randu",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_randu",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfvec_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfvec_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::randu()\n"
    "    arma::Col< std::complex< float > >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::randn",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_randn",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::randn",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_randn",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfvec_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfvec_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::randn()\n"
    "    arma::Col< std::complex< float > >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::fill",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::fill",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_fill",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp2 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::replace",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::replace",2,"std::complex< float > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Col< std::complex< float > >::replace",3,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_replace",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec_replace",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec_replace",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp2 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::clamp",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::clamp",2,"std::complex< float > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Col< std::complex< float > >::clamp",3,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_clamp",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec_clamp",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfvec_clamp",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::set_size",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_set_size",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::resize",1,"arma::Col< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_resize",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  arma::Col< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::copy_size",1,"arma::Col< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::copy_size",2,"arma::Col< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_copy_size",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_copy_size",2,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->copy_size((arma::Col< std::complex< float > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::reset",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_reset",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::raw_print",1,"arma::Col< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_raw_print",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::raw_print",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_raw_print",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfvec_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfvec_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::raw_print(std::string const &)\n"
    "    arma::Col< std::complex< float > >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::brief_print",1,"arma::Col< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< std::complex< float > >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_brief_print",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::brief_print",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_brief_print",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfvec_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfvec_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfvec_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfvec_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< float > >::brief_print(std::string const &)\n"
    "    arma::Col< std::complex< float > >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cfvec_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< float > >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< float > >::memptr",1,"arma::Col< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfvec_memptr",1,SWIGTYPE_p_arma__ColT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cfvec(void *obj) {
arma::Col< std::complex< float > > *arg1 = (arma::Col< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cfvec(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cfvec);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cfvec_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cfvec_methods[]= {
    { "at", _wrap_cfvec_at},
    { "__call", _wrap_cfvec___call},
    { "__getitem", _wrap_cfvec___getitem},
    { "__setitem", _wrap_cfvec___setitem},
    { "__unm", _wrap_cfvec___unm},
    { "__add", _wrap_cfvec___add},
    { "__sub", _wrap_cfvec___sub},
    { "__mul", _wrap_cfvec___mul},
    { "__div", _wrap_cfvec___div},
    { "println", _wrap_cfvec_println},
    { "data", _wrap_cfvec_data},
    { "size", _wrap_cfvec_size},
    { "zeros", _wrap_cfvec_zeros},
    { "ones", _wrap_cfvec_ones},
    { "randu", _wrap_cfvec_randu},
    { "randn", _wrap_cfvec_randn},
    { "fill", _wrap_cfvec_fill},
    { "replace", _wrap_cfvec_replace},
    { "clamp", _wrap_cfvec_clamp},
    { "set_size", _wrap_cfvec_set_size},
    { "resize", _wrap_cfvec_resize},
    { "copy_size", _wrap_cfvec_copy_size},
    { "reset", _wrap_cfvec_reset},
    { "raw_print", _wrap_cfvec_raw_print},
    { "brief_print", _wrap_cfvec_brief_print},
    { "memptr", _wrap_cfvec_memptr},
    {0,0}
};
static swig_lua_method swig_cfvec_meta[] = {
    { "__call", _wrap_cfvec___call},
    { "__getitem", _wrap_cfvec___getitem},
    { "__setitem", _wrap_cfvec___setitem},
    { "__unm", _wrap_cfvec___unm},
    { "__add", _wrap_cfvec___add},
    { "__sub", _wrap_cfvec___sub},
    { "__mul", _wrap_cfvec___mul},
    { "__div", _wrap_cfvec___div},
    {0,0}
};

static swig_lua_attribute swig_cfvec_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cfvec_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cfvec_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cfvec_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cfvec_Sf_SwigStatic = {
    "cfvec",
    swig_cfvec_Sf_SwigStatic_methods,
    swig_cfvec_Sf_SwigStatic_attributes,
    swig_cfvec_Sf_SwigStatic_constants,
    swig_cfvec_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cfvec_bases[] = {0};
static const char *swig_cfvec_base_names[] = {0};
static swig_lua_class _wrap_class_cfvec = { "cfvec", "cfvec", &SWIGTYPE_p_arma__ColT_std__complexT_float_t_t,_proxy__wrap_new_cfvec, swig_delete_cfvec, swig_cfvec_methods, swig_cfvec_attributes, &swig_cfvec_Sf_SwigStatic, swig_cfvec_meta, swig_cfvec_bases, swig_cfvec_base_names };

static int _wrap_new_cxvec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::Col",0,0)
  result = (arma::Col< std::complex< double > > *)new arma::Col< std::complex< double > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxvec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Col< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::Col",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::Col",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Col< std::complex< double > > *)new arma::Col< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxvec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = 0 ;
  arma::Col< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::Col",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::Col",1,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_cxvec",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = (arma::Col< std::complex< double > > *)new arma::Col< std::complex< double > >((arma::Col< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxvec(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_cxvec__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cxvec__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_cxvec__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cxvec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::Col()\n"
    "    arma::Col< std::complex< double > >::Col(size_t)\n"
    "    arma::Col< std::complex< double > >::Col(arma::Col< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::at",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_at",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator ()",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___call",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::__getitem__",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___getitem",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::__setitem__",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Col< std::complex< double > >::__setitem__",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___setitem",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  arma_Col_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator -",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___unm",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG(arg1);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator +",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator +",2,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___add",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___add",2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_0(arg1,(arma::Col< std::complex< double > > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator -",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator -",2,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___sub",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___sub",2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_0(arg1,(arma::Col< std::complex< double > > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator *",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator *",2,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___mul",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___mul",2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_0(arg1,(arma::Col< std::complex< double > > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator /",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator /",2,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___div",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___div",2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_0(arg1,(arma::Col< std::complex< double > > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator +",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator +",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___add",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::operator +(arma::Col< std::complex< double > > const &)\n"
    "    arma::Col< std::complex< double > >::operator +(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator -",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator -",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___sub",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::operator -(arma::Col< std::complex< double > > const &)\n"
    "    arma::Col< std::complex< double > >::operator -(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator *",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator *",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___mul",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::operator *(arma::Col< std::complex< double > > const &)\n"
    "    arma::Col< std::complex< double > >::operator *(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Col< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator /",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::operator /",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec___div",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Col_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Col< std::complex< double > > * resultptr = new arma::Col< std::complex< double > >((const arma::Col< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxvec___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::operator /(arma::Col< std::complex< double > > const &)\n"
    "    arma::Col< std::complex< double > >::operator /(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::println",1,"arma::Col< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_println",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Col_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::println",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_println",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  arma_Col_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxvec_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxvec_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::println(std::string const &)\n"
    "    arma::Col< std::complex< double > >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::data",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_data",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)arma_Col_Sl_std_complex_Sl_double_Sg__Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::size",1,"arma::Col< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_size",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = ((arma::Col< std::complex< double > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::zeros",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_zeros",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::zeros",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_zeros",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxvec_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxvec_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::zeros()\n"
    "    arma::Col< std::complex< double > >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::ones",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_ones",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::ones",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_ones",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxvec_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxvec_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::ones()\n"
    "    arma::Col< std::complex< double > >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::randu",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_randu",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::randu",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_randu",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxvec_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxvec_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::randu()\n"
    "    arma::Col< std::complex< double > >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::randn",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_randn",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::randn",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_randn",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxvec_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxvec_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::randn()\n"
    "    arma::Col< std::complex< double > >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::fill",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::fill",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_fill",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp2 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::replace",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::replace",2,"std::complex< double > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Col< std::complex< double > >::replace",3,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_replace",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec_replace",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec_replace",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp2 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::clamp",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::clamp",2,"std::complex< double > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Col< std::complex< double > >::clamp",3,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_clamp",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec_clamp",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxvec_clamp",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::set_size",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_set_size",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::resize",1,"arma::Col< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_resize",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  arma::Col< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::copy_size",1,"arma::Col< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::copy_size",2,"arma::Col< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_copy_size",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_copy_size",2,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->copy_size((arma::Col< std::complex< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::reset",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_reset",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::raw_print",1,"arma::Col< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_raw_print",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::raw_print",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_raw_print",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxvec_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxvec_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::raw_print(std::string const &)\n"
    "    arma::Col< std::complex< double > >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::brief_print",1,"arma::Col< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Col< std::complex< double > >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_brief_print",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::brief_print",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_brief_print",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxvec_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxvec_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__ColT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxvec_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxvec_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Col< std::complex< double > >::brief_print(std::string const &)\n"
    "    arma::Col< std::complex< double > >::brief_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cxvec_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Col< std::complex< double > >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Col< std::complex< double > >::memptr",1,"arma::Col< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxvec_memptr",1,SWIGTYPE_p_arma__ColT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cxvec(void *obj) {
arma::Col< std::complex< double > > *arg1 = (arma::Col< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cxvec(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cxvec);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cxvec_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cxvec_methods[]= {
    { "at", _wrap_cxvec_at},
    { "__call", _wrap_cxvec___call},
    { "__getitem", _wrap_cxvec___getitem},
    { "__setitem", _wrap_cxvec___setitem},
    { "__unm", _wrap_cxvec___unm},
    { "__add", _wrap_cxvec___add},
    { "__sub", _wrap_cxvec___sub},
    { "__mul", _wrap_cxvec___mul},
    { "__div", _wrap_cxvec___div},
    { "println", _wrap_cxvec_println},
    { "data", _wrap_cxvec_data},
    { "size", _wrap_cxvec_size},
    { "zeros", _wrap_cxvec_zeros},
    { "ones", _wrap_cxvec_ones},
    { "randu", _wrap_cxvec_randu},
    { "randn", _wrap_cxvec_randn},
    { "fill", _wrap_cxvec_fill},
    { "replace", _wrap_cxvec_replace},
    { "clamp", _wrap_cxvec_clamp},
    { "set_size", _wrap_cxvec_set_size},
    { "resize", _wrap_cxvec_resize},
    { "copy_size", _wrap_cxvec_copy_size},
    { "reset", _wrap_cxvec_reset},
    { "raw_print", _wrap_cxvec_raw_print},
    { "brief_print", _wrap_cxvec_brief_print},
    { "memptr", _wrap_cxvec_memptr},
    {0,0}
};
static swig_lua_method swig_cxvec_meta[] = {
    { "__call", _wrap_cxvec___call},
    { "__getitem", _wrap_cxvec___getitem},
    { "__setitem", _wrap_cxvec___setitem},
    { "__unm", _wrap_cxvec___unm},
    { "__add", _wrap_cxvec___add},
    { "__sub", _wrap_cxvec___sub},
    { "__mul", _wrap_cxvec___mul},
    { "__div", _wrap_cxvec___div},
    {0,0}
};

static swig_lua_attribute swig_cxvec_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cxvec_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cxvec_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cxvec_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cxvec_Sf_SwigStatic = {
    "cxvec",
    swig_cxvec_Sf_SwigStatic_methods,
    swig_cxvec_Sf_SwigStatic_attributes,
    swig_cxvec_Sf_SwigStatic_constants,
    swig_cxvec_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cxvec_bases[] = {0};
static const char *swig_cxvec_base_names[] = {0};
static swig_lua_class _wrap_class_cxvec = { "cxvec", "cxvec", &SWIGTYPE_p_arma__ColT_std__complexT_double_t_t,_proxy__wrap_new_cxvec, swig_delete_cxvec, swig_cxvec_methods, swig_cxvec_attributes, &swig_cxvec_Sf_SwigStatic, swig_cxvec_meta, swig_cxvec_bases, swig_cxvec_base_names };

static int _wrap_new_frow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::Row",0,0)
  result = (arma::Row< float > *)new arma::Row< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_frow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Row< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::Row",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Row< float >::Row",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Row< float > *)new arma::Row< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_frow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = 0 ;
  arma::Row< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::Row",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Row< float >::Row",1,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("new_frow",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = (arma::Row< float > *)new arma::Row< float >((arma::Row< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_frow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_frow__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_frow__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_frow__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_frow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::Row()\n"
    "    arma::Row< float >::Row(size_t)\n"
    "    arma::Row< float >::Row(arma::Row< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_frow_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::at",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_at",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Row< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::size",1,"arma::Row< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_size",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = ((arma::Row< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator ()",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___call",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("arma::Row< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::__getitem__",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___getitem",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)arma_Row_Sl_float_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Row< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::__setitem__",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Row< float >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___setitem",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arma_Row_Sl_float_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< float >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::println",1,"arma::Row< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< float >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_println",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Row_Sl_float_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::println",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_println",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  arma_Row_Sl_float_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_frow_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::println(std::string const &)\n"
    "    arma::Row< float >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_frow_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::data",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_data",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = (float *)arma_Row_Sl_float_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator -",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___unm",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = arma_Row_Sl_float_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  arma::Row< float > *arg2 = 0 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator +",1,"arma::Row< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< float >::operator +",2,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___add",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___add",2,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = arma_Row_Sl_float_Sg__operator_Sa___SWIG_0(arg1,(arma::Row< float > const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  arma::Row< float > *arg2 = 0 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator -",1,"arma::Row< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< float >::operator -",2,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___sub",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___sub",2,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = arma_Row_Sl_float_Sg__operator_Ss___SWIG_0(arg1,(arma::Row< float > const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  arma::Row< float > *arg2 = 0 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator *",1,"arma::Row< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< float >::operator *",2,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___mul",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___mul",2,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = arma_Row_Sl_float_Sg__operator_Sm___SWIG_0(arg1,(arma::Row< float > const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  arma::Row< float > *arg2 = 0 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator /",1,"arma::Row< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< float >::operator /",2,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___div",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___div",2,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = arma_Row_Sl_float_Sg__operator_Sd___SWIG_0(arg1,(arma::Row< float > const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator +",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___add",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_float_Sg__operator_Sa___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_frow___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::operator +(arma::Row< float > const &)\n"
    "    arma::Row< float >::operator +(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_frow___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator -",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___sub",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_float_Sg__operator_Ss___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_frow___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::operator -(arma::Row< float > const &)\n"
    "    arma::Row< float >::operator -(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_frow___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator *",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___mul",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_float_Sg__operator_Sm___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_frow___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::operator *(arma::Row< float > const &)\n"
    "    arma::Row< float >::operator *(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_frow___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  arma::Row< float > result;
  
  SWIG_check_num_args("arma::Row< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::operator /",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow___div",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_float_Sg__operator_Sd___SWIG_1(arg1,(float const &)*arg2);
  {
    arma::Row< float > * resultptr = new arma::Row< float >((const arma::Row< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_frow___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::operator /(arma::Row< float > const &)\n"
    "    arma::Row< float >::operator /(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_frow_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::zeros",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_zeros",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< float >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::zeros",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_zeros",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_frow_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::zeros()\n"
    "    arma::Row< float >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_frow_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::ones",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_ones",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< float >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::ones",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_ones",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_frow_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::ones()\n"
    "    arma::Row< float >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_frow_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::randu",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_randu",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< float >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::randu",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_randu",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_frow_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::randu()\n"
    "    arma::Row< float >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_frow_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::randn",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_randn",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< float >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::randn",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_randn",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_frow_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::randn()\n"
    "    arma::Row< float >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_frow_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("arma::Row< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::fill",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::fill",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_fill",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Row< float >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::replace",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::replace",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Row< float >::replace",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_replace",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("arma::Row< float >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::clamp",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::clamp",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Row< float >::clamp",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_clamp",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< float >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::set_size",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_set_size",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::resize",1,"arma::Row< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_resize",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  arma::Row< float > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::copy_size",1,"arma::Row< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< float >::copy_size",2,"arma::Row< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_copy_size",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_copy_size",2,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->copy_size((arma::Row< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::reset",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_reset",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("arma::Row< float >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::memptr",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_memptr",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  result = (float *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< float >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::raw_print",1,"arma::Row< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< float >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_raw_print",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::raw_print",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_raw_print",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_frow_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::raw_print(std::string const &)\n"
    "    arma::Row< float >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_frow_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< float >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::brief_print",1,"arma::Row< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< float >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_brief_print",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< float > *arg1 = (arma::Row< float > *) 0 ;
  
  SWIG_check_num_args("arma::Row< float >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< float >::brief_print",1,"arma::Row< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_float_t,0))){
    SWIG_fail_ptr("frow_brief_print",1,SWIGTYPE_p_arma__RowT_float_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frow_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_frow_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_frow_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'frow_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< float >::brief_print(std::string const &)\n"
    "    arma::Row< float >::brief_print()\n");
  lua_error(L);return 0;
}


static void swig_delete_frow(void *obj) {
arma::Row< float > *arg1 = (arma::Row< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_frow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_frow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_frow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_frow_methods[]= {
    { "at", _wrap_frow_at},
    { "size", _wrap_frow_size},
    { "__call", _wrap_frow___call},
    { "__getitem", _wrap_frow___getitem},
    { "__setitem", _wrap_frow___setitem},
    { "println", _wrap_frow_println},
    { "data", _wrap_frow_data},
    { "__unm", _wrap_frow___unm},
    { "__add", _wrap_frow___add},
    { "__sub", _wrap_frow___sub},
    { "__mul", _wrap_frow___mul},
    { "__div", _wrap_frow___div},
    { "zeros", _wrap_frow_zeros},
    { "ones", _wrap_frow_ones},
    { "randu", _wrap_frow_randu},
    { "randn", _wrap_frow_randn},
    { "fill", _wrap_frow_fill},
    { "replace", _wrap_frow_replace},
    { "clamp", _wrap_frow_clamp},
    { "set_size", _wrap_frow_set_size},
    { "resize", _wrap_frow_resize},
    { "copy_size", _wrap_frow_copy_size},
    { "reset", _wrap_frow_reset},
    { "memptr", _wrap_frow_memptr},
    { "raw_print", _wrap_frow_raw_print},
    { "brief_print", _wrap_frow_brief_print},
    {0,0}
};
static swig_lua_method swig_frow_meta[] = {
    { "__call", _wrap_frow___call},
    { "__getitem", _wrap_frow___getitem},
    { "__setitem", _wrap_frow___setitem},
    { "__unm", _wrap_frow___unm},
    { "__add", _wrap_frow___add},
    { "__sub", _wrap_frow___sub},
    { "__mul", _wrap_frow___mul},
    { "__div", _wrap_frow___div},
    {0,0}
};

static swig_lua_attribute swig_frow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_frow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_frow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_frow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_frow_Sf_SwigStatic = {
    "frow",
    swig_frow_Sf_SwigStatic_methods,
    swig_frow_Sf_SwigStatic_attributes,
    swig_frow_Sf_SwigStatic_constants,
    swig_frow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_frow_bases[] = {0};
static const char *swig_frow_base_names[] = {0};
static swig_lua_class _wrap_class_frow = { "frow", "frow", &SWIGTYPE_p_arma__RowT_float_t,_proxy__wrap_new_frow, swig_delete_frow, swig_frow_methods, swig_frow_attributes, &swig_frow_Sf_SwigStatic, swig_frow_meta, swig_frow_bases, swig_frow_base_names };

static int _wrap_new_drow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::Row",0,0)
  result = (arma::Row< double > *)new arma::Row< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_drow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Row< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::Row",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Row< double >::Row",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Row< double > *)new arma::Row< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_drow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = 0 ;
  arma::Row< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::Row",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Row< double >::Row",1,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("new_drow",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = (arma::Row< double > *)new arma::Row< double >((arma::Row< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_drow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_drow__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_drow__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_drow__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_drow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::Row()\n"
    "    arma::Row< double >::Row(size_t)\n"
    "    arma::Row< double >::Row(arma::Row< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_drow_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::at",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_at",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Row< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::size",1,"arma::Row< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_size",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = ((arma::Row< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator ()",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___call",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("arma::Row< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::__getitem__",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___getitem",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)arma_Row_Sl_double_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Row< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::__setitem__",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Row< double >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___setitem",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arma_Row_Sl_double_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< double >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::println",1,"arma::Row< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< double >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_println",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Row_Sl_double_Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::println",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_println",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  arma_Row_Sl_double_Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_drow_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::println(std::string const &)\n"
    "    arma::Row< double >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_drow_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::data",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_data",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = (double *)arma_Row_Sl_double_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator -",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___unm",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = arma_Row_Sl_double_Sg__operator_Ss___SWIG(arg1);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  arma::Row< double > *arg2 = 0 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator +",1,"arma::Row< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< double >::operator +",2,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___add",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___add",2,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = arma_Row_Sl_double_Sg__operator_Sa___SWIG_0(arg1,(arma::Row< double > const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  arma::Row< double > *arg2 = 0 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator -",1,"arma::Row< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< double >::operator -",2,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___sub",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___sub",2,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = arma_Row_Sl_double_Sg__operator_Ss___SWIG_0(arg1,(arma::Row< double > const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  arma::Row< double > *arg2 = 0 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator *",1,"arma::Row< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< double >::operator *",2,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___mul",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___mul",2,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = arma_Row_Sl_double_Sg__operator_Sm___SWIG_0(arg1,(arma::Row< double > const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  arma::Row< double > *arg2 = 0 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator /",1,"arma::Row< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< double >::operator /",2,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___div",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___div",2,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = arma_Row_Sl_double_Sg__operator_Sd___SWIG_0(arg1,(arma::Row< double > const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator +",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::operator +",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___add",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_double_Sg__operator_Sa___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_drow___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::operator +(arma::Row< double > const &)\n"
    "    arma::Row< double >::operator +(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_drow___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator -",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::operator -",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___sub",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_double_Sg__operator_Ss___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_drow___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::operator -(arma::Row< double > const &)\n"
    "    arma::Row< double >::operator -(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_drow___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator *",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::operator *",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___mul",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_double_Sg__operator_Sm___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_drow___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::operator *(arma::Row< double > const &)\n"
    "    arma::Row< double >::operator *(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_drow___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  arma::Row< double > result;
  
  SWIG_check_num_args("arma::Row< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::operator /",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::operator /",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow___div",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = arma_Row_Sl_double_Sg__operator_Sd___SWIG_1(arg1,(double const &)*arg2);
  {
    arma::Row< double > * resultptr = new arma::Row< double >((const arma::Row< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_drow___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::operator /(arma::Row< double > const &)\n"
    "    arma::Row< double >::operator /(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_drow_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::zeros",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_zeros",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< double >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::zeros",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_zeros",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_drow_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::zeros()\n"
    "    arma::Row< double >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_drow_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::ones",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_ones",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< double >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::ones",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_ones",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_drow_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::ones()\n"
    "    arma::Row< double >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_drow_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::randu",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_randu",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< double >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::randu",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_randu",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_drow_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::randu()\n"
    "    arma::Row< double >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_drow_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::randn",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_randn",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< double >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::randn",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_randn",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_drow_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::randn()\n"
    "    arma::Row< double >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_drow_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("arma::Row< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::fill",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::fill",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_fill",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Row< double >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::replace",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::replace",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Row< double >::replace",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_replace",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("arma::Row< double >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::clamp",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::clamp",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("arma::Row< double >::clamp",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_clamp",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< double >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::set_size",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_set_size",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::resize",1,"arma::Row< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_resize",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  arma::Row< double > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::copy_size",1,"arma::Row< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< double >::copy_size",2,"arma::Row< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_copy_size",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_copy_size",2,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->copy_size((arma::Row< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::reset",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_reset",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("arma::Row< double >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::memptr",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_memptr",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  result = (double *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< double >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::raw_print",1,"arma::Row< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< double >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_raw_print",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::raw_print",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_raw_print",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_drow_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::raw_print(std::string const &)\n"
    "    arma::Row< double >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_drow_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< double >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::brief_print",1,"arma::Row< double > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< double >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_brief_print",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< double > *arg1 = (arma::Row< double > *) 0 ;
  
  SWIG_check_num_args("arma::Row< double >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< double >::brief_print",1,"arma::Row< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_double_t,0))){
    SWIG_fail_ptr("drow_brief_print",1,SWIGTYPE_p_arma__RowT_double_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_drow_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_drow_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_drow_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drow_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< double >::brief_print(std::string const &)\n"
    "    arma::Row< double >::brief_print()\n");
  lua_error(L);return 0;
}


static void swig_delete_drow(void *obj) {
arma::Row< double > *arg1 = (arma::Row< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_drow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_drow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_drow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_drow_methods[]= {
    { "at", _wrap_drow_at},
    { "size", _wrap_drow_size},
    { "__call", _wrap_drow___call},
    { "__getitem", _wrap_drow___getitem},
    { "__setitem", _wrap_drow___setitem},
    { "println", _wrap_drow_println},
    { "data", _wrap_drow_data},
    { "__unm", _wrap_drow___unm},
    { "__add", _wrap_drow___add},
    { "__sub", _wrap_drow___sub},
    { "__mul", _wrap_drow___mul},
    { "__div", _wrap_drow___div},
    { "zeros", _wrap_drow_zeros},
    { "ones", _wrap_drow_ones},
    { "randu", _wrap_drow_randu},
    { "randn", _wrap_drow_randn},
    { "fill", _wrap_drow_fill},
    { "replace", _wrap_drow_replace},
    { "clamp", _wrap_drow_clamp},
    { "set_size", _wrap_drow_set_size},
    { "resize", _wrap_drow_resize},
    { "copy_size", _wrap_drow_copy_size},
    { "reset", _wrap_drow_reset},
    { "memptr", _wrap_drow_memptr},
    { "raw_print", _wrap_drow_raw_print},
    { "brief_print", _wrap_drow_brief_print},
    {0,0}
};
static swig_lua_method swig_drow_meta[] = {
    { "__call", _wrap_drow___call},
    { "__getitem", _wrap_drow___getitem},
    { "__setitem", _wrap_drow___setitem},
    { "__unm", _wrap_drow___unm},
    { "__add", _wrap_drow___add},
    { "__sub", _wrap_drow___sub},
    { "__mul", _wrap_drow___mul},
    { "__div", _wrap_drow___div},
    {0,0}
};

static swig_lua_attribute swig_drow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_drow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_drow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_drow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_drow_Sf_SwigStatic = {
    "drow",
    swig_drow_Sf_SwigStatic_methods,
    swig_drow_Sf_SwigStatic_attributes,
    swig_drow_Sf_SwigStatic_constants,
    swig_drow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_drow_bases[] = {0};
static const char *swig_drow_base_names[] = {0};
static swig_lua_class _wrap_class_drow = { "drow", "drow", &SWIGTYPE_p_arma__RowT_double_t,_proxy__wrap_new_drow, swig_delete_drow, swig_drow_methods, swig_drow_attributes, &swig_drow_Sf_SwigStatic, swig_drow_meta, swig_drow_bases, swig_drow_base_names };

static int _wrap_new_cfrow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::Row",0,0)
  result = (arma::Row< std::complex< float > > *)new arma::Row< std::complex< float > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfrow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Row< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::Row",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::Row",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Row< std::complex< float > > *)new arma::Row< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfrow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = 0 ;
  arma::Row< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::Row",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::Row",1,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_cfrow",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = (arma::Row< std::complex< float > > *)new arma::Row< std::complex< float > >((arma::Row< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cfrow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_cfrow__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cfrow__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_cfrow__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cfrow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::Row()\n"
    "    arma::Row< std::complex< float > >::Row(size_t)\n"
    "    arma::Row< std::complex< float > >::Row(arma::Row< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::at",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_at",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::size",1,"arma::Row< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_size",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = ((arma::Row< std::complex< float > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator ()",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___call",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::__getitem__",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___getitem",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::__setitem__",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Row< std::complex< float > >::__setitem__",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___setitem",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  arma_Row_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::println",1,"arma::Row< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_println",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Row_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::println",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_println",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  arma_Row_Sl_std_complex_Sl_float_Sg__Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfrow_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfrow_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::println(std::string const &)\n"
    "    arma::Row< std::complex< float > >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::data",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_data",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)arma_Row_Sl_std_complex_Sl_float_Sg__Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator -",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___unm",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG(arg1);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator +",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator +",2,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___add",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___add",2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_0(arg1,(arma::Row< std::complex< float > > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator -",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator -",2,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___sub",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___sub",2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_0(arg1,(arma::Row< std::complex< float > > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator *",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator *",2,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___mul",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___mul",2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_0(arg1,(arma::Row< std::complex< float > > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator /",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator /",2,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___div",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___div",2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_0(arg1,(arma::Row< std::complex< float > > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator +",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator +",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___add",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sa___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::operator +(arma::Row< std::complex< float > > const &)\n"
    "    arma::Row< std::complex< float > >::operator +(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator -",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator -",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___sub",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Ss___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::operator -(arma::Row< std::complex< float > > const &)\n"
    "    arma::Row< std::complex< float > >::operator -(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator *",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator *",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___mul",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sm___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::operator *(arma::Row< std::complex< float > > const &)\n"
    "    arma::Row< std::complex< float > >::operator *(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  arma::Row< std::complex< float > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator /",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::operator /",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow___div",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_float_Sg__Sg__operator_Sd___SWIG_1(arg1,(std::complex< float > const &)*arg2);
  {
    arma::Row< std::complex< float > > * resultptr = new arma::Row< std::complex< float > >((const arma::Row< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfrow___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::operator /(arma::Row< std::complex< float > > const &)\n"
    "    arma::Row< std::complex< float > >::operator /(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::zeros",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_zeros",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::zeros",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_zeros",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfrow_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfrow_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::zeros()\n"
    "    arma::Row< std::complex< float > >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::ones",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_ones",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::ones",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_ones",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfrow_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfrow_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::ones()\n"
    "    arma::Row< std::complex< float > >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::randu",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_randu",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::randu",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_randu",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfrow_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfrow_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::randu()\n"
    "    arma::Row< std::complex< float > >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::randn",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_randn",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::randn",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_randn",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfrow_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfrow_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::randn()\n"
    "    arma::Row< std::complex< float > >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::fill",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::fill",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_fill",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp2 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::replace",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::replace",2,"std::complex< float > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Row< std::complex< float > >::replace",3,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_replace",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow_replace",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow_replace",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp2 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::clamp",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::clamp",2,"std::complex< float > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Row< std::complex< float > >::clamp",3,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_clamp",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow_clamp",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfrow_clamp",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::set_size",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_set_size",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::resize",1,"arma::Row< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_resize",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  arma::Row< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::copy_size",1,"arma::Row< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::copy_size",2,"arma::Row< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_copy_size",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_copy_size",2,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->copy_size((arma::Row< std::complex< float > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::reset",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_reset",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::memptr",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_memptr",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::raw_print",1,"arma::Row< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_raw_print",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::raw_print",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_raw_print",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfrow_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfrow_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::raw_print(std::string const &)\n"
    "    arma::Row< std::complex< float > >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cfrow_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::brief_print",1,"arma::Row< std::complex< float > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< std::complex< float > >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_brief_print",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< float > >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< float > >::brief_print",1,"arma::Row< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("cfrow_brief_print",1,SWIGTYPE_p_arma__RowT_std__complexT_float_t_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfrow_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cfrow_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfrow_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfrow_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< float > >::brief_print(std::string const &)\n"
    "    arma::Row< std::complex< float > >::brief_print()\n");
  lua_error(L);return 0;
}


static void swig_delete_cfrow(void *obj) {
arma::Row< std::complex< float > > *arg1 = (arma::Row< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cfrow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cfrow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cfrow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cfrow_methods[]= {
    { "at", _wrap_cfrow_at},
    { "size", _wrap_cfrow_size},
    { "__call", _wrap_cfrow___call},
    { "__getitem", _wrap_cfrow___getitem},
    { "__setitem", _wrap_cfrow___setitem},
    { "println", _wrap_cfrow_println},
    { "data", _wrap_cfrow_data},
    { "__unm", _wrap_cfrow___unm},
    { "__add", _wrap_cfrow___add},
    { "__sub", _wrap_cfrow___sub},
    { "__mul", _wrap_cfrow___mul},
    { "__div", _wrap_cfrow___div},
    { "zeros", _wrap_cfrow_zeros},
    { "ones", _wrap_cfrow_ones},
    { "randu", _wrap_cfrow_randu},
    { "randn", _wrap_cfrow_randn},
    { "fill", _wrap_cfrow_fill},
    { "replace", _wrap_cfrow_replace},
    { "clamp", _wrap_cfrow_clamp},
    { "set_size", _wrap_cfrow_set_size},
    { "resize", _wrap_cfrow_resize},
    { "copy_size", _wrap_cfrow_copy_size},
    { "reset", _wrap_cfrow_reset},
    { "memptr", _wrap_cfrow_memptr},
    { "raw_print", _wrap_cfrow_raw_print},
    { "brief_print", _wrap_cfrow_brief_print},
    {0,0}
};
static swig_lua_method swig_cfrow_meta[] = {
    { "__call", _wrap_cfrow___call},
    { "__getitem", _wrap_cfrow___getitem},
    { "__setitem", _wrap_cfrow___setitem},
    { "__unm", _wrap_cfrow___unm},
    { "__add", _wrap_cfrow___add},
    { "__sub", _wrap_cfrow___sub},
    { "__mul", _wrap_cfrow___mul},
    { "__div", _wrap_cfrow___div},
    {0,0}
};

static swig_lua_attribute swig_cfrow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cfrow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cfrow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cfrow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cfrow_Sf_SwigStatic = {
    "cfrow",
    swig_cfrow_Sf_SwigStatic_methods,
    swig_cfrow_Sf_SwigStatic_attributes,
    swig_cfrow_Sf_SwigStatic_constants,
    swig_cfrow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cfrow_bases[] = {0};
static const char *swig_cfrow_base_names[] = {0};
static swig_lua_class _wrap_class_cfrow = { "cfrow", "cfrow", &SWIGTYPE_p_arma__RowT_std__complexT_float_t_t,_proxy__wrap_new_cfrow, swig_delete_cfrow, swig_cfrow_methods, swig_cfrow_attributes, &swig_cfrow_Sf_SwigStatic, swig_cfrow_meta, swig_cfrow_bases, swig_cfrow_base_names };

static int _wrap_new_cxrow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::Row",0,0)
  result = (arma::Row< std::complex< double > > *)new arma::Row< std::complex< double > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxrow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  arma::Row< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::Row",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::Row",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (arma::Row< std::complex< double > > *)new arma::Row< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxrow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = 0 ;
  arma::Row< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::Row",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::Row",1,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_cxrow",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = (arma::Row< std::complex< double > > *)new arma::Row< std::complex< double > >((arma::Row< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cxrow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_cxrow__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cxrow__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_cxrow__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cxrow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::Row()\n"
    "    arma::Row< std::complex< double > >::Row(size_t)\n"
    "    arma::Row< std::complex< double > >::Row(arma::Row< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_at(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::at",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_at",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::size",1,"arma::Row< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_size",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = ((arma::Row< std::complex< double > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___call(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator ()",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___call",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___getitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::__getitem__",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___getitem",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___setitem(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::__setitem__",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Row< std::complex< double > >::__setitem__",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___setitem",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  arma_Row_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_println__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::println",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::println",1,"arma::Row< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::println",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_println",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arma_Row_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_println__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::println",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_println",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  arma_Row_Sl_std_complex_Sl_double_Sg__Sg__println__SWIG_0(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_println(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxrow_println__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxrow_println__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow_println'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::println(std::string const &)\n"
    "    arma::Row< std::complex< double > >::println()\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_data(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::data",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_data",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)arma_Row_Sl_std_complex_Sl_double_Sg__Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___unm(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator -",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___unm",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG(arg1);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator +",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator +",2,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___add",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___add",2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_0(arg1,(arma::Row< std::complex< double > > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator -",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator -",2,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___sub",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___sub",2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_0(arg1,(arma::Row< std::complex< double > > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator *",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator *",2,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___mul",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___mul",2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_0(arg1,(arma::Row< std::complex< double > > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator /",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator /",2,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___div",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___div",2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_0(arg1,(arma::Row< std::complex< double > > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator +",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator +",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___add",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sa___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::operator +(arma::Row< std::complex< double > > const &)\n"
    "    arma::Row< std::complex< double > >::operator +(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator -",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator -",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___sub",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Ss___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::operator -(arma::Row< std::complex< double > > const &)\n"
    "    arma::Row< std::complex< double > >::operator -(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator *",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator *",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___mul",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sm___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::operator *(arma::Row< std::complex< double > > const &)\n"
    "    arma::Row< std::complex< double > >::operator *(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  arma::Row< std::complex< double > > result;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator /",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::operator /",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow___div",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = arma_Row_Sl_std_complex_Sl_double_Sg__Sg__operator_Sd___SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    arma::Row< std::complex< double > > * resultptr = new arma::Row< std::complex< double > >((const arma::Row< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cxrow___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::operator /(arma::Row< std::complex< double > > const &)\n"
    "    arma::Row< std::complex< double > >::operator /(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_zeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::zeros",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_zeros",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->zeros();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_zeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::zeros",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::zeros",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_zeros",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->zeros(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_zeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxrow_zeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxrow_zeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow_zeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::zeros()\n"
    "    arma::Row< std::complex< double > >::zeros(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::ones",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_ones",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::ones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::ones",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::ones",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_ones",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_ones(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxrow_ones__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxrow_ones__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::ones()\n"
    "    arma::Row< std::complex< double > >::ones(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_randu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::randu",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_randu",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_randu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::randu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::randu",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::randu",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_randu",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_randu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxrow_randu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxrow_randu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow_randu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::randu()\n"
    "    arma::Row< std::complex< double > >::randu(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_randn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::randn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::randn",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_randn",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->randn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_randn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::randn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::randn",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::randn",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_randn",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->randn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_randn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxrow_randn__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxrow_randn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow_randn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::randn()\n"
    "    arma::Row< std::complex< double > >::randn(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_fill(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::fill",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::fill",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_fill",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_replace(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp2 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::replace",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::replace",2,"std::complex< double > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Row< std::complex< double > >::replace",3,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_replace",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow_replace",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow_replace",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_clamp(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp2 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::clamp",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::clamp",2,"std::complex< double > const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("arma::Row< std::complex< double > >::clamp",3,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_clamp",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow_clamp",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cxrow_clamp",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_set_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::set_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::set_size",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::set_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_set_size",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_resize(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::resize",1,"arma::Row< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_resize",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_copy_size(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  arma::Row< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::copy_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::copy_size",1,"arma::Row< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::copy_size",2,"arma::Row< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_copy_size",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_copy_size",2,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->copy_size((arma::Row< std::complex< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_reset(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::reset",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_reset",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_memptr(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::memptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::memptr",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_memptr",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->memptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_raw_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::raw_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::raw_print",1,"arma::Row< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::raw_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_raw_print",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->raw_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_raw_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::raw_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::raw_print",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_raw_print",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->raw_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_raw_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxrow_raw_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxrow_raw_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow_raw_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::raw_print(std::string const &)\n"
    "    arma::Row< std::complex< double > >::raw_print()\n");
  lua_error(L);return 0;
}


static int _wrap_cxrow_brief_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::brief_print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::brief_print",1,"arma::Row< std::complex< double > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("arma::Row< std::complex< double > >::brief_print",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_brief_print",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->brief_print((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_brief_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("arma::Row< std::complex< double > >::brief_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("arma::Row< std::complex< double > >::brief_print",1,"arma::Row< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("cxrow_brief_print",1,SWIGTYPE_p_arma__RowT_std__complexT_double_t_t);
  }
  
  (arg1)->brief_print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cxrow_brief_print(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cxrow_brief_print__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_arma__RowT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cxrow_brief_print__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cxrow_brief_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    arma::Row< std::complex< double > >::brief_print(std::string const &)\n"
    "    arma::Row< std::complex< double > >::brief_print()\n");
  lua_error(L);return 0;
}


static void swig_delete_cxrow(void *obj) {
arma::Row< std::complex< double > > *arg1 = (arma::Row< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cxrow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cxrow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cxrow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cxrow_methods[]= {
    { "at", _wrap_cxrow_at},
    { "size", _wrap_cxrow_size},
    { "__call", _wrap_cxrow___call},
    { "__getitem", _wrap_cxrow___getitem},
    { "__setitem", _wrap_cxrow___setitem},
    { "println", _wrap_cxrow_println},
    { "data", _wrap_cxrow_data},
    { "__unm", _wrap_cxrow___unm},
    { "__add", _wrap_cxrow___add},
    { "__sub", _wrap_cxrow___sub},
    { "__mul", _wrap_cxrow___mul},
    { "__div", _wrap_cxrow___div},
    { "zeros", _wrap_cxrow_zeros},
    { "ones", _wrap_cxrow_ones},
    { "randu", _wrap_cxrow_randu},
    { "randn", _wrap_cxrow_randn},
    { "fill", _wrap_cxrow_fill},
    { "replace", _wrap_cxrow_replace},
    { "clamp", _wrap_cxrow_clamp},
    { "set_size", _wrap_cxrow_set_size},
    { "resize", _wrap_cxrow_resize},
    { "copy_size", _wrap_cxrow_copy_size},
    { "reset", _wrap_cxrow_reset},
    { "memptr", _wrap_cxrow_memptr},
    { "raw_print", _wrap_cxrow_raw_print},
    { "brief_print", _wrap_cxrow_brief_print},
    {0,0}
};
static swig_lua_method swig_cxrow_meta[] = {
    { "__call", _wrap_cxrow___call},
    { "__getitem", _wrap_cxrow___getitem},
    { "__setitem", _wrap_cxrow___setitem},
    { "__unm", _wrap_cxrow___unm},
    { "__add", _wrap_cxrow___add},
    { "__sub", _wrap_cxrow___sub},
    { "__mul", _wrap_cxrow___mul},
    { "__div", _wrap_cxrow___div},
    {0,0}
};

static swig_lua_attribute swig_cxrow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cxrow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cxrow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cxrow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cxrow_Sf_SwigStatic = {
    "cxrow",
    swig_cxrow_Sf_SwigStatic_methods,
    swig_cxrow_Sf_SwigStatic_attributes,
    swig_cxrow_Sf_SwigStatic_constants,
    swig_cxrow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cxrow_bases[] = {0};
static const char *swig_cxrow_base_names[] = {0};
static swig_lua_class _wrap_class_cxrow = { "cxrow", "cxrow", &SWIGTYPE_p_arma__RowT_std__complexT_double_t_t,_proxy__wrap_new_cxrow, swig_delete_cxrow, swig_cxrow_methods, swig_cxrow_attributes, &swig_cxrow_Sf_SwigStatic, swig_cxrow_meta, swig_cxrow_bases, swig_cxrow_base_names };

static int _wrap_cfreal(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::real< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfreal",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR real< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czreal(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::real< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czreal",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR real< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfimag(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::imag< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfimag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR imag< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czimag(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::imag< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czimag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR imag< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfabs(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfabs",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR abs< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czabs(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::abs< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czabs",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR abs< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfarg(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::arg< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfarg",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR arg< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czarg(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::arg< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czarg",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR arg< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfnorm(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::norm< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfnorm",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR norm< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cznorm(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::norm< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cznorm",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR norm< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfproj(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::proj< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfproj",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czproj(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::proj< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czproj",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpolar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::polar< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpolar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::polar< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpolar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_cfpolar__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfpolar__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfpolar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< float >(float const &,float const &)\n"
    "    std::polar< float >(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_czpolar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< double >((double const &)*arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpolar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< double >((double const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpolar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_czpolar__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_czpolar__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'czpolar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< double >(double const &,double const &)\n"
    "    std::polar< double >(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfexp(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::exp< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfexp",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR exp< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czexp(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::exp< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::exp< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czexp",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR exp< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cflog(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cflog",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czlog(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czlog",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cflog10(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log10< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cflog10",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log10< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czlog10(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log10< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log10< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czlog10",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log10< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< float >",1,"std::complex< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< float >",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< float >((std::complex< float > const &)*arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< float >",1,"std::complex< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< float >((std::complex< float > const &)*arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  std::complex< float > *arg2 = 0 ;
  float temp1 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::pow< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::pow< float >",1,"float const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< float >",2,"std::complex< float > const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< float >((float const &)*arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfpow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfpow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfpow__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfpow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pow< float >(std::complex< float > const &,std::complex< float > const &)\n"
    "    std::pow< float >(std::complex< float > const &,float const &)\n"
    "    std::pow< float >(float const &,std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_czpow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< double >",1,"std::complex< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< double >",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< double >((std::complex< double > const &)*arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< double >",1,"std::complex< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::pow< double >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< double >((std::complex< double > const &)*arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  double temp1 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::pow< double >",1,"double const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< double >",2,"std::complex< double > const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< double >((double const &)*arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_czpow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_czpow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_czpow__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'czpow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pow< double >(std::complex< double > const &,std::complex< double > const &)\n"
    "    std::pow< double >(std::complex< double > const &,double const &)\n"
    "    std::pow< double >(double const &,std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfsqrt(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sqrt< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfsqrt",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czsqrt(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sqrt< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sqrt< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czsqrt",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sqrt< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfsin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfsin",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czsin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sin< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czsin",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfcos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfcos",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czcos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cos< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czcos",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cftan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cftan",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cztan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tan< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cztan",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfasin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfasin",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czasin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asin< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czasin",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfacos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfacos",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czacos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acos< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czacos",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfatan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfatan",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czatan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atan< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czatan",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfsinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfsinh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czsinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sinh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czsinh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfcosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfcosh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czcosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cosh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czcosh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cftanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cftanh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cztanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tanh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cztanh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfasinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfasinh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czasinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asinh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czasinh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfacosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfacosh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czacosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acosh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czacosh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfatanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfatanh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czatanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atanh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czatanh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::linspace< double >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::linspace< double >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::linspace< double >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ops::linspace< double >",3,"size_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR linspace< double >(arg1,arg2,arg3);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::linspace< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::linspace< double >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::linspace< double >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR linspace< double >(arg1,arg2);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_linspace__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_linspace__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'linspace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ops::linspace< double >(double,double,size_t)\n"
    "    ops::linspace< double >(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_logpace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::logspace< double >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::logspace< double >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::logspace< double >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ops::logspace< double >",3,"size_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR logspace< double >(arg1,arg2,arg3);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logpace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::logspace< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::logspace< double >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::logspace< double >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR logspace< double >(arg1,arg2);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logpace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_logpace__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_logpace__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logpace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ops::logspace< double >(double,double,size_t)\n"
    "    ops::logspace< double >(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_regpace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::logspace< double >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::logspace< double >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::logspace< double >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ops::logspace< double >",3,"size_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR logspace< double >(arg1,arg2,arg3);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_regpace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::logspace< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::logspace< double >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::logspace< double >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR logspace< double >(arg1,arg2);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_regpace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_regpace__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_regpace__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'regpace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ops::logspace< double >(double,double,size_t)\n"
    "    ops::logspace< double >(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_eye(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Mat< double > result;
  
  SWIG_check_num_args("ops::eye< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::eye< double >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::eye< double >",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR eye< double >(arg1,arg2);
  {
    Mat< double > * resultptr = new Mat< double >((const Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_col_zero(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("ops::zero< arma::Col< double > >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ops::zero< arma::Col< double > >",1,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("col_zero",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = ops::SWIGTEMPLATEDISAMBIGUATOR zero< arma::Col< double > >((arma::Col< double > const &)*arg1);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_col_ones(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("ops::zero< arma::Col< double > >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ops::zero< arma::Col< double > >",1,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("col_ones",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = ops::SWIGTEMPLATEDISAMBIGUATOR zero< arma::Col< double > >((arma::Col< double > const &)*arg1);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_col_random(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("ops::zero< arma::Col< double > >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ops::zero< arma::Col< double > >",1,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("col_random",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = ops::SWIGTEMPLATEDISAMBIGUATOR zero< arma::Col< double > >((arma::Col< double > const &)*arg1);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_col_randu(lua_State* L) {
  int SWIG_arg = 0;
  arma::Col< double > *arg1 = 0 ;
  arma::Col< double > result;
  
  SWIG_check_num_args("ops::randu< arma::Col< double > >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ops::randu< arma::Col< double > >",1,"arma::Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_arma__ColT_double_t,0))){
    SWIG_fail_ptr("col_randu",1,SWIGTYPE_p_arma__ColT_double_t);
  }
  
  result = ops::SWIGTEMPLATEDISAMBIGUATOR randu< arma::Col< double > >((arma::Col< double > const &)*arg1);
  {
    arma::Col< double > * resultptr = new arma::Col< double >((const arma::Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_arma__ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::random_vector< double >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::random_vector< double >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::random_vector< double >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ops::random_vector< double >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR random_vector< double >(arg1,arg2,arg3);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::random_vector< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::random_vector< double >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ops::random_vector< double >",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR random_vector< double >(arg1,arg2);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Col< double > result;
  
  SWIG_check_num_args("ops::random_vector< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ops::random_vector< double >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = ops::SWIGTEMPLATEDISAMBIGUATOR random_vector< double >(arg1);
  {
    Col< double > * resultptr = new Col< double >((const Col< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_vector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_random_vector__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_random_vector__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_random_vector__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'random_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ops::random_vector< double >(size_t,double,double)\n"
    "    ops::random_vector< double >(size_t,double)\n"
    "    ops::random_vector< double >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_toeplitz__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Col< double > *arg1 = 0 ;
  Mat< double > result;
  
  SWIG_check_num_args("ops::toeplitz< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ops::toeplitz< double >",1,"Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColT_double_t,0))){
    SWIG_fail_ptr("toeplitz",1,SWIGTYPE_p_ColT_double_t);
  }
  
  result = ops::SWIGTEMPLATEDISAMBIGUATOR toeplitz< double >((Col< double > const &)*arg1);
  {
    Mat< double > * resultptr = new Mat< double >((const Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_toeplitz__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Col< double > *arg1 = 0 ;
  Col< double > *arg2 = 0 ;
  Mat< double > result;
  
  SWIG_check_num_args("ops::toeplitz< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ops::toeplitz< double >",1,"Col< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ops::toeplitz< double >",2,"Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColT_double_t,0))){
    SWIG_fail_ptr("toeplitz",1,SWIGTYPE_p_ColT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColT_double_t,0))){
    SWIG_fail_ptr("toeplitz",2,SWIGTYPE_p_ColT_double_t);
  }
  
  result = ops::SWIGTEMPLATEDISAMBIGUATOR toeplitz< double >((Col< double > const &)*arg1,(Col< double > const &)*arg2);
  {
    Mat< double > * resultptr = new Mat< double >((const Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_toeplitz(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_toeplitz__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_toeplitz__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'toeplitz'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ops::toeplitz< double >(Col< double > const &)\n"
    "    ops::toeplitz< double >(Col< double > const &,Col< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_circ_toeplitz(lua_State* L) {
  int SWIG_arg = 0;
  Col< double > *arg1 = 0 ;
  Mat< double > result;
  
  SWIG_check_num_args("ops::circ_toeplitz< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ops::circ_toeplitz< double >",1,"Col< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColT_double_t,0))){
    SWIG_fail_ptr("circ_toeplitz",1,SWIGTYPE_p_ColT_double_t);
  }
  
  result = ops::SWIGTEMPLATEDISAMBIGUATOR circ_toeplitz< double >((Col< double > const &)*arg1);
  {
    Mat< double > * resultptr = new Mat< double >((const Mat< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("APPROX_ABSDIFF", APPROX_ABSDIFF)},
    {SWIG_LUA_CONSTTAB_INT("APPROX_RELDIFF", APPROX_RELDIFF)},
    {SWIG_LUA_CONSTTAB_INT("APPROX_BOTH", APPROX_BOTH)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "arma_rng_set_seed", _wrap_arma_rng_set_seed},
    { "arma_rng_set_seed_random", _wrap_arma_rng_set_seed_random},
    { "cfreal", _wrap_cfreal},
    { "czreal", _wrap_czreal},
    { "cfimag", _wrap_cfimag},
    { "czimag", _wrap_czimag},
    { "cfabs", _wrap_cfabs},
    { "czabs", _wrap_czabs},
    { "cfarg", _wrap_cfarg},
    { "czarg", _wrap_czarg},
    { "cfnorm", _wrap_cfnorm},
    { "cznorm", _wrap_cznorm},
    { "cfproj", _wrap_cfproj},
    { "czproj", _wrap_czproj},
    { "cfpolar", _wrap_cfpolar},
    { "czpolar", _wrap_czpolar},
    { "cfexp", _wrap_cfexp},
    { "czexp", _wrap_czexp},
    { "cflog", _wrap_cflog},
    { "czlog", _wrap_czlog},
    { "cflog10", _wrap_cflog10},
    { "czlog10", _wrap_czlog10},
    { "cfpow", _wrap_cfpow},
    { "czpow", _wrap_czpow},
    { "cfsqrt", _wrap_cfsqrt},
    { "czsqrt", _wrap_czsqrt},
    { "cfsin", _wrap_cfsin},
    { "czsin", _wrap_czsin},
    { "cfcos", _wrap_cfcos},
    { "czcos", _wrap_czcos},
    { "cftan", _wrap_cftan},
    { "cztan", _wrap_cztan},
    { "cfasin", _wrap_cfasin},
    { "czasin", _wrap_czasin},
    { "cfacos", _wrap_cfacos},
    { "czacos", _wrap_czacos},
    { "cfatan", _wrap_cfatan},
    { "czatan", _wrap_czatan},
    { "cfsinh", _wrap_cfsinh},
    { "czsinh", _wrap_czsinh},
    { "cfcosh", _wrap_cfcosh},
    { "czcosh", _wrap_czcosh},
    { "cftanh", _wrap_cftanh},
    { "cztanh", _wrap_cztanh},
    { "cfasinh", _wrap_cfasinh},
    { "czasinh", _wrap_czasinh},
    { "cfacosh", _wrap_cfacosh},
    { "czacosh", _wrap_czacosh},
    { "cfatanh", _wrap_cfatanh},
    { "czatanh", _wrap_czatanh},
    { "linspace", _wrap_linspace},
    { "logpace", _wrap_logpace},
    { "regpace", _wrap_regpace},
    { "eye", _wrap_eye},
    { "col_zero", _wrap_col_zero},
    { "col_ones", _wrap_col_ones},
    { "col_random", _wrap_col_random},
    { "col_randu", _wrap_col_randu},
    { "random_vector", _wrap_random_vector},
    { "toeplitz", _wrap_toeplitz},
    { "circ_toeplitz", _wrap_circ_toeplitz},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_arma_rng,
&_wrap_class_fcomplex,
&_wrap_class_xcomplex,
&_wrap_class_fmat,
&_wrap_class_dmat,
&_wrap_class_cfmat,
&_wrap_class_cxmat,
&_wrap_class_imat,
&_wrap_class_umat,
&_wrap_class_lmat,
&_wrap_class_ulmat,
&_wrap_class_llmat,
&_wrap_class_ullmat,
&_wrap_class_fvec,
&_wrap_class_dvec,
&_wrap_class_cfvec,
&_wrap_class_cxvec,
&_wrap_class_frow,
&_wrap_class_drow,
&_wrap_class_cfrow,
&_wrap_class_cxrow,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "arma",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_ColT_double_t = {"_p_ColT_double_t", "Col< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatT_double_t = {"_p_MatT_double_t", "Mat< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_double_t = {"_p_MatrixViewT_double_t", "MatrixView< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_float_t = {"_p_MatrixViewT_float_t", "MatrixView< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_int_t = {"_p_MatrixViewT_int_t", "MatrixView< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_long_long_t = {"_p_MatrixViewT_long_long_t", "MatrixView< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_long_t = {"_p_MatrixViewT_long_t", "MatrixView< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_std__complexT_double_t_t = {"_p_MatrixViewT_std__complexT_double_t_t", "MatrixView< std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_std__complexT_float_t_t = {"_p_MatrixViewT_std__complexT_float_t_t", "MatrixView< std::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_unsigned_int_t = {"_p_MatrixViewT_unsigned_int_t", "MatrixView< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_unsigned_long_long_t = {"_p_MatrixViewT_unsigned_long_long_t", "MatrixView< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewT_unsigned_long_t = {"_p_MatrixViewT_unsigned_long_t", "MatrixView< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__ColT_double_t = {"_p_arma__ColT_double_t", "arma::Col< double > *", 0, 0, (void*)&_wrap_class_dvec, 0};
static swig_type_info _swigt__p_arma__ColT_float_t = {"_p_arma__ColT_float_t", "arma::Col< float > *", 0, 0, (void*)&_wrap_class_fvec, 0};
static swig_type_info _swigt__p_arma__ColT_int_t = {"_p_arma__ColT_int_t", "arma::Col< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__ColT_long_long_t = {"_p_arma__ColT_long_long_t", "arma::Col< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__ColT_long_t = {"_p_arma__ColT_long_t", "arma::Col< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__ColT_std__complexT_double_t_t = {"_p_arma__ColT_std__complexT_double_t_t", "arma::Col< std::complex< double > > *", 0, 0, (void*)&_wrap_class_cxvec, 0};
static swig_type_info _swigt__p_arma__ColT_std__complexT_float_t_t = {"_p_arma__ColT_std__complexT_float_t_t", "arma::Col< std::complex< float > > *", 0, 0, (void*)&_wrap_class_cfvec, 0};
static swig_type_info _swigt__p_arma__ColT_unsigned_int_t = {"_p_arma__ColT_unsigned_int_t", "arma::Col< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__ColT_unsigned_long_long_t = {"_p_arma__ColT_unsigned_long_long_t", "arma::Col< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__ColT_unsigned_long_t = {"_p_arma__ColT_unsigned_long_t", "arma::Col< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__MatT_double_t = {"_p_arma__MatT_double_t", "arma::Mat< double > *", 0, 0, (void*)&_wrap_class_dmat, 0};
static swig_type_info _swigt__p_arma__MatT_float_t = {"_p_arma__MatT_float_t", "arma::Mat< float > *", 0, 0, (void*)&_wrap_class_fmat, 0};
static swig_type_info _swigt__p_arma__MatT_int_t = {"_p_arma__MatT_int_t", "arma::Mat< int > *", 0, 0, (void*)&_wrap_class_imat, 0};
static swig_type_info _swigt__p_arma__MatT_long_long_t = {"_p_arma__MatT_long_long_t", "arma::Mat< long long > *", 0, 0, (void*)&_wrap_class_llmat, 0};
static swig_type_info _swigt__p_arma__MatT_long_t = {"_p_arma__MatT_long_t", "arma::Mat< long > *", 0, 0, (void*)&_wrap_class_lmat, 0};
static swig_type_info _swigt__p_arma__MatT_std__complexT_double_t_t = {"_p_arma__MatT_std__complexT_double_t_t", "arma::Mat< std::complex< double > > *", 0, 0, (void*)&_wrap_class_cxmat, 0};
static swig_type_info _swigt__p_arma__MatT_std__complexT_float_t_t = {"_p_arma__MatT_std__complexT_float_t_t", "arma::Mat< std::complex< float > > *", 0, 0, (void*)&_wrap_class_cfmat, 0};
static swig_type_info _swigt__p_arma__MatT_unsigned_int_t = {"_p_arma__MatT_unsigned_int_t", "arma::Mat< unsigned int > *", 0, 0, (void*)&_wrap_class_umat, 0};
static swig_type_info _swigt__p_arma__MatT_unsigned_long_long_t = {"_p_arma__MatT_unsigned_long_long_t", "arma::Mat< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullmat, 0};
static swig_type_info _swigt__p_arma__MatT_unsigned_long_t = {"_p_arma__MatT_unsigned_long_t", "arma::Mat< unsigned long > *", 0, 0, (void*)&_wrap_class_ulmat, 0};
static swig_type_info _swigt__p_arma__RowT_double_t = {"_p_arma__RowT_double_t", "arma::Row< double > *", 0, 0, (void*)&_wrap_class_drow, 0};
static swig_type_info _swigt__p_arma__RowT_float_t = {"_p_arma__RowT_float_t", "arma::Row< float > *", 0, 0, (void*)&_wrap_class_frow, 0};
static swig_type_info _swigt__p_arma__RowT_int_t = {"_p_arma__RowT_int_t", "arma::Row< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__RowT_long_long_t = {"_p_arma__RowT_long_long_t", "arma::Row< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__RowT_long_t = {"_p_arma__RowT_long_t", "arma::Row< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__RowT_std__complexT_double_t_t = {"_p_arma__RowT_std__complexT_double_t_t", "arma::Row< std::complex< double > > *", 0, 0, (void*)&_wrap_class_cxrow, 0};
static swig_type_info _swigt__p_arma__RowT_std__complexT_float_t_t = {"_p_arma__RowT_std__complexT_float_t_t", "arma::Row< std::complex< float > > *", 0, 0, (void*)&_wrap_class_cfrow, 0};
static swig_type_info _swigt__p_arma__RowT_unsigned_int_t = {"_p_arma__RowT_unsigned_int_t", "arma::Row< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__RowT_unsigned_long_long_t = {"_p_arma__RowT_unsigned_long_long_t", "arma::Row< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__RowT_unsigned_long_t = {"_p_arma__RowT_unsigned_long_t", "arma::Row< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arma__arma_rng = {"_p_arma__arma_rng", "arma::arma_rng *", 0, 0, (void*)&_wrap_class_arma_rng, 0};
static swig_type_info _swigt__p_arma_rng_cxx11__seed_type = {"_p_arma_rng_cxx11__seed_type", "arma_rng_cxx11::seed_type *|arma::arma_rng::seed_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seed_type = {"_p_seed_type", "seed_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_xcomplex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_fcomplex, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ColT_double_t,
  &_swigt__p_MatT_double_t,
  &_swigt__p_MatrixViewT_double_t,
  &_swigt__p_MatrixViewT_float_t,
  &_swigt__p_MatrixViewT_int_t,
  &_swigt__p_MatrixViewT_long_long_t,
  &_swigt__p_MatrixViewT_long_t,
  &_swigt__p_MatrixViewT_std__complexT_double_t_t,
  &_swigt__p_MatrixViewT_std__complexT_float_t_t,
  &_swigt__p_MatrixViewT_unsigned_int_t,
  &_swigt__p_MatrixViewT_unsigned_long_long_t,
  &_swigt__p_MatrixViewT_unsigned_long_t,
  &_swigt__p_arma__ColT_double_t,
  &_swigt__p_arma__ColT_float_t,
  &_swigt__p_arma__ColT_int_t,
  &_swigt__p_arma__ColT_long_long_t,
  &_swigt__p_arma__ColT_long_t,
  &_swigt__p_arma__ColT_std__complexT_double_t_t,
  &_swigt__p_arma__ColT_std__complexT_float_t_t,
  &_swigt__p_arma__ColT_unsigned_int_t,
  &_swigt__p_arma__ColT_unsigned_long_long_t,
  &_swigt__p_arma__ColT_unsigned_long_t,
  &_swigt__p_arma__MatT_double_t,
  &_swigt__p_arma__MatT_float_t,
  &_swigt__p_arma__MatT_int_t,
  &_swigt__p_arma__MatT_long_long_t,
  &_swigt__p_arma__MatT_long_t,
  &_swigt__p_arma__MatT_std__complexT_double_t_t,
  &_swigt__p_arma__MatT_std__complexT_float_t_t,
  &_swigt__p_arma__MatT_unsigned_int_t,
  &_swigt__p_arma__MatT_unsigned_long_long_t,
  &_swigt__p_arma__MatT_unsigned_long_t,
  &_swigt__p_arma__RowT_double_t,
  &_swigt__p_arma__RowT_float_t,
  &_swigt__p_arma__RowT_int_t,
  &_swigt__p_arma__RowT_long_long_t,
  &_swigt__p_arma__RowT_long_t,
  &_swigt__p_arma__RowT_std__complexT_double_t_t,
  &_swigt__p_arma__RowT_std__complexT_float_t_t,
  &_swigt__p_arma__RowT_unsigned_int_t,
  &_swigt__p_arma__RowT_unsigned_long_long_t,
  &_swigt__p_arma__RowT_unsigned_long_t,
  &_swigt__p_arma__arma_rng,
  &_swigt__p_arma_rng_cxx11__seed_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_seed_type,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__string,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
};

static swig_cast_info _swigc__p_ColT_double_t[] = {  {&_swigt__p_ColT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatT_double_t[] = {  {&_swigt__p_MatT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_double_t[] = {  {&_swigt__p_MatrixViewT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_float_t[] = {  {&_swigt__p_MatrixViewT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_int_t[] = {  {&_swigt__p_MatrixViewT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_long_long_t[] = {  {&_swigt__p_MatrixViewT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_long_t[] = {  {&_swigt__p_MatrixViewT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_std__complexT_double_t_t[] = {  {&_swigt__p_MatrixViewT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_std__complexT_float_t_t[] = {  {&_swigt__p_MatrixViewT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_unsigned_int_t[] = {  {&_swigt__p_MatrixViewT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_unsigned_long_long_t[] = {  {&_swigt__p_MatrixViewT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewT_unsigned_long_t[] = {  {&_swigt__p_MatrixViewT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_double_t[] = {  {&_swigt__p_arma__ColT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_float_t[] = {  {&_swigt__p_arma__ColT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_int_t[] = {  {&_swigt__p_arma__ColT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_long_long_t[] = {  {&_swigt__p_arma__ColT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_long_t[] = {  {&_swigt__p_arma__ColT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_std__complexT_double_t_t[] = {  {&_swigt__p_arma__ColT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_std__complexT_float_t_t[] = {  {&_swigt__p_arma__ColT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_unsigned_int_t[] = {  {&_swigt__p_arma__ColT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_unsigned_long_long_t[] = {  {&_swigt__p_arma__ColT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__ColT_unsigned_long_t[] = {  {&_swigt__p_arma__ColT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_double_t[] = {  {&_swigt__p_arma__MatT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_float_t[] = {  {&_swigt__p_arma__MatT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_int_t[] = {  {&_swigt__p_arma__MatT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_long_long_t[] = {  {&_swigt__p_arma__MatT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_long_t[] = {  {&_swigt__p_arma__MatT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_std__complexT_double_t_t[] = {  {&_swigt__p_arma__MatT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_std__complexT_float_t_t[] = {  {&_swigt__p_arma__MatT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_unsigned_int_t[] = {  {&_swigt__p_arma__MatT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_unsigned_long_long_t[] = {  {&_swigt__p_arma__MatT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__MatT_unsigned_long_t[] = {  {&_swigt__p_arma__MatT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_double_t[] = {  {&_swigt__p_arma__RowT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_float_t[] = {  {&_swigt__p_arma__RowT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_int_t[] = {  {&_swigt__p_arma__RowT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_long_long_t[] = {  {&_swigt__p_arma__RowT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_long_t[] = {  {&_swigt__p_arma__RowT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_std__complexT_double_t_t[] = {  {&_swigt__p_arma__RowT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_std__complexT_float_t_t[] = {  {&_swigt__p_arma__RowT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_unsigned_int_t[] = {  {&_swigt__p_arma__RowT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_unsigned_long_long_t[] = {  {&_swigt__p_arma__RowT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__RowT_unsigned_long_t[] = {  {&_swigt__p_arma__RowT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma__arma_rng[] = {  {&_swigt__p_arma__arma_rng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arma_rng_cxx11__seed_type[] = {  {&_swigt__p_arma_rng_cxx11__seed_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seed_type[] = {  {&_swigt__p_seed_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ColT_double_t,
  _swigc__p_MatT_double_t,
  _swigc__p_MatrixViewT_double_t,
  _swigc__p_MatrixViewT_float_t,
  _swigc__p_MatrixViewT_int_t,
  _swigc__p_MatrixViewT_long_long_t,
  _swigc__p_MatrixViewT_long_t,
  _swigc__p_MatrixViewT_std__complexT_double_t_t,
  _swigc__p_MatrixViewT_std__complexT_float_t_t,
  _swigc__p_MatrixViewT_unsigned_int_t,
  _swigc__p_MatrixViewT_unsigned_long_long_t,
  _swigc__p_MatrixViewT_unsigned_long_t,
  _swigc__p_arma__ColT_double_t,
  _swigc__p_arma__ColT_float_t,
  _swigc__p_arma__ColT_int_t,
  _swigc__p_arma__ColT_long_long_t,
  _swigc__p_arma__ColT_long_t,
  _swigc__p_arma__ColT_std__complexT_double_t_t,
  _swigc__p_arma__ColT_std__complexT_float_t_t,
  _swigc__p_arma__ColT_unsigned_int_t,
  _swigc__p_arma__ColT_unsigned_long_long_t,
  _swigc__p_arma__ColT_unsigned_long_t,
  _swigc__p_arma__MatT_double_t,
  _swigc__p_arma__MatT_float_t,
  _swigc__p_arma__MatT_int_t,
  _swigc__p_arma__MatT_long_long_t,
  _swigc__p_arma__MatT_long_t,
  _swigc__p_arma__MatT_std__complexT_double_t_t,
  _swigc__p_arma__MatT_std__complexT_float_t_t,
  _swigc__p_arma__MatT_unsigned_int_t,
  _swigc__p_arma__MatT_unsigned_long_long_t,
  _swigc__p_arma__MatT_unsigned_long_t,
  _swigc__p_arma__RowT_double_t,
  _swigc__p_arma__RowT_float_t,
  _swigc__p_arma__RowT_int_t,
  _swigc__p_arma__RowT_long_long_t,
  _swigc__p_arma__RowT_long_t,
  _swigc__p_arma__RowT_std__complexT_double_t_t,
  _swigc__p_arma__RowT_std__complexT_float_t_t,
  _swigc__p_arma__RowT_unsigned_int_t,
  _swigc__p_arma__RowT_unsigned_long_long_t,
  _swigc__p_arma__RowT_unsigned_long_t,
  _swigc__p_arma__arma_rng,
  _swigc__p_arma_rng_cxx11__seed_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_seed_type,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__string,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}


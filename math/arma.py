# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _arma
else:
    import _arma

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _arma.delete_SwigPyIterator

    def value(self):
        return _arma.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _arma.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _arma.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _arma.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _arma.SwigPyIterator_equal(self, x)

    def copy(self):
        return _arma.SwigPyIterator_copy(self)

    def next(self):
        return _arma.SwigPyIterator_next(self)

    def __next__(self):
        return _arma.SwigPyIterator___next__(self)

    def previous(self):
        return _arma.SwigPyIterator_previous(self)

    def advance(self, n):
        return _arma.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _arma.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _arma.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _arma.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _arma.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _arma.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _arma.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _arma:
_arma.SwigPyIterator_swigregister(SwigPyIterator)

APPROX_ABSDIFF = _arma.APPROX_ABSDIFF
APPROX_RELDIFF = _arma.APPROX_RELDIFF
APPROX_BOTH = _arma.APPROX_BOTH
class fcomplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.fcomplex_swiginit(self, _arma.new_fcomplex(*args))

    def real(self, *args):
        return _arma.fcomplex_real(self, *args)

    def imag(self, *args):
        return _arma.fcomplex_imag(self, *args)

    def __add__(self, b):
        return _arma.fcomplex___add__(self, b)

    def __sub__(self, b):
        return _arma.fcomplex___sub__(self, b)

    def __div__(self, b):
        return _arma.fcomplex___div__(self, b)

    def __mul__(self, b):
        return _arma.fcomplex___mul__(self, b)

    def __pow__(self, *args):
        return _arma.fcomplex___pow__(self, *args)

    def __eq__(self, b):
        return _arma.fcomplex___eq__(self, b)
    __swig_destroy__ = _arma.delete_fcomplex

# Register fcomplex in _arma:
_arma.fcomplex_swigregister(fcomplex)

class xcomplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.xcomplex_swiginit(self, _arma.new_xcomplex(*args))

    def real(self, *args):
        return _arma.xcomplex_real(self, *args)

    def imag(self, *args):
        return _arma.xcomplex_imag(self, *args)

    def __add__(self, b):
        return _arma.xcomplex___add__(self, b)

    def __sub__(self, b):
        return _arma.xcomplex___sub__(self, b)

    def __div__(self, b):
        return _arma.xcomplex___div__(self, b)

    def __mul__(self, b):
        return _arma.xcomplex___mul__(self, b)

    def __pow__(self, *args):
        return _arma.xcomplex___pow__(self, *args)

    def __eq__(self, b):
        return _arma.xcomplex___eq__(self, b)
    __swig_destroy__ = _arma.delete_xcomplex

# Register xcomplex in _arma:
_arma.xcomplex_swigregister(xcomplex)

class fmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.fmat_swiginit(self, _arma.new_fmat(*args))
    __swig_destroy__ = _arma.delete_fmat

    def __call__(self, i, j):
        return _arma.fmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.fmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.fmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.fmat_ones(self, *args)

    def eye(self, *args):
        return _arma.fmat_eye(self, *args)

    def randu(self, *args):
        return _arma.fmat_randu(self, *args)

    def randn(self, *args):
        return _arma.fmat_randn(self, *args)

    def fill(self, val):
        return _arma.fmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.fmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.fmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.fmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.fmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.fmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.fmat_copy_size(self, m)

    def reset(self):
        return _arma.fmat_reset(self)

    def memptr(self):
        return _arma.fmat_memptr(self)

    def colptr(self, n):
        return _arma.fmat_colptr(self, n)

    def as_col(self):
        return _arma.fmat_as_col(self)

    def as_row(self):
        return _arma.fmat_as_row(self)

    def t(self):
        return _arma.fmat_t(self)

    def min(self):
        return _arma.fmat_min(self)

    def max(self):
        return _arma.fmat_max(self)

    def index_min(self):
        return _arma.fmat_index_min(self)

    def index_max(self):
        return _arma.fmat_index_max(self)

    def eval(self):
        return _arma.fmat_eval(self)

    def is_empty(self):
        return _arma.fmat_is_empty(self)

    def is_trimatu(self):
        return _arma.fmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.fmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.fmat_is_diagmat(self)

    def is_square(self):
        return _arma.fmat_is_square(self)

    def is_symmetric(self):
        return _arma.fmat_is_symmetric(self)

    def is_zero(self):
        return _arma.fmat_is_zero(self)

    def is_finite(self):
        return _arma.fmat_is_finite(self)

    def has_inf(self):
        return _arma.fmat_has_inf(self)

    def has_nan(self):
        return _arma.fmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.fmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.fmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.fmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.fmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.fmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.fmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.fmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.fmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.fmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.fmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.fmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.fmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.fmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.fmat_save(self, filename)

    def load(self, filename):
        return _arma.fmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.fmat___getitem__(self, row)

    def __neg__(self):
        return _arma.fmat___neg__(self)

    def __add__(self, *args):
        return _arma.fmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.fmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.fmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.fmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.fmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.fmat_copy(self, m)

    def rows(self):
        return _arma.fmat_rows(self)

    def cols(self):
        return _arma.fmat_cols(self)

    def set_row(self, r, v):
        return _arma.fmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.fmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.fmat_get_col(self, c)

    def get_row(self, r):
        return _arma.fmat_get_row(self, r)

    def println(self, *args):
        return _arma.fmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.fmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.fmat_addToEachCol(self, v)

    def data(self):
        return _arma.fmat_data(self)

# Register fmat in _arma:
_arma.fmat_swigregister(fmat)

class dmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.dmat_swiginit(self, _arma.new_dmat(*args))
    __swig_destroy__ = _arma.delete_dmat

    def __call__(self, i, j):
        return _arma.dmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.dmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.dmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.dmat_ones(self, *args)

    def eye(self, *args):
        return _arma.dmat_eye(self, *args)

    def randu(self, *args):
        return _arma.dmat_randu(self, *args)

    def randn(self, *args):
        return _arma.dmat_randn(self, *args)

    def fill(self, val):
        return _arma.dmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.dmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.dmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.dmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.dmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.dmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.dmat_copy_size(self, m)

    def reset(self):
        return _arma.dmat_reset(self)

    def memptr(self):
        return _arma.dmat_memptr(self)

    def colptr(self, n):
        return _arma.dmat_colptr(self, n)

    def as_col(self):
        return _arma.dmat_as_col(self)

    def as_row(self):
        return _arma.dmat_as_row(self)

    def t(self):
        return _arma.dmat_t(self)

    def min(self):
        return _arma.dmat_min(self)

    def max(self):
        return _arma.dmat_max(self)

    def index_min(self):
        return _arma.dmat_index_min(self)

    def index_max(self):
        return _arma.dmat_index_max(self)

    def eval(self):
        return _arma.dmat_eval(self)

    def is_empty(self):
        return _arma.dmat_is_empty(self)

    def is_trimatu(self):
        return _arma.dmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.dmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.dmat_is_diagmat(self)

    def is_square(self):
        return _arma.dmat_is_square(self)

    def is_symmetric(self):
        return _arma.dmat_is_symmetric(self)

    def is_zero(self):
        return _arma.dmat_is_zero(self)

    def is_finite(self):
        return _arma.dmat_is_finite(self)

    def has_inf(self):
        return _arma.dmat_has_inf(self)

    def has_nan(self):
        return _arma.dmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.dmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.dmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.dmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.dmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.dmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.dmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.dmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.dmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.dmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.dmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.dmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.dmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.dmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.dmat_save(self, filename)

    def load(self, filename):
        return _arma.dmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.dmat___getitem__(self, row)

    def __neg__(self):
        return _arma.dmat___neg__(self)

    def __add__(self, *args):
        return _arma.dmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.dmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.dmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.dmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.dmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.dmat_copy(self, m)

    def rows(self):
        return _arma.dmat_rows(self)

    def cols(self):
        return _arma.dmat_cols(self)

    def set_row(self, r, v):
        return _arma.dmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.dmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.dmat_get_col(self, c)

    def get_row(self, r):
        return _arma.dmat_get_row(self, r)

    def println(self, *args):
        return _arma.dmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.dmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.dmat_addToEachCol(self, v)

    def data(self):
        return _arma.dmat_data(self)

# Register dmat in _arma:
_arma.dmat_swigregister(dmat)

class cfmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.cfmat_swiginit(self, _arma.new_cfmat(*args))
    __swig_destroy__ = _arma.delete_cfmat

    def __call__(self, i, j):
        return _arma.cfmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.cfmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.cfmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.cfmat_ones(self, *args)

    def eye(self, *args):
        return _arma.cfmat_eye(self, *args)

    def randu(self, *args):
        return _arma.cfmat_randu(self, *args)

    def randn(self, *args):
        return _arma.cfmat_randn(self, *args)

    def fill(self, val):
        return _arma.cfmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.cfmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.cfmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.cfmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.cfmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.cfmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.cfmat_copy_size(self, m)

    def reset(self):
        return _arma.cfmat_reset(self)

    def memptr(self):
        return _arma.cfmat_memptr(self)

    def colptr(self, n):
        return _arma.cfmat_colptr(self, n)

    def as_col(self):
        return _arma.cfmat_as_col(self)

    def as_row(self):
        return _arma.cfmat_as_row(self)

    def t(self):
        return _arma.cfmat_t(self)

    def min(self):
        return _arma.cfmat_min(self)

    def max(self):
        return _arma.cfmat_max(self)

    def index_min(self):
        return _arma.cfmat_index_min(self)

    def index_max(self):
        return _arma.cfmat_index_max(self)

    def eval(self):
        return _arma.cfmat_eval(self)

    def is_empty(self):
        return _arma.cfmat_is_empty(self)

    def is_trimatu(self):
        return _arma.cfmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.cfmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.cfmat_is_diagmat(self)

    def is_square(self):
        return _arma.cfmat_is_square(self)

    def is_symmetric(self):
        return _arma.cfmat_is_symmetric(self)

    def is_zero(self):
        return _arma.cfmat_is_zero(self)

    def is_finite(self):
        return _arma.cfmat_is_finite(self)

    def has_inf(self):
        return _arma.cfmat_has_inf(self)

    def has_nan(self):
        return _arma.cfmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.cfmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.cfmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.cfmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.cfmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.cfmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.cfmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.cfmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.cfmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.cfmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.cfmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.cfmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.cfmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.cfmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.cfmat_save(self, filename)

    def load(self, filename):
        return _arma.cfmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.cfmat___getitem__(self, row)

    def __neg__(self):
        return _arma.cfmat___neg__(self)

    def __add__(self, *args):
        return _arma.cfmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.cfmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.cfmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.cfmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.cfmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.cfmat_copy(self, m)

    def rows(self):
        return _arma.cfmat_rows(self)

    def cols(self):
        return _arma.cfmat_cols(self)

    def set_row(self, r, v):
        return _arma.cfmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.cfmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.cfmat_get_col(self, c)

    def get_row(self, r):
        return _arma.cfmat_get_row(self, r)

    def println(self, *args):
        return _arma.cfmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.cfmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.cfmat_addToEachCol(self, v)

    def data(self):
        return _arma.cfmat_data(self)

# Register cfmat in _arma:
_arma.cfmat_swigregister(cfmat)

class cxmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.cxmat_swiginit(self, _arma.new_cxmat(*args))
    __swig_destroy__ = _arma.delete_cxmat

    def __call__(self, i, j):
        return _arma.cxmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.cxmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.cxmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.cxmat_ones(self, *args)

    def eye(self, *args):
        return _arma.cxmat_eye(self, *args)

    def randu(self, *args):
        return _arma.cxmat_randu(self, *args)

    def randn(self, *args):
        return _arma.cxmat_randn(self, *args)

    def fill(self, val):
        return _arma.cxmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.cxmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.cxmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.cxmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.cxmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.cxmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.cxmat_copy_size(self, m)

    def reset(self):
        return _arma.cxmat_reset(self)

    def memptr(self):
        return _arma.cxmat_memptr(self)

    def colptr(self, n):
        return _arma.cxmat_colptr(self, n)

    def as_col(self):
        return _arma.cxmat_as_col(self)

    def as_row(self):
        return _arma.cxmat_as_row(self)

    def t(self):
        return _arma.cxmat_t(self)

    def min(self):
        return _arma.cxmat_min(self)

    def max(self):
        return _arma.cxmat_max(self)

    def index_min(self):
        return _arma.cxmat_index_min(self)

    def index_max(self):
        return _arma.cxmat_index_max(self)

    def eval(self):
        return _arma.cxmat_eval(self)

    def is_empty(self):
        return _arma.cxmat_is_empty(self)

    def is_trimatu(self):
        return _arma.cxmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.cxmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.cxmat_is_diagmat(self)

    def is_square(self):
        return _arma.cxmat_is_square(self)

    def is_symmetric(self):
        return _arma.cxmat_is_symmetric(self)

    def is_zero(self):
        return _arma.cxmat_is_zero(self)

    def is_finite(self):
        return _arma.cxmat_is_finite(self)

    def has_inf(self):
        return _arma.cxmat_has_inf(self)

    def has_nan(self):
        return _arma.cxmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.cxmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.cxmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.cxmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.cxmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.cxmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.cxmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.cxmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.cxmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.cxmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.cxmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.cxmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.cxmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.cxmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.cxmat_save(self, filename)

    def load(self, filename):
        return _arma.cxmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.cxmat___getitem__(self, row)

    def __neg__(self):
        return _arma.cxmat___neg__(self)

    def __add__(self, *args):
        return _arma.cxmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.cxmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.cxmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.cxmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.cxmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.cxmat_copy(self, m)

    def rows(self):
        return _arma.cxmat_rows(self)

    def cols(self):
        return _arma.cxmat_cols(self)

    def set_row(self, r, v):
        return _arma.cxmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.cxmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.cxmat_get_col(self, c)

    def get_row(self, r):
        return _arma.cxmat_get_row(self, r)

    def println(self, *args):
        return _arma.cxmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.cxmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.cxmat_addToEachCol(self, v)

    def data(self):
        return _arma.cxmat_data(self)

# Register cxmat in _arma:
_arma.cxmat_swigregister(cxmat)

class imat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.imat_swiginit(self, _arma.new_imat(*args))
    __swig_destroy__ = _arma.delete_imat

    def __call__(self, i, j):
        return _arma.imat___call__(self, i, j)

    def at(self, r, c):
        return _arma.imat_at(self, r, c)

    def zeros(self, *args):
        return _arma.imat_zeros(self, *args)

    def ones(self, *args):
        return _arma.imat_ones(self, *args)

    def eye(self, *args):
        return _arma.imat_eye(self, *args)

    def randu(self, *args):
        return _arma.imat_randu(self, *args)

    def randn(self, *args):
        return _arma.imat_randn(self, *args)

    def fill(self, val):
        return _arma.imat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.imat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.imat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.imat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.imat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.imat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.imat_copy_size(self, m)

    def reset(self):
        return _arma.imat_reset(self)

    def memptr(self):
        return _arma.imat_memptr(self)

    def colptr(self, n):
        return _arma.imat_colptr(self, n)

    def as_col(self):
        return _arma.imat_as_col(self)

    def as_row(self):
        return _arma.imat_as_row(self)

    def t(self):
        return _arma.imat_t(self)

    def min(self):
        return _arma.imat_min(self)

    def max(self):
        return _arma.imat_max(self)

    def index_min(self):
        return _arma.imat_index_min(self)

    def index_max(self):
        return _arma.imat_index_max(self)

    def eval(self):
        return _arma.imat_eval(self)

    def is_empty(self):
        return _arma.imat_is_empty(self)

    def is_trimatu(self):
        return _arma.imat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.imat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.imat_is_diagmat(self)

    def is_square(self):
        return _arma.imat_is_square(self)

    def is_symmetric(self):
        return _arma.imat_is_symmetric(self)

    def is_zero(self):
        return _arma.imat_is_zero(self)

    def is_finite(self):
        return _arma.imat_is_finite(self)

    def has_inf(self):
        return _arma.imat_has_inf(self)

    def has_nan(self):
        return _arma.imat_has_nan(self)

    def raw_print(self, *args):
        return _arma.imat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.imat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.imat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.imat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.imat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.imat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.imat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.imat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.imat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.imat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.imat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.imat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.imat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.imat_save(self, filename)

    def load(self, filename):
        return _arma.imat_load(self, filename)

    def __getitem__(self, row):
        return _arma.imat___getitem__(self, row)

    def __neg__(self):
        return _arma.imat___neg__(self)

    def __add__(self, *args):
        return _arma.imat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.imat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.imat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.imat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.imat___setitem__(self, *args)

    def copy(self, m):
        return _arma.imat_copy(self, m)

    def rows(self):
        return _arma.imat_rows(self)

    def cols(self):
        return _arma.imat_cols(self)

    def set_row(self, r, v):
        return _arma.imat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.imat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.imat_get_col(self, c)

    def get_row(self, r):
        return _arma.imat_get_row(self, r)

    def println(self, *args):
        return _arma.imat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.imat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.imat_addToEachCol(self, v)

    def data(self):
        return _arma.imat_data(self)

# Register imat in _arma:
_arma.imat_swigregister(imat)

class umat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.umat_swiginit(self, _arma.new_umat(*args))
    __swig_destroy__ = _arma.delete_umat

    def __call__(self, i, j):
        return _arma.umat___call__(self, i, j)

    def at(self, r, c):
        return _arma.umat_at(self, r, c)

    def zeros(self, *args):
        return _arma.umat_zeros(self, *args)

    def ones(self, *args):
        return _arma.umat_ones(self, *args)

    def eye(self, *args):
        return _arma.umat_eye(self, *args)

    def randu(self, *args):
        return _arma.umat_randu(self, *args)

    def randn(self, *args):
        return _arma.umat_randn(self, *args)

    def fill(self, val):
        return _arma.umat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.umat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.umat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.umat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.umat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.umat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.umat_copy_size(self, m)

    def reset(self):
        return _arma.umat_reset(self)

    def memptr(self):
        return _arma.umat_memptr(self)

    def colptr(self, n):
        return _arma.umat_colptr(self, n)

    def as_col(self):
        return _arma.umat_as_col(self)

    def as_row(self):
        return _arma.umat_as_row(self)

    def t(self):
        return _arma.umat_t(self)

    def min(self):
        return _arma.umat_min(self)

    def max(self):
        return _arma.umat_max(self)

    def index_min(self):
        return _arma.umat_index_min(self)

    def index_max(self):
        return _arma.umat_index_max(self)

    def eval(self):
        return _arma.umat_eval(self)

    def is_empty(self):
        return _arma.umat_is_empty(self)

    def is_trimatu(self):
        return _arma.umat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.umat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.umat_is_diagmat(self)

    def is_square(self):
        return _arma.umat_is_square(self)

    def is_symmetric(self):
        return _arma.umat_is_symmetric(self)

    def is_zero(self):
        return _arma.umat_is_zero(self)

    def is_finite(self):
        return _arma.umat_is_finite(self)

    def has_inf(self):
        return _arma.umat_has_inf(self)

    def has_nan(self):
        return _arma.umat_has_nan(self)

    def raw_print(self, *args):
        return _arma.umat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.umat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.umat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.umat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.umat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.umat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.umat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.umat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.umat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.umat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.umat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.umat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.umat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.umat_save(self, filename)

    def load(self, filename):
        return _arma.umat_load(self, filename)

    def __getitem__(self, row):
        return _arma.umat___getitem__(self, row)

    def __neg__(self):
        return _arma.umat___neg__(self)

    def __add__(self, *args):
        return _arma.umat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.umat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.umat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.umat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.umat___setitem__(self, *args)

    def copy(self, m):
        return _arma.umat_copy(self, m)

    def rows(self):
        return _arma.umat_rows(self)

    def cols(self):
        return _arma.umat_cols(self)

    def set_row(self, r, v):
        return _arma.umat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.umat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.umat_get_col(self, c)

    def get_row(self, r):
        return _arma.umat_get_row(self, r)

    def println(self, *args):
        return _arma.umat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.umat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.umat_addToEachCol(self, v)

    def data(self):
        return _arma.umat_data(self)

# Register umat in _arma:
_arma.umat_swigregister(umat)

class lmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.lmat_swiginit(self, _arma.new_lmat(*args))
    __swig_destroy__ = _arma.delete_lmat

    def __call__(self, i, j):
        return _arma.lmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.lmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.lmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.lmat_ones(self, *args)

    def eye(self, *args):
        return _arma.lmat_eye(self, *args)

    def randu(self, *args):
        return _arma.lmat_randu(self, *args)

    def randn(self, *args):
        return _arma.lmat_randn(self, *args)

    def fill(self, val):
        return _arma.lmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.lmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.lmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.lmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.lmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.lmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.lmat_copy_size(self, m)

    def reset(self):
        return _arma.lmat_reset(self)

    def memptr(self):
        return _arma.lmat_memptr(self)

    def colptr(self, n):
        return _arma.lmat_colptr(self, n)

    def as_col(self):
        return _arma.lmat_as_col(self)

    def as_row(self):
        return _arma.lmat_as_row(self)

    def t(self):
        return _arma.lmat_t(self)

    def min(self):
        return _arma.lmat_min(self)

    def max(self):
        return _arma.lmat_max(self)

    def index_min(self):
        return _arma.lmat_index_min(self)

    def index_max(self):
        return _arma.lmat_index_max(self)

    def eval(self):
        return _arma.lmat_eval(self)

    def is_empty(self):
        return _arma.lmat_is_empty(self)

    def is_trimatu(self):
        return _arma.lmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.lmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.lmat_is_diagmat(self)

    def is_square(self):
        return _arma.lmat_is_square(self)

    def is_symmetric(self):
        return _arma.lmat_is_symmetric(self)

    def is_zero(self):
        return _arma.lmat_is_zero(self)

    def is_finite(self):
        return _arma.lmat_is_finite(self)

    def has_inf(self):
        return _arma.lmat_has_inf(self)

    def has_nan(self):
        return _arma.lmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.lmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.lmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.lmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.lmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.lmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.lmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.lmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.lmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.lmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.lmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.lmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.lmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.lmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.lmat_save(self, filename)

    def load(self, filename):
        return _arma.lmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.lmat___getitem__(self, row)

    def __neg__(self):
        return _arma.lmat___neg__(self)

    def __add__(self, *args):
        return _arma.lmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.lmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.lmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.lmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.lmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.lmat_copy(self, m)

    def rows(self):
        return _arma.lmat_rows(self)

    def cols(self):
        return _arma.lmat_cols(self)

    def set_row(self, r, v):
        return _arma.lmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.lmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.lmat_get_col(self, c)

    def get_row(self, r):
        return _arma.lmat_get_row(self, r)

    def println(self, *args):
        return _arma.lmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.lmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.lmat_addToEachCol(self, v)

    def data(self):
        return _arma.lmat_data(self)

# Register lmat in _arma:
_arma.lmat_swigregister(lmat)

class ulmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.ulmat_swiginit(self, _arma.new_ulmat(*args))
    __swig_destroy__ = _arma.delete_ulmat

    def __call__(self, i, j):
        return _arma.ulmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.ulmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.ulmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.ulmat_ones(self, *args)

    def eye(self, *args):
        return _arma.ulmat_eye(self, *args)

    def randu(self, *args):
        return _arma.ulmat_randu(self, *args)

    def randn(self, *args):
        return _arma.ulmat_randn(self, *args)

    def fill(self, val):
        return _arma.ulmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.ulmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.ulmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.ulmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.ulmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.ulmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.ulmat_copy_size(self, m)

    def reset(self):
        return _arma.ulmat_reset(self)

    def memptr(self):
        return _arma.ulmat_memptr(self)

    def colptr(self, n):
        return _arma.ulmat_colptr(self, n)

    def as_col(self):
        return _arma.ulmat_as_col(self)

    def as_row(self):
        return _arma.ulmat_as_row(self)

    def t(self):
        return _arma.ulmat_t(self)

    def min(self):
        return _arma.ulmat_min(self)

    def max(self):
        return _arma.ulmat_max(self)

    def index_min(self):
        return _arma.ulmat_index_min(self)

    def index_max(self):
        return _arma.ulmat_index_max(self)

    def eval(self):
        return _arma.ulmat_eval(self)

    def is_empty(self):
        return _arma.ulmat_is_empty(self)

    def is_trimatu(self):
        return _arma.ulmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.ulmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.ulmat_is_diagmat(self)

    def is_square(self):
        return _arma.ulmat_is_square(self)

    def is_symmetric(self):
        return _arma.ulmat_is_symmetric(self)

    def is_zero(self):
        return _arma.ulmat_is_zero(self)

    def is_finite(self):
        return _arma.ulmat_is_finite(self)

    def has_inf(self):
        return _arma.ulmat_has_inf(self)

    def has_nan(self):
        return _arma.ulmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.ulmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.ulmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.ulmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.ulmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.ulmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.ulmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.ulmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.ulmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.ulmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.ulmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.ulmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.ulmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.ulmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.ulmat_save(self, filename)

    def load(self, filename):
        return _arma.ulmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.ulmat___getitem__(self, row)

    def __neg__(self):
        return _arma.ulmat___neg__(self)

    def __add__(self, *args):
        return _arma.ulmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.ulmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.ulmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.ulmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.ulmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.ulmat_copy(self, m)

    def rows(self):
        return _arma.ulmat_rows(self)

    def cols(self):
        return _arma.ulmat_cols(self)

    def set_row(self, r, v):
        return _arma.ulmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.ulmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.ulmat_get_col(self, c)

    def get_row(self, r):
        return _arma.ulmat_get_row(self, r)

    def println(self, *args):
        return _arma.ulmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.ulmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.ulmat_addToEachCol(self, v)

    def data(self):
        return _arma.ulmat_data(self)

# Register ulmat in _arma:
_arma.ulmat_swigregister(ulmat)

class llmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.llmat_swiginit(self, _arma.new_llmat(*args))
    __swig_destroy__ = _arma.delete_llmat

    def __call__(self, i, j):
        return _arma.llmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.llmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.llmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.llmat_ones(self, *args)

    def eye(self, *args):
        return _arma.llmat_eye(self, *args)

    def randu(self, *args):
        return _arma.llmat_randu(self, *args)

    def randn(self, *args):
        return _arma.llmat_randn(self, *args)

    def fill(self, val):
        return _arma.llmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.llmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.llmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.llmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.llmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.llmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.llmat_copy_size(self, m)

    def reset(self):
        return _arma.llmat_reset(self)

    def memptr(self):
        return _arma.llmat_memptr(self)

    def colptr(self, n):
        return _arma.llmat_colptr(self, n)

    def as_col(self):
        return _arma.llmat_as_col(self)

    def as_row(self):
        return _arma.llmat_as_row(self)

    def t(self):
        return _arma.llmat_t(self)

    def min(self):
        return _arma.llmat_min(self)

    def max(self):
        return _arma.llmat_max(self)

    def index_min(self):
        return _arma.llmat_index_min(self)

    def index_max(self):
        return _arma.llmat_index_max(self)

    def eval(self):
        return _arma.llmat_eval(self)

    def is_empty(self):
        return _arma.llmat_is_empty(self)

    def is_trimatu(self):
        return _arma.llmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.llmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.llmat_is_diagmat(self)

    def is_square(self):
        return _arma.llmat_is_square(self)

    def is_symmetric(self):
        return _arma.llmat_is_symmetric(self)

    def is_zero(self):
        return _arma.llmat_is_zero(self)

    def is_finite(self):
        return _arma.llmat_is_finite(self)

    def has_inf(self):
        return _arma.llmat_has_inf(self)

    def has_nan(self):
        return _arma.llmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.llmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.llmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.llmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.llmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.llmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.llmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.llmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.llmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.llmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.llmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.llmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.llmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.llmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.llmat_save(self, filename)

    def load(self, filename):
        return _arma.llmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.llmat___getitem__(self, row)

    def __neg__(self):
        return _arma.llmat___neg__(self)

    def __add__(self, *args):
        return _arma.llmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.llmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.llmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.llmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.llmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.llmat_copy(self, m)

    def rows(self):
        return _arma.llmat_rows(self)

    def cols(self):
        return _arma.llmat_cols(self)

    def set_row(self, r, v):
        return _arma.llmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.llmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.llmat_get_col(self, c)

    def get_row(self, r):
        return _arma.llmat_get_row(self, r)

    def println(self, *args):
        return _arma.llmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.llmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.llmat_addToEachCol(self, v)

    def data(self):
        return _arma.llmat_data(self)

# Register llmat in _arma:
_arma.llmat_swigregister(llmat)

class ullmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.ullmat_swiginit(self, _arma.new_ullmat(*args))
    __swig_destroy__ = _arma.delete_ullmat

    def __call__(self, i, j):
        return _arma.ullmat___call__(self, i, j)

    def at(self, r, c):
        return _arma.ullmat_at(self, r, c)

    def zeros(self, *args):
        return _arma.ullmat_zeros(self, *args)

    def ones(self, *args):
        return _arma.ullmat_ones(self, *args)

    def eye(self, *args):
        return _arma.ullmat_eye(self, *args)

    def randu(self, *args):
        return _arma.ullmat_randu(self, *args)

    def randn(self, *args):
        return _arma.ullmat_randn(self, *args)

    def fill(self, val):
        return _arma.ullmat_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.ullmat_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.ullmat_clamp(self, min, max)

    def set_size(self, r, c):
        return _arma.ullmat_set_size(self, r, c)

    def reshape(self, r, c):
        return _arma.ullmat_reshape(self, r, c)

    def resize(self, r, c):
        return _arma.ullmat_resize(self, r, c)

    def copy_size(self, m):
        return _arma.ullmat_copy_size(self, m)

    def reset(self):
        return _arma.ullmat_reset(self)

    def memptr(self):
        return _arma.ullmat_memptr(self)

    def colptr(self, n):
        return _arma.ullmat_colptr(self, n)

    def as_col(self):
        return _arma.ullmat_as_col(self)

    def as_row(self):
        return _arma.ullmat_as_row(self)

    def t(self):
        return _arma.ullmat_t(self)

    def min(self):
        return _arma.ullmat_min(self)

    def max(self):
        return _arma.ullmat_max(self)

    def index_min(self):
        return _arma.ullmat_index_min(self)

    def index_max(self):
        return _arma.ullmat_index_max(self)

    def eval(self):
        return _arma.ullmat_eval(self)

    def is_empty(self):
        return _arma.ullmat_is_empty(self)

    def is_trimatu(self):
        return _arma.ullmat_is_trimatu(self)

    def is_trimatl(self):
        return _arma.ullmat_is_trimatl(self)

    def is_diagmat(self):
        return _arma.ullmat_is_diagmat(self)

    def is_square(self):
        return _arma.ullmat_is_square(self)

    def is_symmetric(self):
        return _arma.ullmat_is_symmetric(self)

    def is_zero(self):
        return _arma.ullmat_is_zero(self)

    def is_finite(self):
        return _arma.ullmat_is_finite(self)

    def has_inf(self):
        return _arma.ullmat_has_inf(self)

    def has_nan(self):
        return _arma.ullmat_has_nan(self)

    def raw_print(self, *args):
        return _arma.ullmat_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.ullmat_brief_print(self, *args)

    def diag(self, k=0):
        return _arma.ullmat_diag(self, k)

    def insert_rows(self, r, n):
        return _arma.ullmat_insert_rows(self, r, n)

    def insert_cols(self, c, n):
        return _arma.ullmat_insert_cols(self, c, n)

    def shed_row(self, n):
        return _arma.ullmat_shed_row(self, n)

    def shed_rows(self, f, l):
        return _arma.ullmat_shed_rows(self, f, l)

    def shed_col(self, n):
        return _arma.ullmat_shed_col(self, n)

    def shed_cols(self, f, l):
        return _arma.ullmat_shed_cols(self, f, l)

    def swap_rows(self, r1, r2):
        return _arma.ullmat_swap_rows(self, r1, r2)

    def swap_cols(self, c1, c2):
        return _arma.ullmat_swap_cols(self, c1, c2)

    def swap(self, x):
        return _arma.ullmat_swap(self, x)

    def submat(self, r1, c1, r2, c2):
        return _arma.ullmat_submat(self, r1, c1, r2, c2)

    def save(self, filename):
        return _arma.ullmat_save(self, filename)

    def load(self, filename):
        return _arma.ullmat_load(self, filename)

    def __getitem__(self, row):
        return _arma.ullmat___getitem__(self, row)

    def __neg__(self):
        return _arma.ullmat___neg__(self)

    def __add__(self, *args):
        return _arma.ullmat___add__(self, *args)

    def __sub__(self, *args):
        return _arma.ullmat___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.ullmat___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.ullmat___truediv__(self, *args)
    __div__ = __truediv__



    def __setitem__(self, *args):
        return _arma.ullmat___setitem__(self, *args)

    def copy(self, m):
        return _arma.ullmat_copy(self, m)

    def rows(self):
        return _arma.ullmat_rows(self)

    def cols(self):
        return _arma.ullmat_cols(self)

    def set_row(self, r, v):
        return _arma.ullmat_set_row(self, r, v)

    def set_col(self, c, v):
        return _arma.ullmat_set_col(self, c, v)

    def get_col(self, c):
        return _arma.ullmat_get_col(self, c)

    def get_row(self, r):
        return _arma.ullmat_get_row(self, r)

    def println(self, *args):
        return _arma.ullmat_println(self, *args)

    def addToEachRow(self, v):
        return _arma.ullmat_addToEachRow(self, v)

    def addToEachCol(self, v):
        return _arma.ullmat_addToEachCol(self, v)

    def data(self):
        return _arma.ullmat_data(self)

# Register ullmat in _arma:
_arma.ullmat_swigregister(ullmat)

class fvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.fvec_swiginit(self, _arma.new_fvec(*args))
    __swig_destroy__ = _arma.delete_fvec

    def at(self, r):
        return _arma.fvec_at(self, r)

    def __call__(self, i):
        return _arma.fvec___call__(self, i)

    def __getitem__(self, i):
        return _arma.fvec___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.fvec___setitem__(self, i, v)

    def __neg__(self):
        return _arma.fvec___neg__(self)

    def __add__(self, *args):
        return _arma.fvec___add__(self, *args)

    def __sub__(self, *args):
        return _arma.fvec___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.fvec___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.fvec___truediv__(self, *args)
    __div__ = __truediv__



    def println(self, *args):
        return _arma.fvec_println(self, *args)

    def data(self):
        return _arma.fvec_data(self)

    def size(self):
        return _arma.fvec_size(self)

    def zeros(self, *args):
        return _arma.fvec_zeros(self, *args)

    def ones(self, *args):
        return _arma.fvec_ones(self, *args)

    def randu(self, *args):
        return _arma.fvec_randu(self, *args)

    def randn(self, *args):
        return _arma.fvec_randn(self, *args)

    def fill(self, val):
        return _arma.fvec_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.fvec_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.fvec_clamp(self, min, max)

    def set_size(self, r):
        return _arma.fvec_set_size(self, r)

    def resize(self, n):
        return _arma.fvec_resize(self, n)

    def copy_size(self, m):
        return _arma.fvec_copy_size(self, m)

    def reset(self):
        return _arma.fvec_reset(self)

    def raw_print(self, *args):
        return _arma.fvec_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.fvec_brief_print(self, *args)

    def memptr(self):
        return _arma.fvec_memptr(self)

# Register fvec in _arma:
_arma.fvec_swigregister(fvec)

class dvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.dvec_swiginit(self, _arma.new_dvec(*args))
    __swig_destroy__ = _arma.delete_dvec

    def at(self, r):
        return _arma.dvec_at(self, r)

    def __call__(self, i):
        return _arma.dvec___call__(self, i)

    def __getitem__(self, i):
        return _arma.dvec___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.dvec___setitem__(self, i, v)

    def __neg__(self):
        return _arma.dvec___neg__(self)

    def __add__(self, *args):
        return _arma.dvec___add__(self, *args)

    def __sub__(self, *args):
        return _arma.dvec___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.dvec___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.dvec___truediv__(self, *args)
    __div__ = __truediv__



    def println(self, *args):
        return _arma.dvec_println(self, *args)

    def data(self):
        return _arma.dvec_data(self)

    def size(self):
        return _arma.dvec_size(self)

    def zeros(self, *args):
        return _arma.dvec_zeros(self, *args)

    def ones(self, *args):
        return _arma.dvec_ones(self, *args)

    def randu(self, *args):
        return _arma.dvec_randu(self, *args)

    def randn(self, *args):
        return _arma.dvec_randn(self, *args)

    def fill(self, val):
        return _arma.dvec_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.dvec_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.dvec_clamp(self, min, max)

    def set_size(self, r):
        return _arma.dvec_set_size(self, r)

    def resize(self, n):
        return _arma.dvec_resize(self, n)

    def copy_size(self, m):
        return _arma.dvec_copy_size(self, m)

    def reset(self):
        return _arma.dvec_reset(self)

    def raw_print(self, *args):
        return _arma.dvec_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.dvec_brief_print(self, *args)

    def memptr(self):
        return _arma.dvec_memptr(self)

# Register dvec in _arma:
_arma.dvec_swigregister(dvec)

class cfvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.cfvec_swiginit(self, _arma.new_cfvec(*args))
    __swig_destroy__ = _arma.delete_cfvec

    def at(self, r):
        return _arma.cfvec_at(self, r)

    def __call__(self, i):
        return _arma.cfvec___call__(self, i)

    def __getitem__(self, i):
        return _arma.cfvec___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.cfvec___setitem__(self, i, v)

    def __neg__(self):
        return _arma.cfvec___neg__(self)

    def __add__(self, *args):
        return _arma.cfvec___add__(self, *args)

    def __sub__(self, *args):
        return _arma.cfvec___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.cfvec___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.cfvec___truediv__(self, *args)
    __div__ = __truediv__



    def println(self, *args):
        return _arma.cfvec_println(self, *args)

    def data(self):
        return _arma.cfvec_data(self)

    def size(self):
        return _arma.cfvec_size(self)

    def zeros(self, *args):
        return _arma.cfvec_zeros(self, *args)

    def ones(self, *args):
        return _arma.cfvec_ones(self, *args)

    def randu(self, *args):
        return _arma.cfvec_randu(self, *args)

    def randn(self, *args):
        return _arma.cfvec_randn(self, *args)

    def fill(self, val):
        return _arma.cfvec_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.cfvec_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.cfvec_clamp(self, min, max)

    def set_size(self, r):
        return _arma.cfvec_set_size(self, r)

    def resize(self, n):
        return _arma.cfvec_resize(self, n)

    def copy_size(self, m):
        return _arma.cfvec_copy_size(self, m)

    def reset(self):
        return _arma.cfvec_reset(self)

    def raw_print(self, *args):
        return _arma.cfvec_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.cfvec_brief_print(self, *args)

    def memptr(self):
        return _arma.cfvec_memptr(self)

# Register cfvec in _arma:
_arma.cfvec_swigregister(cfvec)

class cxvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.cxvec_swiginit(self, _arma.new_cxvec(*args))
    __swig_destroy__ = _arma.delete_cxvec

    def at(self, r):
        return _arma.cxvec_at(self, r)

    def __call__(self, i):
        return _arma.cxvec___call__(self, i)

    def __getitem__(self, i):
        return _arma.cxvec___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.cxvec___setitem__(self, i, v)

    def __neg__(self):
        return _arma.cxvec___neg__(self)

    def __add__(self, *args):
        return _arma.cxvec___add__(self, *args)

    def __sub__(self, *args):
        return _arma.cxvec___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.cxvec___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.cxvec___truediv__(self, *args)
    __div__ = __truediv__



    def println(self, *args):
        return _arma.cxvec_println(self, *args)

    def data(self):
        return _arma.cxvec_data(self)

    def size(self):
        return _arma.cxvec_size(self)

    def zeros(self, *args):
        return _arma.cxvec_zeros(self, *args)

    def ones(self, *args):
        return _arma.cxvec_ones(self, *args)

    def randu(self, *args):
        return _arma.cxvec_randu(self, *args)

    def randn(self, *args):
        return _arma.cxvec_randn(self, *args)

    def fill(self, val):
        return _arma.cxvec_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.cxvec_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.cxvec_clamp(self, min, max)

    def set_size(self, r):
        return _arma.cxvec_set_size(self, r)

    def resize(self, n):
        return _arma.cxvec_resize(self, n)

    def copy_size(self, m):
        return _arma.cxvec_copy_size(self, m)

    def reset(self):
        return _arma.cxvec_reset(self)

    def raw_print(self, *args):
        return _arma.cxvec_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.cxvec_brief_print(self, *args)

    def memptr(self):
        return _arma.cxvec_memptr(self)

# Register cxvec in _arma:
_arma.cxvec_swigregister(cxvec)

class frow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.frow_swiginit(self, _arma.new_frow(*args))
    __swig_destroy__ = _arma.delete_frow

    def at(self, r):
        return _arma.frow_at(self, r)

    def size(self):
        return _arma.frow_size(self)

    def __call__(self, i):
        return _arma.frow___call__(self, i)

    def __getitem__(self, i):
        return _arma.frow___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.frow___setitem__(self, i, v)

    def println(self, *args):
        return _arma.frow_println(self, *args)

    def data(self):
        return _arma.frow_data(self)

    def __neg__(self):
        return _arma.frow___neg__(self)

    def __add__(self, *args):
        return _arma.frow___add__(self, *args)

    def __sub__(self, *args):
        return _arma.frow___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.frow___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.frow___truediv__(self, *args)
    __div__ = __truediv__



    def zeros(self, *args):
        return _arma.frow_zeros(self, *args)

    def ones(self, *args):
        return _arma.frow_ones(self, *args)

    def randu(self, *args):
        return _arma.frow_randu(self, *args)

    def randn(self, *args):
        return _arma.frow_randn(self, *args)

    def fill(self, val):
        return _arma.frow_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.frow_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.frow_clamp(self, min, max)

    def set_size(self, r):
        return _arma.frow_set_size(self, r)

    def resize(self, n):
        return _arma.frow_resize(self, n)

    def copy_size(self, m):
        return _arma.frow_copy_size(self, m)

    def reset(self):
        return _arma.frow_reset(self)

    def memptr(self):
        return _arma.frow_memptr(self)

    def raw_print(self, *args):
        return _arma.frow_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.frow_brief_print(self, *args)

# Register frow in _arma:
_arma.frow_swigregister(frow)

class drow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.drow_swiginit(self, _arma.new_drow(*args))
    __swig_destroy__ = _arma.delete_drow

    def at(self, r):
        return _arma.drow_at(self, r)

    def size(self):
        return _arma.drow_size(self)

    def __call__(self, i):
        return _arma.drow___call__(self, i)

    def __getitem__(self, i):
        return _arma.drow___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.drow___setitem__(self, i, v)

    def println(self, *args):
        return _arma.drow_println(self, *args)

    def data(self):
        return _arma.drow_data(self)

    def __neg__(self):
        return _arma.drow___neg__(self)

    def __add__(self, *args):
        return _arma.drow___add__(self, *args)

    def __sub__(self, *args):
        return _arma.drow___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.drow___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.drow___truediv__(self, *args)
    __div__ = __truediv__



    def zeros(self, *args):
        return _arma.drow_zeros(self, *args)

    def ones(self, *args):
        return _arma.drow_ones(self, *args)

    def randu(self, *args):
        return _arma.drow_randu(self, *args)

    def randn(self, *args):
        return _arma.drow_randn(self, *args)

    def fill(self, val):
        return _arma.drow_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.drow_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.drow_clamp(self, min, max)

    def set_size(self, r):
        return _arma.drow_set_size(self, r)

    def resize(self, n):
        return _arma.drow_resize(self, n)

    def copy_size(self, m):
        return _arma.drow_copy_size(self, m)

    def reset(self):
        return _arma.drow_reset(self)

    def memptr(self):
        return _arma.drow_memptr(self)

    def raw_print(self, *args):
        return _arma.drow_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.drow_brief_print(self, *args)

# Register drow in _arma:
_arma.drow_swigregister(drow)

class cfrow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.cfrow_swiginit(self, _arma.new_cfrow(*args))
    __swig_destroy__ = _arma.delete_cfrow

    def at(self, r):
        return _arma.cfrow_at(self, r)

    def size(self):
        return _arma.cfrow_size(self)

    def __call__(self, i):
        return _arma.cfrow___call__(self, i)

    def __getitem__(self, i):
        return _arma.cfrow___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.cfrow___setitem__(self, i, v)

    def println(self, *args):
        return _arma.cfrow_println(self, *args)

    def data(self):
        return _arma.cfrow_data(self)

    def __neg__(self):
        return _arma.cfrow___neg__(self)

    def __add__(self, *args):
        return _arma.cfrow___add__(self, *args)

    def __sub__(self, *args):
        return _arma.cfrow___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.cfrow___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.cfrow___truediv__(self, *args)
    __div__ = __truediv__



    def zeros(self, *args):
        return _arma.cfrow_zeros(self, *args)

    def ones(self, *args):
        return _arma.cfrow_ones(self, *args)

    def randu(self, *args):
        return _arma.cfrow_randu(self, *args)

    def randn(self, *args):
        return _arma.cfrow_randn(self, *args)

    def fill(self, val):
        return _arma.cfrow_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.cfrow_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.cfrow_clamp(self, min, max)

    def set_size(self, r):
        return _arma.cfrow_set_size(self, r)

    def resize(self, n):
        return _arma.cfrow_resize(self, n)

    def copy_size(self, m):
        return _arma.cfrow_copy_size(self, m)

    def reset(self):
        return _arma.cfrow_reset(self)

    def memptr(self):
        return _arma.cfrow_memptr(self)

    def raw_print(self, *args):
        return _arma.cfrow_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.cfrow_brief_print(self, *args)

# Register cfrow in _arma:
_arma.cfrow_swigregister(cfrow)

class cxrow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _arma.cxrow_swiginit(self, _arma.new_cxrow(*args))
    __swig_destroy__ = _arma.delete_cxrow

    def at(self, r):
        return _arma.cxrow_at(self, r)

    def size(self):
        return _arma.cxrow_size(self)

    def __call__(self, i):
        return _arma.cxrow___call__(self, i)

    def __getitem__(self, i):
        return _arma.cxrow___getitem__(self, i)

    def __setitem__(self, i, v):
        return _arma.cxrow___setitem__(self, i, v)

    def println(self, *args):
        return _arma.cxrow_println(self, *args)

    def data(self):
        return _arma.cxrow_data(self)

    def __neg__(self):
        return _arma.cxrow___neg__(self)

    def __add__(self, *args):
        return _arma.cxrow___add__(self, *args)

    def __sub__(self, *args):
        return _arma.cxrow___sub__(self, *args)

    def __mul__(self, *args):
        return _arma.cxrow___mul__(self, *args)

    def __truediv__(self, *args):
        return _arma.cxrow___truediv__(self, *args)
    __div__ = __truediv__



    def zeros(self, *args):
        return _arma.cxrow_zeros(self, *args)

    def ones(self, *args):
        return _arma.cxrow_ones(self, *args)

    def randu(self, *args):
        return _arma.cxrow_randu(self, *args)

    def randn(self, *args):
        return _arma.cxrow_randn(self, *args)

    def fill(self, val):
        return _arma.cxrow_fill(self, val)

    def replace(self, oldv, newv):
        return _arma.cxrow_replace(self, oldv, newv)

    def clamp(self, min, max):
        return _arma.cxrow_clamp(self, min, max)

    def set_size(self, r):
        return _arma.cxrow_set_size(self, r)

    def resize(self, n):
        return _arma.cxrow_resize(self, n)

    def copy_size(self, m):
        return _arma.cxrow_copy_size(self, m)

    def reset(self):
        return _arma.cxrow_reset(self)

    def memptr(self):
        return _arma.cxrow_memptr(self)

    def raw_print(self, *args):
        return _arma.cxrow_raw_print(self, *args)

    def brief_print(self, *args):
        return _arma.cxrow_brief_print(self, *args)

# Register cxrow in _arma:
_arma.cxrow_swigregister(cxrow)




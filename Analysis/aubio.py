# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _aubio
else:
    import _aubio

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aubio.delete_SwigPyIterator

    def value(self):
        return _aubio.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _aubio.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _aubio.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _aubio.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _aubio.SwigPyIterator_equal(self, x)

    def copy(self):
        return _aubio.SwigPyIterator_copy(self)

    def next(self):
        return _aubio.SwigPyIterator_next(self)

    def __next__(self):
        return _aubio.SwigPyIterator___next__(self)

    def previous(self):
        return _aubio.SwigPyIterator_previous(self)

    def advance(self, n):
        return _aubio.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _aubio.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _aubio.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _aubio.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _aubio.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _aubio.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _aubio.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _aubio:
_aubio.SwigPyIterator_swigregister(SwigPyIterator)

HAVE_AUBIO_DOUBLE = _aubio.HAVE_AUBIO_DOUBLE
AUBIO_SMPL_FMT = _aubio.AUBIO_SMPL_FMT
AUBIO_LSMP_FMT = _aubio.AUBIO_LSMP_FMT
class float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _aubio.float_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _aubio.float_vector___nonzero__(self)

    def __bool__(self):
        return _aubio.float_vector___bool__(self)

    def __len__(self):
        return _aubio.float_vector___len__(self)

    def __getslice__(self, i, j):
        return _aubio.float_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _aubio.float_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _aubio.float_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _aubio.float_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _aubio.float_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _aubio.float_vector___setitem__(self, *args)

    def pop(self):
        return _aubio.float_vector_pop(self)

    def append(self, x):
        return _aubio.float_vector_append(self, x)

    def empty(self):
        return _aubio.float_vector_empty(self)

    def size(self):
        return _aubio.float_vector_size(self)

    def swap(self, v):
        return _aubio.float_vector_swap(self, v)

    def begin(self):
        return _aubio.float_vector_begin(self)

    def end(self):
        return _aubio.float_vector_end(self)

    def rbegin(self):
        return _aubio.float_vector_rbegin(self)

    def rend(self):
        return _aubio.float_vector_rend(self)

    def clear(self):
        return _aubio.float_vector_clear(self)

    def get_allocator(self):
        return _aubio.float_vector_get_allocator(self)

    def pop_back(self):
        return _aubio.float_vector_pop_back(self)

    def erase(self, *args):
        return _aubio.float_vector_erase(self, *args)

    def __init__(self, *args):
        _aubio.float_vector_swiginit(self, _aubio.new_float_vector(*args))

    def push_back(self, x):
        return _aubio.float_vector_push_back(self, x)

    def front(self):
        return _aubio.float_vector_front(self)

    def back(self):
        return _aubio.float_vector_back(self)

    def assign(self, n, x):
        return _aubio.float_vector_assign(self, n, x)

    def resize(self, *args):
        return _aubio.float_vector_resize(self, *args)

    def insert(self, *args):
        return _aubio.float_vector_insert(self, *args)

    def reserve(self, n):
        return _aubio.float_vector_reserve(self, n)

    def capacity(self):
        return _aubio.float_vector_capacity(self)
    __swig_destroy__ = _aubio.delete_float_vector

# Register float_vector in _aubio:
_aubio.float_vector_swigregister(float_vector)

class float_matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _aubio.float_matrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _aubio.float_matrix___nonzero__(self)

    def __bool__(self):
        return _aubio.float_matrix___bool__(self)

    def __len__(self):
        return _aubio.float_matrix___len__(self)

    def __getslice__(self, i, j):
        return _aubio.float_matrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _aubio.float_matrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _aubio.float_matrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _aubio.float_matrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _aubio.float_matrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _aubio.float_matrix___setitem__(self, *args)

    def pop(self):
        return _aubio.float_matrix_pop(self)

    def append(self, x):
        return _aubio.float_matrix_append(self, x)

    def empty(self):
        return _aubio.float_matrix_empty(self)

    def size(self):
        return _aubio.float_matrix_size(self)

    def swap(self, v):
        return _aubio.float_matrix_swap(self, v)

    def begin(self):
        return _aubio.float_matrix_begin(self)

    def end(self):
        return _aubio.float_matrix_end(self)

    def rbegin(self):
        return _aubio.float_matrix_rbegin(self)

    def rend(self):
        return _aubio.float_matrix_rend(self)

    def clear(self):
        return _aubio.float_matrix_clear(self)

    def get_allocator(self):
        return _aubio.float_matrix_get_allocator(self)

    def pop_back(self):
        return _aubio.float_matrix_pop_back(self)

    def erase(self, *args):
        return _aubio.float_matrix_erase(self, *args)

    def __init__(self, *args):
        _aubio.float_matrix_swiginit(self, _aubio.new_float_matrix(*args))

    def push_back(self, x):
        return _aubio.float_matrix_push_back(self, x)

    def front(self):
        return _aubio.float_matrix_front(self)

    def back(self):
        return _aubio.float_matrix_back(self)

    def assign(self, n, x):
        return _aubio.float_matrix_assign(self, n, x)

    def resize(self, *args):
        return _aubio.float_matrix_resize(self, *args)

    def insert(self, *args):
        return _aubio.float_matrix_insert(self, *args)

    def reserve(self, n):
        return _aubio.float_matrix_reserve(self, n)

    def capacity(self):
        return _aubio.float_matrix_capacity(self)
    __swig_destroy__ = _aubio.delete_float_matrix

# Register float_matrix in _aubio:
_aubio.float_matrix_swigregister(float_matrix)

sdesc_complex = _aubio.sdesc_complex
sdesc_energy = _aubio.sdesc_energy
sdesc_hfc = _aubio.sdesc_hfc
sdesc_kl = _aubio.sdesc_kl
sdesc_mkl = _aubio.sdesc_mkl
sdesc_phase = _aubio.sdesc_phase
sdesc_specdiff = _aubio.sdesc_specdiff
sdesc_wphase = _aubio.sdesc_wphase
sdesc_centroid = _aubio.sdesc_centroid
sdesc_decrease = _aubio.sdesc_decrease
sdesc_kurtosis = _aubio.sdesc_kurtosis
sdesc_rolloff = _aubio.sdesc_rolloff
sdesc_skewness = _aubio.sdesc_skewness
sdesc_slope = _aubio.sdesc_slope
sdesc_spread = _aubio.sdesc_spread
rectangle_window = _aubio.rectangle_window
hamming_window = _aubio.hamming_window
hanning_window = _aubio.hanning_window
hanningz_window = _aubio.hanningz_window
blackman_window = _aubio.blackman_window
blackman_harris_window = _aubio.blackman_harris_window
gaussian_window = _aubio.gaussian_window
welch_window = _aubio.welch_window
parzen_window = _aubio.parzen_window
default_window = _aubio.default_window
pitch_mcomb = _aubio.pitch_mcomb
pitch_yinfast = _aubio.pitch_yinfast
pitch_yinfft = _aubio.pitch_yinfft
pitch_yin = _aubio.pitch_yin
pitch_schmitt = _aubio.pitch_schmitt
pitch_fcomb = _aubio.pitch_fcomb
pitch_specacf = _aubio.pitch_specacf
pitch_default = _aubio.pitch_default
AUBIO_UNSTABLE = _aubio.AUBIO_UNSTABLE
class FVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pvec = property(_aubio.FVec_pvec_get, _aubio.FVec_pvec_set)

    def __init__(self, *args):
        _aubio.FVec_swiginit(self, _aubio.new_FVec(*args))
    __swig_destroy__ = _aubio.delete_FVec

    def copy(self, v):
        return _aubio.FVec_copy(self, v)

    def weighted_copy(self, _in, w):
        return _aubio.FVec_weighted_copy(self, _in, w)

    def get_sample(self, position):
        return _aubio.FVec_get_sample(self, position)

    def set_sample(self, pos, v):
        return _aubio.FVec_set_sample(self, pos, v)

    def __getitem(self, index):
        return _aubio.FVec___getitem(self, index)

    def __setitem(self, index, value):
        return _aubio.FVec___setitem(self, index, value)

    def size(self):
        return _aubio.FVec_size(self)

    def resize(self, n):
        return _aubio.FVec_resize(self, n)

    def get_data(self):
        return _aubio.FVec_get_data(self)

    def set_data(self, *args):
        return _aubio.FVec_set_data(self, *args)

    def _print(self):
        return _aubio.FVec__print(self)

    def setall(self, v):
        return _aubio.FVec_setall(self, v)

    def zeros(self):
        return _aubio.FVec_zeros(self)

    def ones(self):
        return _aubio.FVec_ones(self)

    def reverse(self):
        return _aubio.FVec_reverse(self)

    def weight(self, v):
        return _aubio.FVec_weight(self, v)

    def zero_crossing_rate(self):
        return _aubio.FVec_zero_crossing_rate(self)

    def level_lin(self):
        return _aubio.FVec_level_lin(self)

    def db_spl(self):
        return _aubio.FVec_db_spl(self)

    def silence_detection(self, threshold):
        return _aubio.FVec_silence_detection(self, threshold)

    def level_detection(self, threshold):
        return _aubio.FVec_level_detection(self, threshold)

    def clamp(self, absmax):
        return _aubio.FVec_clamp(self, absmax)

    def exp(self):
        return _aubio.FVec_exp(self)

    def cos(self):
        return _aubio.FVec_cos(self)

    def sin(self):
        return _aubio.FVec_sin(self)

    def abs(self):
        return _aubio.FVec_abs(self)

    def sqrt(self):
        return _aubio.FVec_sqrt(self)

    def log10(self):
        return _aubio.FVec_log10(self)

    def log(self):
        return _aubio.FVec_log(self)

    def floor(self):
        return _aubio.FVec_floor(self)

    def ceil(self):
        return _aubio.FVec_ceil(self)

    def round(self):
        return _aubio.FVec_round(self)

    def pow(self, pow):
        return _aubio.FVec_pow(self, pow)

# Register FVec in _aubio:
_aubio.FVec_swigregister(FVec)

class CVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cvec = property(_aubio.CVec_cvec_get, _aubio.CVec_cvec_set)

    def __init__(self, *args):
        _aubio.CVec_swiginit(self, _aubio.new_CVec(*args))
    __swig_destroy__ = _aubio.delete_CVec

    def copy(self, a):
        return _aubio.CVec_copy(self, a)

    def norm_zeros(self):
        return _aubio.CVec_norm_zeros(self)

    def norm_ones(self):
        return _aubio.CVec_norm_ones(self)

    def phas_set_all(self, v):
        return _aubio.CVec_phas_set_all(self, v)

    def phas_zeros(self):
        return _aubio.CVec_phas_zeros(self)

    def phas_ones(self):
        return _aubio.CVec_phas_ones(self)

    def zeros(self):
        return _aubio.CVec_zeros(self)

    def logmag(self, _lambda):
        return _aubio.CVec_logmag(self, _lambda)

    def size(self):
        return _aubio.CVec_size(self)

    def norm_set_sample(self, v, p):
        return _aubio.CVec_norm_set_sample(self, v, p)

    def phas_set_sample(self, v, p):
        return _aubio.CVec_phas_set_sample(self, v, p)

    def norm_get_sample(self, p):
        return _aubio.CVec_norm_get_sample(self, p)

    def phas_get_sample(self, p):
        return _aubio.CVec_phas_get_sample(self, p)

    def norm_get_data(self):
        return _aubio.CVec_norm_get_data(self)

    def phas_get_data(self):
        return _aubio.CVec_phas_get_data(self)

# Register CVec in _aubio:
_aubio.CVec_swigregister(CVec)

class LVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pvec = property(_aubio.LVec_pvec_get, _aubio.LVec_pvec_set)

    def __init__(self, *args):
        _aubio.LVec_swiginit(self, _aubio.new_LVec(*args))
    __swig_destroy__ = _aubio.delete_LVec

    def get_sample(self, position):
        return _aubio.LVec_get_sample(self, position)

    def set_sample(self, pos, v):
        return _aubio.LVec_set_sample(self, pos, v)

    def __getitem(self, index):
        return _aubio.LVec___getitem(self, index)

    def __setitem(self, index, value):
        return _aubio.LVec___setitem(self, index, value)

    def get_data(self):
        return _aubio.LVec_get_data(self)

    def set_data(self, *args):
        return _aubio.LVec_set_data(self, *args)

    def _print(self):
        return _aubio.LVec__print(self)

    def setall(self, v):
        return _aubio.LVec_setall(self, v)

    def zeros(self):
        return _aubio.LVec_zeros(self)

    def ones(self):
        return _aubio.LVec_ones(self)

# Register LVec in _aubio:
_aubio.LVec_swigregister(LVec)

class FMat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_aubio.FMat_m_get, _aubio.FMat_m_set)

    def __init__(self, *args):
        _aubio.FMat_swiginit(self, _aubio.new_FMat(*args))
    __swig_destroy__ = _aubio.delete_FMat

    def get_sample(self, channel, pos):
        return _aubio.FMat_get_sample(self, channel, pos)

    def set_sample(self, data, channel, pos):
        return _aubio.FMat_set_sample(self, data, channel, pos)

    def get_channel(self, channel, output):
        return _aubio.FMat_get_channel(self, channel, output)

    def set_channel_data(self, *args):
        return _aubio.FMat_set_channel_data(self, *args)

    def get_channel_data(self, channel):
        return _aubio.FMat_get_channel_data(self, channel)

    def size(self):
        return _aubio.FMat_size(self)

    def rows(self):
        return _aubio.FMat_rows(self)

    def cols(self):
        return _aubio.FMat_cols(self)

    def resize(self, h, l):
        return _aubio.FMat_resize(self, h, l)

    def _print(self):
        return _aubio.FMat__print(self)

    def set(self, v):
        return _aubio.FMat_set(self, v)

    def zeros(self):
        return _aubio.FMat_zeros(self)

    def ones(self):
        return _aubio.FMat_ones(self)

    def reverse(self):
        return _aubio.FMat_reverse(self)

    def weight(self, w):
        return _aubio.FMat_weight(self, w)

    def __call__(self, h, w):
        return _aubio.FMat___call__(self, h, w)

    def copy(self, a):
        return _aubio.FMat_copy(self, a)

    def vecmul(self, scale, output):
        return _aubio.FMat_vecmul(self, scale, output)

    def __mul__(self, input):
        return _aubio.FMat___mul__(self, input)

# Register FMat in _aubio:
_aubio.FMat_swigregister(FMat)


def new_window(name, size):
    return _aubio.new_window(name, size)

def set_window(window, window_type):
    return _aubio.set_window(window, window_type)
SRC_SINC_BEST_QUALITY = _aubio.SRC_SINC_BEST_QUALITY
SRC_SINC_MEDIUM_QUALITY = _aubio.SRC_SINC_MEDIUM_QUALITY
SRC_SINC_FASTEST = _aubio.SRC_SINC_FASTEST
SRC_ZERO_ORDER_HOLD = _aubio.SRC_ZERO_ORDER_HOLD
SRC_LINEAR = _aubio.SRC_LINEAR
class Resampler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    resampler = property(_aubio.Resampler_resampler_get, _aubio.Resampler_resampler_set)

    def __init__(self, ratio, type):
        _aubio.Resampler_swiginit(self, _aubio.new_Resampler(ratio, type))
    __swig_destroy__ = _aubio.delete_Resampler

    def process(self, input, output):
        return _aubio.Resampler_process(self, input, output)

# Register Resampler in _aubio:
_aubio.Resampler_swigregister(Resampler)

class Filter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_aubio.Filter_filter_get, _aubio.Filter_filter_set)

    def __init__(self, *args):
        _aubio.Filter_swiginit(self, _aubio.new_Filter(*args))
    __swig_destroy__ = _aubio.delete_Filter

    def process(self, input):
        return _aubio.Filter_process(self, input)

    def do_outplace(self, _in, out):
        return _aubio.Filter_do_outplace(self, _in, out)

    def do_filtfilt(self, input, temp):
        return _aubio.Filter_do_filtfilt(self, input, temp)

    def get_feedback(self, vec):
        return _aubio.Filter_get_feedback(self, vec)

    def get_feedforward(self, vec):
        return _aubio.Filter_get_feedforward(self, vec)

    def get_order(self):
        return _aubio.Filter_get_order(self)

    def get_samplerate(self):
        return _aubio.Filter_get_samplerate(self)

    def set_samplerate(self, samplerate):
        return _aubio.Filter_set_samplerate(self, samplerate)

    def do_reset(self):
        return _aubio.Filter_do_reset(self)

# Register Filter in _aubio:
_aubio.Filter_swigregister(Filter)

class BiQuad(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, b0, b1, b2, a1, a2):
        _aubio.BiQuad_swiginit(self, _aubio.new_BiQuad(b0, b1, b2, a1, a2))

    def set_biquad(self, b0, b1, b2, a1, a2):
        return _aubio.BiQuad_set_biquad(self, b0, b1, b2, a1, a2)
    __swig_destroy__ = _aubio.delete_BiQuad

# Register BiQuad in _aubio:
_aubio.BiQuad_swigregister(BiQuad)

class AWeighting(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, samplerate):
        _aubio.AWeighting_swiginit(self, _aubio.new_AWeighting(samplerate))

    def set_a_weighting(self, samplerate):
        return _aubio.AWeighting_set_a_weighting(self, samplerate)
    __swig_destroy__ = _aubio.delete_AWeighting

# Register AWeighting in _aubio:
_aubio.AWeighting_swigregister(AWeighting)

class CWeighting(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, samplerate):
        _aubio.CWeighting_swiginit(self, _aubio.new_CWeighting(samplerate))

    def set_c_weighting(self, samplerate):
        return _aubio.CWeighting_set_c_weighting(self, samplerate)
    __swig_destroy__ = _aubio.delete_CWeighting

# Register CWeighting in _aubio:
_aubio.CWeighting_swigregister(CWeighting)

class FFT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fft = property(_aubio.FFT_fft_get, _aubio.FFT_fft_set)

    def __init__(self, size):
        _aubio.FFT_swiginit(self, _aubio.new_FFT(size))
    __swig_destroy__ = _aubio.delete_FFT

    def forward(self, input, spectrum):
        return _aubio.FFT_forward(self, input, spectrum)

    def reverse(self, spectrum, output):
        return _aubio.FFT_reverse(self, spectrum, output)

    def forward_complex(self, input, compspec):
        return _aubio.FFT_forward_complex(self, input, compspec)

    def inverse_complex(self, compspec, output):
        return _aubio.FFT_inverse_complex(self, compspec, output)

    @staticmethod
    def get_spectrum(compspec, spectrum):
        return _aubio.FFT_get_spectrum(compspec, spectrum)

    @staticmethod
    def get_realimag(spectrum, compspec):
        return _aubio.FFT_get_realimag(spectrum, compspec)

    @staticmethod
    def get_phase(compspec, spectrum):
        return _aubio.FFT_get_phase(compspec, spectrum)

    @staticmethod
    def get_imaginary(spectrum, compspec):
        return _aubio.FFT_get_imaginary(spectrum, compspec)

    @staticmethod
    def get_norm(compspec, spectrum):
        return _aubio.FFT_get_norm(compspec, spectrum)

    @staticmethod
    def get_real(spectrum, compspec):
        return _aubio.FFT_get_real(spectrum, compspec)

# Register FFT in _aubio:
_aubio.FFT_swigregister(FFT)

class DCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dct = property(_aubio.DCT_dct_get, _aubio.DCT_dct_set)

    def __init__(self, size):
        _aubio.DCT_swiginit(self, _aubio.new_DCT(size))
    __swig_destroy__ = _aubio.delete_DCT

    def forward(self, input, output):
        return _aubio.DCT_forward(self, input, output)

    def reverse(self, input, output):
        return _aubio.DCT_reverse(self, input, output)

# Register DCT in _aubio:
_aubio.DCT_swigregister(DCT)

class PhaseVocoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pvoc = property(_aubio.PhaseVocoder_pvoc_get, _aubio.PhaseVocoder_pvoc_set)

    def __init__(self, win_s, hop_s):
        _aubio.PhaseVocoder_swiginit(self, _aubio.new_PhaseVocoder(win_s, hop_s))
    __swig_destroy__ = _aubio.delete_PhaseVocoder

    def forward(self, _in, fftgrain):
        return _aubio.PhaseVocoder_forward(self, _in, fftgrain)

    def reverse(self, fftgrain, out):
        return _aubio.PhaseVocoder_reverse(self, fftgrain, out)

    def get_win(self):
        return _aubio.PhaseVocoder_get_win(self)

    def get_hop(self):
        return _aubio.PhaseVocoder_get_hop(self)

    def set_window(self, window_type):
        return _aubio.PhaseVocoder_set_window(self, window_type)

# Register PhaseVocoder in _aubio:
_aubio.PhaseVocoder_swigregister(PhaseVocoder)

class FilterBank(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bank = property(_aubio.FilterBank_bank_get, _aubio.FilterBank_bank_set)

    def __init__(self, nfilters, win_s):
        _aubio.FilterBank_swiginit(self, _aubio.new_FilterBank(nfilters, win_s))
    __swig_destroy__ = _aubio.delete_FilterBank

    def process(self, _in, out):
        return _aubio.FilterBank_process(self, _in, out)

    def get_coeffs(self):
        return _aubio.FilterBank_get_coeffs(self)

    def set_coeffs(self, m):
        return _aubio.FilterBank_set_coeffs(self, m)

    def set_norm(self, norm):
        return _aubio.FilterBank_set_norm(self, norm)

    def set_power(self, power):
        return _aubio.FilterBank_set_power(self, power)

    def get_power(self):
        return _aubio.FilterBank_get_power(self)

# Register FilterBank in _aubio:
_aubio.FilterBank_swigregister(FilterBank)

class MelFilterBank(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fb = property(_aubio.MelFilterBank_fb_get, _aubio.MelFilterBank_fb_set)

    def __init__(self, nfilters, win_s):
        _aubio.MelFilterBank_swiginit(self, _aubio.new_MelFilterBank(nfilters, win_s))
    __swig_destroy__ = _aubio.delete_MelFilterBank

    def set_triangle_bands(self, freqs, samplerate):
        return _aubio.MelFilterBank_set_triangle_bands(self, freqs, samplerate)

    def set_mel_coeffs_slaney(self, samplerate):
        return _aubio.MelFilterBank_set_mel_coeffs_slaney(self, samplerate)

    def set_mel_coeffs(self, samplerate, fmin, fmax):
        return _aubio.MelFilterBank_set_mel_coeffs(self, samplerate, fmin, fmax)

    def set_mel_coeffs_htk(self, samplerate, fmin, fmax):
        return _aubio.MelFilterBank_set_mel_coeffs_htk(self, samplerate, fmin, fmax)

# Register MelFilterBank in _aubio:
_aubio.MelFilterBank_swigregister(MelFilterBank)

class MFCC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mfcc = property(_aubio.MFCC_mfcc_get, _aubio.MFCC_mfcc_set)

    def __init__(self, buf_size, nfilters, size_coeffs, samplerate):
        _aubio.MFCC_swiginit(self, _aubio.new_MFCC(buf_size, nfilters, size_coeffs, samplerate))
    __swig_destroy__ = _aubio.delete_MFCC

    def process(self, _in, out):
        return _aubio.MFCC_process(self, _in, out)

    def set_power(self, power):
        return _aubio.MFCC_set_power(self, power)

    def get_power(self):
        return _aubio.MFCC_get_power(self)

    def set_scale(self, power):
        return _aubio.MFCC_set_scale(self, power)

    def get_scale(self):
        return _aubio.MFCC_get_scale(self)

    def set_mel_coeffs(self, fmin, fmax):
        return _aubio.MFCC_set_mel_coeffs(self, fmin, fmax)

    def set_mel_coeffs_htk(self, fmin, fmax):
        return _aubio.MFCC_set_mel_coeffs_htk(self, fmin, fmax)

    def set_mel_coeffs_slaney(self):
        return _aubio.MFCC_set_mel_coeffs_slaney(self)

# Register MFCC in _aubio:
_aubio.MFCC_swigregister(MFCC)

class AWhitening(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    w = property(_aubio.AWhitening_w_get, _aubio.AWhitening_w_set)

    def __init__(self, buf_size, hop_size, samplerate):
        _aubio.AWhitening_swiginit(self, _aubio.new_AWhitening(buf_size, hop_size, samplerate))
    __swig_destroy__ = _aubio.delete_AWhitening

    def reset(self):
        return _aubio.AWhitening_reset(self)

    def set_relax_time(self, relax_time):
        return _aubio.AWhitening_set_relax_time(self, relax_time)

    def get_relax_time(self):
        return _aubio.AWhitening_get_relax_time(self)

    def set_floor(self, floor):
        return _aubio.AWhitening_set_floor(self, floor)

    def get_floor(self):
        return _aubio.AWhitening_get_floor(self)

# Register AWhitening in _aubio:
_aubio.AWhitening_swigregister(AWhitening)

class TSS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tss = property(_aubio.TSS_tss_get, _aubio.TSS_tss_set)

    def __init__(self, buf_size, hop_size):
        _aubio.TSS_swiginit(self, _aubio.new_TSS(buf_size, hop_size))
    __swig_destroy__ = _aubio.delete_TSS

    def process(self, _in, out, stead):
        return _aubio.TSS_process(self, _in, out, stead)

    def set_threshold(self, thrs):
        return _aubio.TSS_set_threshold(self, thrs)

    def set_alpha(self, alpha):
        return _aubio.TSS_set_alpha(self, alpha)

    def set_beta(self, beta):
        return _aubio.TSS_set_beta(self, beta)

# Register TSS in _aubio:
_aubio.TSS_swigregister(TSS)

class SpecDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sd = property(_aubio.SpecDesc_sd_get, _aubio.SpecDesc_sd_set)

    def __init__(self, method, buf_size):
        _aubio.SpecDesc_swiginit(self, _aubio.new_SpecDesc(method, buf_size))
    __swig_destroy__ = _aubio.delete_SpecDesc

    def process(self, fftgrain, desc):
        return _aubio.SpecDesc_process(self, fftgrain, desc)

# Register SpecDesc in _aubio:
_aubio.SpecDesc_swigregister(SpecDesc)

class Pitch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p = property(_aubio.Pitch_p_get, _aubio.Pitch_p_set)

    def __init__(self, method, buf_size, hop_size, samplerate):
        _aubio.Pitch_swiginit(self, _aubio.new_Pitch(method, buf_size, hop_size, samplerate))
    __swig_destroy__ = _aubio.delete_Pitch

    def process(self, _in, out):
        return _aubio.Pitch_process(self, _in, out)

    def set_tolerance(self, tol):
        return _aubio.Pitch_set_tolerance(self, tol)

    def get_tolerance(self):
        return _aubio.Pitch_get_tolerance(self)

    def set_unit(self, mode):
        return _aubio.Pitch_set_unit(self, mode)

    def set_silence(self, silence, s):
        return _aubio.Pitch_set_silence(self, silence, s)

    def get_silence(self):
        return _aubio.Pitch_get_silence(self)

    def get_confidence(self):
        return _aubio.Pitch_get_confidence(self)

# Register Pitch in _aubio:
_aubio.Pitch_swigregister(Pitch)

class PitchFComb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pitch = property(_aubio.PitchFComb_pitch_get, _aubio.PitchFComb_pitch_set)

    def __init__(self, buf_size, hop_size):
        _aubio.PitchFComb_swiginit(self, _aubio.new_PitchFComb(buf_size, hop_size))
    __swig_destroy__ = _aubio.delete_PitchFComb

    def process(self, input, output):
        return _aubio.PitchFComb_process(self, input, output)

# Register PitchFComb in _aubio:
_aubio.PitchFComb_swigregister(PitchFComb)

class PitchMComb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pitch = property(_aubio.PitchMComb_pitch_get, _aubio.PitchMComb_pitch_set)

    def __init__(self, buf_size, hop_size):
        _aubio.PitchMComb_swiginit(self, _aubio.new_PitchMComb(buf_size, hop_size))
    __swig_destroy__ = _aubio.delete_PitchMComb

    def process(self, input, output):
        return _aubio.PitchMComb_process(self, input, output)

# Register PitchMComb in _aubio:
_aubio.PitchMComb_swigregister(PitchMComb)

class PitchSchmitt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pitch = property(_aubio.PitchSchmitt_pitch_get, _aubio.PitchSchmitt_pitch_set)

    def __init__(self, buf_size):
        _aubio.PitchSchmitt_swiginit(self, _aubio.new_PitchSchmitt(buf_size))
    __swig_destroy__ = _aubio.delete_PitchSchmitt

    def process(self, input, output):
        return _aubio.PitchSchmitt_process(self, input, output)

# Register PitchSchmitt in _aubio:
_aubio.PitchSchmitt_swigregister(PitchSchmitt)

class PitchSpecACF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pitch = property(_aubio.PitchSpecACF_pitch_get, _aubio.PitchSpecACF_pitch_set)

    def __init__(self, buf_size):
        _aubio.PitchSpecACF_swiginit(self, _aubio.new_PitchSpecACF(buf_size))
    __swig_destroy__ = _aubio.delete_PitchSpecACF

    def get_tolerance(self):
        return _aubio.PitchSpecACF_get_tolerance(self)

    def set_tolerance(self, tol):
        return _aubio.PitchSpecACF_set_tolerance(self, tol)

    def get_confidence(self):
        return _aubio.PitchSpecACF_get_confidence(self)

    def process(self, input, output):
        return _aubio.PitchSpecACF_process(self, input, output)

# Register PitchSpecACF in _aubio:
_aubio.PitchSpecACF_swigregister(PitchSpecACF)

class PitchYin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pitch = property(_aubio.PitchYin_pitch_get, _aubio.PitchYin_pitch_set)

    def __init__(self, buf_size):
        _aubio.PitchYin_swiginit(self, _aubio.new_PitchYin(buf_size))
    __swig_destroy__ = _aubio.delete_PitchYin

    def get_tolerance(self):
        return _aubio.PitchYin_get_tolerance(self)

    def set_tolerance(self, tol):
        return _aubio.PitchYin_set_tolerance(self, tol)

    def get_confidence(self):
        return _aubio.PitchYin_get_confidence(self)

    def process(self, input, output):
        return _aubio.PitchYin_process(self, input, output)

# Register PitchYin in _aubio:
_aubio.PitchYin_swigregister(PitchYin)

class PitchYinFast(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pitch = property(_aubio.PitchYinFast_pitch_get, _aubio.PitchYinFast_pitch_set)

    def __init__(self, buf_size):
        _aubio.PitchYinFast_swiginit(self, _aubio.new_PitchYinFast(buf_size))
    __swig_destroy__ = _aubio.delete_PitchYinFast

    def get_tolerance(self):
        return _aubio.PitchYinFast_get_tolerance(self)

    def set_tolerance(self, tol):
        return _aubio.PitchYinFast_set_tolerance(self, tol)

    def get_confidence(self):
        return _aubio.PitchYinFast_get_confidence(self)

    def process(self, input, output):
        return _aubio.PitchYinFast_process(self, input, output)

# Register PitchYinFast in _aubio:
_aubio.PitchYinFast_swigregister(PitchYinFast)

class PitchYinFFT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pitch = property(_aubio.PitchYinFFT_pitch_get, _aubio.PitchYinFFT_pitch_set)

    def __init__(self, sr, buf_size):
        _aubio.PitchYinFFT_swiginit(self, _aubio.new_PitchYinFFT(sr, buf_size))
    __swig_destroy__ = _aubio.delete_PitchYinFFT

    def get_tolerance(self):
        return _aubio.PitchYinFFT_get_tolerance(self)

    def set_tolerance(self, tol):
        return _aubio.PitchYinFFT_set_tolerance(self, tol)

    def get_confidence(self):
        return _aubio.PitchYinFFT_get_confidence(self)

    def process(self, input, output):
        return _aubio.PitchYinFFT_process(self, input, output)

# Register PitchYinFFT in _aubio:
_aubio.PitchYinFFT_swigregister(PitchYinFFT)

class Tempo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tempo = property(_aubio.Tempo_tempo_get, _aubio.Tempo_tempo_set)

    def __init__(self, method, buf_size, hop_size, samplerate):
        _aubio.Tempo_swiginit(self, _aubio.new_Tempo(method, buf_size, hop_size, samplerate))
    __swig_destroy__ = _aubio.delete_Tempo

    def process(self, _in, out):
        return _aubio.Tempo_process(self, _in, out)

    def get_last(self):
        return _aubio.Tempo_get_last(self)

    def get_last_s(self):
        return _aubio.Tempo_get_last_s(self)

    def get_last_ms(self):
        return _aubio.Tempo_get_last_ms(self)

    def set_silence(self, silence):
        return _aubio.Tempo_set_silence(self, silence)

    def get_silence(self):
        return _aubio.Tempo_get_silence(self)

    def set_threshold(self, threshold):
        return _aubio.Tempo_set_threshold(self, threshold)

    def get_threshold(self):
        return _aubio.Tempo_get_threshold(self)

    def get_period(self):
        return _aubio.Tempo_get_period(self)

    def get_period_s(self):
        return _aubio.Tempo_get_period_s(self)

    def get_bpm(self):
        return _aubio.Tempo_get_bpm(self)

    def get_confidence(self):
        return _aubio.Tempo_get_confidence(self)

    def get_set_tatum_signature(self, x):
        return _aubio.Tempo_get_set_tatum_signature(self, x)

    def was_tatum(self):
        return _aubio.Tempo_was_tatum(self)

    def get_last_tatum(self):
        return _aubio.Tempo_get_last_tatum(self)

    def get_delay(self):
        return _aubio.Tempo_get_delay(self)

    def get_delay_s(self):
        return _aubio.Tempo_get_delay_s(self)

    def get_delay_ms(self):
        return _aubio.Tempo_get_delay_ms(self)

    def set_delay(self, delay):
        return _aubio.Tempo_set_delay(self, delay)

    def set_delay_s(self, delay):
        return _aubio.Tempo_set_delay_s(self, delay)

    def set_delay_ms(self, delay):
        return _aubio.Tempo_set_delay_ms(self, delay)

# Register Tempo in _aubio:
_aubio.Tempo_swigregister(Tempo)

class BeatTrack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bt = property(_aubio.BeatTrack_bt_get, _aubio.BeatTrack_bt_set)

    def __init__(self, winlen, hop_size, samplerate):
        _aubio.BeatTrack_swiginit(self, _aubio.new_BeatTrack(winlen, hop_size, samplerate))
    __swig_destroy__ = _aubio.delete_BeatTrack

    def process(self, dfframes, out):
        return _aubio.BeatTrack_process(self, dfframes, out)

    def get_period(self):
        return _aubio.BeatTrack_get_period(self)

    def get_period_s(self):
        return _aubio.BeatTrack_get_period_s(self)

    def get_bpm(self):
        return _aubio.BeatTrack_get_bpm(self)

    def get_confidence(self):
        return _aubio.BeatTrack_get_confidence(self)

# Register BeatTrack in _aubio:
_aubio.BeatTrack_swigregister(BeatTrack)

class Sink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sink = property(_aubio.Sink_sink_get, _aubio.Sink_sink_set)

    def __init__(self, uri, samplerate):
        _aubio.Sink_swiginit(self, _aubio.new_Sink(uri, samplerate))
    __swig_destroy__ = _aubio.delete_Sink

    def preset_samplerate(self, samplerate):
        return _aubio.Sink_preset_samplerate(self, samplerate)

    def get_samplerate(self):
        return _aubio.Sink_get_samplerate(self)

    def get_channels(self):
        return _aubio.Sink_get_channels(self)

    def process(self, write_data, write):
        return _aubio.Sink_process(self, write_data, write)

    def process_multi(self, write_data, write):
        return _aubio.Sink_process_multi(self, write_data, write)

    def close(self):
        return _aubio.Sink_close(self)

# Register Sink in _aubio:
_aubio.Sink_swigregister(Sink)

FORMAT_WAV = _aubio.FORMAT_WAV
FORMAT_AIFF = _aubio.FORMAT_AIFF
FORMAT_FLAC = _aubio.FORMAT_FLAC
FORMAT_OGG = _aubio.FORMAT_OGG
class SinkSoundFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file = property(_aubio.SinkSoundFile_file_get, _aubio.SinkSoundFile_file_set)

    def __init__(self, uri, samplerate):
        _aubio.SinkSoundFile_swiginit(self, _aubio.new_SinkSoundFile(uri, samplerate))
    __swig_destroy__ = _aubio.delete_SinkSoundFile

    def preset_samplerate(self, samplerate):
        return _aubio.SinkSoundFile_preset_samplerate(self, samplerate)

    def preset_channels(self, channels):
        return _aubio.SinkSoundFile_preset_channels(self, channels)

    def get_samplerate(self):
        return _aubio.SinkSoundFile_get_samplerate(self)

    def get_channels(self):
        return _aubio.SinkSoundFile_get_channels(self)

    def process(self, write_data, write):
        return _aubio.SinkSoundFile_process(self, write_data, write)

    def do_multi(self, write_data, write):
        return _aubio.SinkSoundFile_do_multi(self, write_data, write)

# Register SinkSoundFile in _aubio:
_aubio.SinkSoundFile_swigregister(SinkSoundFile)

class SinkWavWrite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wav = property(_aubio.SinkWavWrite_wav_get, _aubio.SinkWavWrite_wav_set)

    def __init__(self, uri, samplerate):
        _aubio.SinkWavWrite_swiginit(self, _aubio.new_SinkWavWrite(uri, samplerate))
    __swig_destroy__ = _aubio.delete_SinkWavWrite

    def preset_samplerate(self, samplerate):
        return _aubio.SinkWavWrite_preset_samplerate(self, samplerate)

    def preset_channels(self, channels):
        return _aubio.SinkWavWrite_preset_channels(self, channels)

    def get_samplerate(self):
        return _aubio.SinkWavWrite_get_samplerate(self)

    def get_channels(self):
        return _aubio.SinkWavWrite_get_channels(self)

    def process(self, write_data, write):
        return _aubio.SinkWavWrite_process(self, write_data, write)

    def do_multi(self, write_data, write):
        return _aubio.SinkWavWrite_do_multi(self, write_data, write)

# Register SinkWavWrite in _aubio:
_aubio.SinkWavWrite_swigregister(SinkWavWrite)

class Sampler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sampler = property(_aubio.Sampler_sampler_get, _aubio.Sampler_sampler_set)

    def __init__(self, samplerate, hop_size):
        _aubio.Sampler_swiginit(self, _aubio.new_Sampler(samplerate, hop_size))
    __swig_destroy__ = _aubio.delete_Sampler

    def load(self, uri):
        return _aubio.Sampler_load(self, uri)

    def process(self, input, output):
        return _aubio.Sampler_process(self, input, output)

    def process_multi(self, input, output):
        return _aubio.Sampler_process_multi(self, input, output)

# Register Sampler in _aubio:
_aubio.Sampler_swigregister(Sampler)

class Source(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    source = property(_aubio.Source_source_get, _aubio.Source_source_set)

    def __init__(self, uri, samplerate, hop_size):
        _aubio.Source_swiginit(self, _aubio.new_Source(uri, samplerate, hop_size))
    __swig_destroy__ = _aubio.delete_Source

    def process(self, read_to):
        return _aubio.Source_process(self, read_to)

    def process_multi(self, read_to):
        return _aubio.Source_process_multi(self, read_to)

    def get_samplerate(self):
        return _aubio.Source_get_samplerate(self)

    def get_channels(self):
        return _aubio.Source_get_channels(self)

    def seek(self, pos):
        return _aubio.Source_seek(self, pos)

    def get_duration(self):
        return _aubio.Source_get_duration(self)

# Register Source in _aubio:
_aubio.Source_swigregister(Source)

class SourceSoundFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file = property(_aubio.SourceSoundFile_file_get, _aubio.SourceSoundFile_file_set)

    def __init__(self, uri, samplerate, hop_size):
        _aubio.SourceSoundFile_swiginit(self, _aubio.new_SourceSoundFile(uri, samplerate, hop_size))
    __swig_destroy__ = _aubio.delete_SourceSoundFile

    def process(self, read_to):
        return _aubio.SourceSoundFile_process(self, read_to)

    def multi_process(self, read_to):
        return _aubio.SourceSoundFile_multi_process(self, read_to)

    def get_samplerate(self):
        return _aubio.SourceSoundFile_get_samplerate(self)

    def get_channels(self):
        return _aubio.SourceSoundFile_get_channels(self)

    def seek(self, pos):
        return _aubio.SourceSoundFile_seek(self, pos)

    def get_duration(self):
        return _aubio.SourceSoundFile_get_duration(self)

    def close(self):
        return _aubio.SourceSoundFile_close(self)

# Register SourceSoundFile in _aubio:
_aubio.SourceSoundFile_swigregister(SourceSoundFile)

class SourceWavFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file = property(_aubio.SourceWavFile_file_get, _aubio.SourceWavFile_file_set)

    def __init__(self, uri, samplerate, hop_size):
        _aubio.SourceWavFile_swiginit(self, _aubio.new_SourceWavFile(uri, samplerate, hop_size))
    __swig_destroy__ = _aubio.delete_SourceWavFile

    def process(self, read_to):
        return _aubio.SourceWavFile_process(self, read_to)

    def multi_process(self, read_to):
        return _aubio.SourceWavFile_multi_process(self, read_to)

    def get_samplerate(self):
        return _aubio.SourceWavFile_get_samplerate(self)

    def get_channels(self):
        return _aubio.SourceWavFile_get_channels(self)

    def seek(self, pos):
        return _aubio.SourceWavFile_seek(self, pos)

    def get_duration(self):
        return _aubio.SourceWavFile_get_duration(self)

    def close(self):
        return _aubio.SourceWavFile_close(self)

# Register SourceWavFile in _aubio:
_aubio.SourceWavFile_swigregister(SourceWavFile)

class Notes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    notes = property(_aubio.Notes_notes_get, _aubio.Notes_notes_set)

    def __init__(self, buf_size, hop_size, sample_rate):
        _aubio.Notes_swiginit(self, _aubio.new_Notes(buf_size, hop_size, sample_rate))
    __swig_destroy__ = _aubio.delete_Notes

    def process(self, input, output):
        return _aubio.Notes_process(self, input, output)

    def set_silence(self, silence):
        return _aubio.Notes_set_silence(self, silence)

    def get_silence(self):
        return _aubio.Notes_get_silence(self)

    def get_minioi_ms(self):
        return _aubio.Notes_get_minioi_ms(self)

    def set_minitoi_ms(self, minioi_ms):
        return _aubio.Notes_set_minitoi_ms(self, minioi_ms)

    def release_drop(self, release_drop):
        return _aubio.Notes_release_drop(self, release_drop)

# Register Notes in _aubio:
_aubio.Notes_swigregister(Notes)

class Onset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    onset = property(_aubio.Onset_onset_get, _aubio.Onset_onset_set)

    def __init__(self, buf_size, hop_size, samplerate):
        _aubio.Onset_swiginit(self, _aubio.new_Onset(buf_size, hop_size, samplerate))
    __swig_destroy__ = _aubio.delete_Onset

    def process(self, input, output):
        return _aubio.Onset_process(self, input, output)

    def get_last(self):
        return _aubio.Onset_get_last(self)

    def get_last_s(self):
        return _aubio.Onset_get_last_s(self)

    def get_last_ms(self):
        return _aubio.Onset_get_last_ms(self)

    def set_awhitening(self, enable):
        return _aubio.Onset_set_awhitening(self, enable)

    def get_awhitening(self):
        return _aubio.Onset_get_awhitening(self)

    def set_compression(self, _lambda):
        return _aubio.Onset_set_compression(self, _lambda)

    def get_compression(self):
        return _aubio.Onset_get_compression(self)

    def set_silence(self, silence):
        return _aubio.Onset_set_silence(self, silence)

    def get_silence(self):
        return _aubio.Onset_get_silence(self)

    def get_thresholded_descriptor(self):
        return _aubio.Onset_get_thresholded_descriptor(self)

    def set_threshold(self, thresh):
        return _aubio.Onset_set_threshold(self, thresh)

    def set_minioi(self, minioi):
        return _aubio.Onset_set_minioi(self, minioi)

    def set_minioi_s(self, mini):
        return _aubio.Onset_set_minioi_s(self, mini)

    def set_minioi_ms(self, mini):
        return _aubio.Onset_set_minioi_ms(self, mini)

    def set_delay(self, delay):
        return _aubio.Onset_set_delay(self, delay)

    def set_delay_s(self, delay):
        return _aubio.Onset_set_delay_s(self, delay)

    def set_delay_ms(self, ms):
        return _aubio.Onset_set_delay_ms(self, ms)

    def get_minioi(self):
        return _aubio.Onset_get_minioi(self)

    def get_minioi_ms(self):
        return _aubio.Onset_get_minioi_ms(self)

    def get_delay(self):
        return _aubio.Onset_get_delay(self)

    def get_delay_s(self):
        return _aubio.Onset_get_delay_s(self)

    def get_delay_ms(self):
        return _aubio.Onset_get_delay_ms(self)

    def get_threshold(self):
        return _aubio.Onset_get_threshold(self)

    def set_default_parameters(self, onset_mode):
        return _aubio.Onset_set_default_parameters(self, onset_mode)

    def reset(self):
        return _aubio.Onset_reset(self)

# Register Onset in _aubio:
_aubio.Onset_swigregister(Onset)

class PeakPicker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pick = property(_aubio.PeakPicker_pick_get, _aubio.PeakPicker_pick_set)

    def __init__(self):
        _aubio.PeakPicker_swiginit(self, _aubio.new_PeakPicker())
    __swig_destroy__ = _aubio.delete_PeakPicker

    def process(self, _in, out):
        return _aubio.PeakPicker_process(self, _in, out)

    def get_thresholded_input(self):
        return _aubio.PeakPicker_get_thresholded_input(self)

    def set_threshold(self, thresh):
        return _aubio.PeakPicker_set_threshold(self, thresh)

    def get_threshold(self):
        return _aubio.PeakPicker_get_threshold(self)

# Register PeakPicker in _aubio:
_aubio.PeakPicker_swigregister(PeakPicker)

class Histogram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hist = property(_aubio.Histogram_hist_get, _aubio.Histogram_hist_set)

    def __init__(self, flow, fhig, nelems):
        _aubio.Histogram_swiginit(self, _aubio.new_Histogram(flow, fhig, nelems))
    __swig_destroy__ = _aubio.delete_Histogram

    def process(self, input):
        return _aubio.Histogram_process(self, input)

    def process_notnull(self, input):
        return _aubio.Histogram_process_notnull(self, input)

    def hist_mean(self):
        return _aubio.Histogram_hist_mean(self)

    def hist_weight(self):
        return _aubio.Histogram_hist_weight(self)

    def dyn_notnull(self, input):
        return _aubio.Histogram_dyn_notnull(self, input)

# Register Histogram in _aubio:
_aubio.Histogram_swigregister(Histogram)


def mean(s):
    return _aubio.mean(s)

def max(s):
    return _aubio.max(s)

def min(s):
    return _aubio.min(s)

def min_elem(s):
    return _aubio.min_elem(s)

def max_elem(s):
    return _aubio.max_elem(s)

def shift(s):
    return _aubio.shift(s)

def ishift(s):
    return _aubio.ishift(s)

def push(s, new_elem):
    return _aubio.push(s, new_elem)

def sum(s):
    return _aubio.sum(s)

def local_hfc(s):
    return _aubio.local_hfc(s)

def alpha_norm(s, p):
    return _aubio.alpha_norm(s, p)

def alpha_normalise(s, p):
    return _aubio.alpha_normalise(s, p)

def add(v, c):
    return _aubio.add(v, c)

def mul(v, c):
    return _aubio.mul(v, c)

def remove_min(v):
    return _aubio.remove_min(v)

def moving_threshold(v, tmp, post, pre, pos):
    return _aubio.moving_threshold(v, tmp, post, pre, pos)

def adapt_threshold(v, tmp, post, pre):
    return _aubio.adapt_threshold(v, tmp, post, pre)

def median(v):
    return _aubio.median(v)

def quadratic_peak_pos(x, p):
    return _aubio.quadratic_peak_pos(x, p)

def quadratic_peak_mag(x, p):
    return _aubio.quadratic_peak_mag(x, p)

def quadfrac(s0, s1, s2, s3):
    return _aubio.quadfrac(s0, s1, s2, s3)

def peakpick(v, p):
    return _aubio.peakpick(v, p)

def is_power_of_two(x):
    return _aubio.is_power_of_two(x)

def next_power_of_two(x):
    return _aubio.next_power_of_two(x)

def power_of_two_order(x):
    return _aubio.power_of_two_order(x)

def autocorr(input, output):
    return _aubio.autocorr(input, output)


